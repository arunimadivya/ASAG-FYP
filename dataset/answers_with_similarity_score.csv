,Unnamed: 0,id,question,desired_answer,student_answer,score_me,score_other,score_avg,bert_similarity_score,elmo_similarity_score,gpt_similarity_score,gpt2_similarity_score,normalized_bert_similarity_score,normalized_elmo_similarity_score,normalized_gpt_similarity_score,normalized_gpt2_similarity_score
0,0.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.,4.0,3.0,3.5,0.9723823070000001,0.29617989100000003,0.994956427,0.999945775,0.9707004966381496,0.3822948980396012,0.9949165838040327,0.9999457708598439
1,1.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,5.0,5.0,5.0,0.9716012479999999,0.504172325,0.9935473020000001,0.999949599,0.96987187417514,0.564838684453299,0.9934963270045095,0.9999495951518117
2,2.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,5.0,3.0,4.0,0.9860813620000001,0.786471367,0.999015482,0.999982503,0.9852337709426571,0.8125973891167557,0.9990077045090014,0.9999825016640792
3,3.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",5.0,5.0,5.0,0.983489871,0.6177712679999999,0.992065537,0.999987911,0.9824844681943534,0.664538374432473,0.9920028563638311,0.9999879100769876
4,4.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,3.0,3.0,3.0,0.977570355,0.45766988399999997,0.995158092,0.999979264,0.9762044766345035,0.5240259899991363,0.9951198419163193,0.9999792624167768
5,5.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To find problem and errors in a program before it is finalized,2.0,2.0,2.0,0.947760522,0.096652053,0.9944987820000001,0.9999300529999999,0.9445793404509817,0.20718003283513461,0.9944553235020596,0.9999300476594467
6,6.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",3.0,2.0,2.5,0.972208917,0.279286951,0.9956335999999999,0.999963253,0.9705165478598099,0.3674688720541588,0.9955991063323416,0.9999632501943142
7,7.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,you can break the whole program into prototype programs to simulate parts of the final program,5.0,5.0,5.0,0.962785661,0.35032570399999996,0.990592191,0.999973837,0.9605194521265936,0.42981576951258954,0.9905178712315323,0.9999738350024175
8,8.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,#NAME?,5.0,2.0,3.5,0.963970482,0.33994987600000004,0.996323246,0.9999851670000001,0.961776424129023,0.42070946264424813,0.996294200394802,0.9999851658674793
9,9.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,Simulating the behavior of only a portion of the desired software product.,5.0,5.0,5.0,0.988627076,0.868911147,0.998604615,0.999951501,0.9879345090492508,0.8849503555343334,0.9985935917436685,0.9999514972970321
10,10.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A program that stimulates the behavior of portions of the desired software product.,5.0,5.0,5.0,0.98829031,0.825634778,0.998502601,0.999985426,0.9875772353063224,0.846969011176892,0.9984907718539168,0.9999854248872543
11,11.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A program that simulates the behavior of portions of the desired software product.,5.0,5.0,5.0,0.988543093,0.9114789959999999,0.998502601,0.999985426,0.9878454118103599,0.9223098699479515,0.9984907718539168,0.9999854248872543
12,12.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To lay out the basics and give you a starting point in the actual problem solving.,2.0,2.0,2.0,0.964094758,0.138100311,0.993524055,0.999964561,0.9619082680552988,0.24355694237008357,0.9934728963579601,0.9999645582941817
13,13.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To simulate problem solving for parts of the problem,4.0,5.0,4.5,0.9654838440000001,0.41913852100000004,0.995931868,0.999978315,0.9633819440037896,0.4902090825163351,0.995899730588586,0.9999783133443193
14,14.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,2.0,2.0,2.0,0.967365265,0.274500042,0.99519701,0.9999775940000001,0.9653779362437842,0.36326765916735826,0.9951590673605658,0.9999775922892701
15,15.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",4.0,5.0,4.5,0.975725651,0.354126483,0.994691202,0.9999673290000001,0.9742474373173664,0.4331515090711817,0.9946492635807357,0.9999673265055226
16,16.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,Program that simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.9786942009999999,0.869400203,0.997516662,0.999986169,0.9773967604959832,0.8853795737144924,0.9974970441373087,0.9999861679439835
17,17.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it provides a limited proof of concept to verify with the client before actually programming the whole application.,2.0,2.0,2.0,0.9794147609999999,0.338255763,0.9936076690000001,0.99997616,0.9781611998045965,0.4192226306682702,0.9935571708914724,0.999976158179782
18,18.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It tests the main function of the program while leaving out the finer details.,2.0,2.0,2.0,0.974710643,0.29408940699999997,0.998025717,0.999956381,0.9731706192678535,0.3804601925291245,0.9980101205677755,0.9999563776696271
19,19.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,3.0,2.0,2.5,0.9723280670000001,0.385987639,0.99242992,0.9999819990000001,0.9706429536325718,0.4611143341793177,0.9923701179150638,0.999981997625598
20,20.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.9833356740000001,0.891450822,0.997823045,0.999986721,0.9823208811952553,0.9047322174987651,0.9978058475003945,0.9999867199861295
21,21.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It simulates the behavior of portions of the desired software product.,5.0,5.0,5.0,0.991263986,0.944082141,1.0,0.9999878729999999,0.9907319966384531,0.9509238989433275,0.9999999999999999,0.9999878720740863
22,22.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program is used in problem solving to collect data for the problem.,1.0,2.0,1.5,0.9595326190000001,0.272711277,0.994843417,0.99993945,0.9570683124888535,0.36169775621548306,0.994802681048128,0.9999394453769209
23,23.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To ease the understanding of problem under discussion and to ease the understanding of the program itself,2.0,3.0,2.5,0.975583077,0.126687288,0.998517575,0.999989215,0.9740961811138773,0.23354034516613614,0.9985058641454566,0.99998921417655
24,24.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,5.0,5.0,5.0,0.9833356740000001,0.891450822,0.997823045,0.999986721,0.9823208811952553,0.9047322174987651,0.9978058475003945,0.9999867199861295
25,25.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,The role of a prototype program is to help spot key problems that may arise during the actual programing.,2.0,2.0,2.0,0.968635857,0.323851407,0.995593438,0.9999654020000001,0.966725902367368,0.40658070117822503,0.9955586270607496,0.9999653993583933
26,26.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.",4.0,2.0,3.0,0.9709943529999999,0.32552200600000003,0.99357862,0.9999676679999999,0.9692280216240674,0.40804689617952467,0.9935278924103089,0.9999676655314057
27,27.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,to show that a certain part of the program works as it is supposed to,4.0,2.0,3.0,0.965822935,0.17381539899999998,0.98695229,0.9999198579999999,0.963741684330198,0.27490215656964634,0.9868492157575028,0.9999198518810438
28,28.0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",3.0,2.0,2.5,0.976486266,0.369107306,0.992495437,0.9999833290000001,0.9750543708200878,0.44629937268055425,0.9924361524859743,0.9999833277271456
29,29.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,5.0,2.0,3.5,0.93632853,0.293439865,0.986294737,0.999933107,0.9324511844881846,0.3798901244077297,0.9861864682231841,0.999933101892624
30,30.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),The implementation phase and the maintenance phase are effected,3.0,5.0,4.0,0.9423908590000001,0.577789247,0.991254753,0.999943062,0.9388826858056968,0.6294483023493127,0.9911856673359275,0.9999430576527025
31,31.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",4.0,5.0,4.5,0.9466194509999999,0.467555612,0.98899593,0.9999048509999999,0.9433687826538255,0.5327021624246002,0.9889090000958531,0.9999048437352379
32,32.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",2.0,4.0,3.0,0.956290126,0.5026196239999999,0.9861820720000001,0.999937678,0.9536283642442887,0.5634759621933713,0.986072913192709,0.9999376732416264
33,33.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",3.0,3.0,3.0,0.946485758,0.416627556,0.991275208,0.99988749,0.9432269482687827,0.4880053434194972,0.9912062839262472,0.9998874814097009
34,34.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, and Transition are all affected by testing",2.0,2.0,2.0,0.928292573,0.13181667,0.9869721140000001,0.99985934,0.9239258688820916,0.23804212820812057,0.9868691963630516,0.9998593292604081
35,35.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, Production, Maintenance",3.0,4.0,3.5,0.872100055,0.111966021,0.990930421,0.999858475,0.8643114445327501,0.2206202799151712,0.9908587731794097,0.9998584641943641
36,36.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining the solution,3.0,5.0,4.0,0.9037547109999999,0.21987076100000003,0.9814299259999999,0.99989183,0.8978937462800473,0.31532247380163536,0.9812832262104839,0.9998918217410661
37,37.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),#NAME?,3.0,1.0,2.0,0.434796959,0.11022146099999999,0.983686755,0.9996622820000001,0.4003782864880294,0.21908917331719813,0.9835578836983659,0.9996622562147482
38,38.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and Coding,5.0,5.0,5.0,0.91089195,0.14968434,0.97847868,0.99990312,0.9054656154464845,0.2537236223541549,0.9783086659702173,0.9999031126030737
39,39.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",2.0,3.0,2.5,0.9453654290000001,0.598138869,0.9885646920000001,0.9999231679999999,0.9420383955789591,0.6473080724406012,0.9884743554037835,0.999923162133767
40,40.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The refining step, the production step, and the maintenance stage.  ",3.0,4.0,3.5,0.941046178,0.480811864,0.990065103,0.999934839,0.9374561189494384,0.5443364627075333,0.989986619344051,0.9999348340248647
41,41.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, Transition",2.0,2.0,2.0,0.896438181,0.076099396,0.990930421,0.9998787090000001,0.8901316679872631,0.18914206983095153,0.9908587731794097,0.999878699739259
42,42.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining.,3.0,3.0,3.0,0.8058627840000001,0.1389952,0.973607083,0.999849109,0.7940405806939679,0.24434233837386307,0.973398584349504,0.9998490974792567
43,43.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",2.0,1.0,1.5,0.94648248,0.410995305,0.9941485290000001,0.999910147,0.9432234706512996,0.48306221926925846,0.9941023035749393,0.9999101401395952
44,44.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.",5.0,5.0,5.0,0.945467889,0.359303325,0.988013615,0.999909603,0.9421470949954691,0.4376949452057166,0.9879189250081045,0.99990959609806
45,45.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Testing, refining, production, and maintenance.",3.0,4.0,3.5,0.891203463,0.221128315,0.989661804,0.9998457829999999,0.8845781759689638,0.3164261613943277,0.9895801343643714,0.9998457712253117
46,46.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",2.0,1.0,1.5,0.928349078,0.052878115,0.982976638,0.9999249459999999,0.9239858148173825,0.1687619988947344,0.9828421569191894,0.99992494026952
47,47.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, construction, and transition.",2.0,3.0,2.5,0.890337646,0.131165326,0.989272844,0.9998716809999999,0.8836596340725699,0.23747047856812528,0.9891881016598615,0.999871671202661
48,48.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",2.0,1.0,1.5,0.940251768,0.35228458100000004,0.992405601,0.99991775,0.9366133324623235,0.43153497062881246,0.9923456067999338,0.9999177437200951
49,49.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, production, and maintenance",3.0,3.0,3.0,0.8887861970000001,0.152301341,0.989690411,0.9999088340000001,0.8820137078472606,0.256020423552166,0.9896089673538252,0.9999088270393458
50,50.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding and refining,5.0,5.0,5.0,0.91089195,0.204779774,0.97847868,0.99990312,0.9054656154464845,0.30207792516723697,0.9783086659702173,0.9999031126030737
51,51.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"refining, production, maintenance.",3.0,4.0,3.5,0.865983725,0.17102214699999999,0.990760194,0.999909608,0.857822653763833,0.27245066933676154,0.9906872014208984,0.9999096010984417
52,52.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Removing logical errors, testing for valid data, random data and actual data.",2.0,0.0,1.0,0.9175434109999999,0.090115279,0.990398515,0.999901646,0.91252212461728,0.20144305743683424,0.990322665230713,0.9999016384905316
53,53.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,1.0,4.0,2.5,0.8556109670000001,0.155426294,0.98774081,0.999845347,0.8468182350423757,0.25876302693448344,0.9876439649043566,0.9998453351920226
54,54.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining stage, Production stage, and Maintenance stage.  ",3.0,4.0,3.5,0.9160384540000001,0.59597671,0.993416028,0.999923626,0.9109255215744069,0.645410461632852,0.9933640159667371,0.999923620168736
55,55.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.,2.0,2.0,2.0,0.9190273290000001,0.232819632,0.9854606770000001,0.999900565,0.9140964074666735,0.3266870022927175,0.9853458193196373,0.9999005574079958
56,56.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding,3.0,3.0,3.0,0.8670690659999999,0.20922237600000002,0.957544689,0.999684292,0.8589740878201915,0.3059769582955722,0.9572093007195047,0.9996842678952431
57,57.0,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",1.0,2.0,1.5,0.943911552,0.335814118,0.988918715,0.999924629,0.9404959831099227,0.4170797300117104,0.9888311751131332,0.9999246232453166
58,58.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",4.0,5.0,4.5,0.8829294440000001,0.22978194100000002,0.974974803,0.9999131640000001,0.8758003013106239,0.3240209840802723,0.9747771090579891,0.9999131573699475
59,59.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",5.0,5.0,5.0,0.884614945,0.178167313,0.969233838,0.999923511,0.8775884427826832,0.27872159771194666,0.9689907916077448,0.9999235051599557
60,60.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.,3.0,4.0,3.5,0.899364948,0.316773772,0.9897687629999999,0.9999645620000001,0.8932366637432755,0.40036904113411925,0.9896879383186127,0.9999645592942582
61,61.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,2.0,3.0,2.5,0.889553487,0.387108326,0.98082336,0.9999659009999999,0.8828277228315866,0.46209790095831216,0.9806718684630453,0.9999658983964926
62,62.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,3.0,4.0,3.5,0.894775152,0.333148122,0.989621045,0.9999615140000001,0.8883673669728245,0.4147399285341058,0.9895390533766012,0.9999615110615391
63,63.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,1.0,1.0,1.0,0.8809827570000001,0.23883815100000003,0.9856900140000001,0.999931146,0.8737350686244263,0.33196913311706655,0.9855769680350688,0.9999311407428989
64,64.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",4.0,4.0,4.0,0.910678804,0.36210563799999995,0.9717478159999999,0.999981365,0.9052394896819769,0.4401543847915639,0.9715246295201742,0.9999813635771911
65,65.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,2.0,3.0,2.5,0.839357317,0.20059920899999997,0.987916835,0.999953531,0.8295748008128281,0.29840886783773535,0.9878213804658831,0.9999535274520256
66,66.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,#NAME?,3.0,3.0,3.0,0.653722704,0.192947924,0.994110906,0.9999360190000001,0.6326357600439523,0.291693746003879,0.9940643833609281,0.9999360141149595
67,67.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Re-usability  and ease of maintenance,3.0,5.0,4.0,0.865662038,0.334813386,0.9982743340000001,0.9999858429999999,0.8574813772735062,0.4162014412924902,0.9982607015912667,0.9999858419190929
68,68.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",5.0,5.0,5.0,0.879203677,0.257909179,0.979006231,0.999953784,0.8718476495543034,0.34870674993788636,0.9788403845153039,0.9999537804713424
69,69.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, and program maintenance and verification are easier.",3.0,4.0,3.5,0.905522466,0.41844022299999994,0.9815601429999999,0.9999747920000001,0.8997691507016051,0.48959622387280805,0.9814144718981721,0.9999747900753334
70,70.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Using different modules allows for easier debugging,2.0,2.0,2.0,0.851505995,0.118523404,0.9905951159999999,0.999939474,0.8424632861726674,0.22637534272570023,0.9905208193384345,0.9999394693787537
71,71.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Data encapsulation concept,the use of functions or methods to manipulate data.",3.0,4.0,3.5,0.891001523,0.401530922,0.98508776,0.999953587,0.8843639386063828,0.4747558387165436,0.9849699563515486,0.9999535834563013
72,72.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",5.0,4.0,4.5,0.90312171,0.311963469,0.973176453,0.999982367,0.8972221979748519,0.3961472965901943,0.97296455246051,0.9999823656536954
73,73.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",5.0,5.0,5.0,0.8913236259999999,0.30725204899999997,0.963692749,0.99995646,0.8847056564294957,0.39201233634358634,0.9634059291370528,0.999956456675659
74,74.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",4.0,5.0,4.5,0.895661354,0.321000427,0.983601457,0.999975156,0.8893075352366356,0.40407854918076475,0.9834719118615979,0.9999751541031251
75,75.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,3.0,4.0,3.5,0.8997871279999999,0.32962113600000004,0.98652035,0.999973485,0.8936845528674432,0.4116444823840401,0.9864138635197766,0.9999734829755421
76,76.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,5.0,3.0,4.0,0.895131648,0.421211988,0.9729374409999999,0.999968429,0.888745572196211,0.49202885312002853,0.9727236523145557,0.9999684265895091
77,77.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",5.0,4.0,4.5,0.8847541809999999,0.209139943,0.98632174,0.999962473,0.877736157714922,0.3059046112795964,0.9862136845413656,0.9999624701347599
78,78.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, Program maintenance and verification are easier ",3.0,4.0,3.5,0.875244558,0.277752668,0.9843944659999999,0.9999757140000001,0.8676474355664635,0.36612231428345554,0.984271185470634,0.9999757121457294
79,79.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be feused, Program maintenance and verification are easier",3.0,4.0,3.5,0.877986431,0.24691979600000002,0.9843944659999999,0.9999757140000001,0.8705562779951654,0.3390619588049054,0.984271185470634,0.9999757121457294
80,80.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.",5.0,5.0,5.0,0.922489166,0.509514868,0.988539058,0.999983982,0.917769056909901,0.569527547454431,0.9884485189004221,0.9999839807770029
81,81.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Existing classes can be reused Program maintenance and verifications are easy,3.0,5.0,4.0,0.8606256840000001,0.243221238,0.9920303090000001,0.999964196,0.852138328853261,0.33581593312692004,0.9919673500698306,0.9999641932663136
82,82.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,1- Existing classes can be reused 2- Program maintenance and verification are easier,3.0,4.0,3.5,0.851923823,0.20048613899999998,0.990211513,0.9999654,0.8429065582769187,0.2983096323726136,0.9901341859531299,0.9999653973582406
83,83.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Information can be hidden. It is easier to debug. Programming is easier and more manageable.,3.0,4.0,3.5,0.90411973,0.37457755200000004,0.990356511,0.999960537,0.8982809935210692,0.45110031374485465,0.9902803294076973,0.9999605339869436
84,84.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, program maintenance and verification are   easier.",3.0,4.0,3.5,0.89912951,0.396600246,0.983213942,0.999977177,0.8929868884824487,0.4704284492566984,0.9830813355722926,0.9999771752574315
85,85.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,existing classes can be reused program maintenance and verification are easier,3.0,4.0,3.5,0.86402595,0.214885563,0.9919080640000001,0.9999558740000001,0.855745657861451,0.3109472333111952,0.9918441393593133,0.999955870630917
86,86.0,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",3.0,4.0,3.5,0.886644661,0.293572515,0.9722276740000001,0.999942248,0.8797417606128727,0.3800065441870557,0.9720082783003079,0.9999422435905524
87,87.0,1.4,Where do C++ programs begin to execute?,At the main function.,At function ‘int main ()’,5.0,5.0,5.0,0.939868867,0.525377095,0.987880403,0.9998501209999999,0.9362071142768742,0.5834489720074683,0.9877846606605285,0.9998501095565242
88,88.0,1.4,Where do C++ programs begin to execute?,At the main function.,the Function main().,5.0,5.0,5.0,0.961753428,0.746781647,0.990770313,0.9999059159999999,0.9594243601414045,0.7777638539195116,0.9906974003589303,0.9999059088165522
89,89.0,1.4,Where do C++ programs begin to execute?,At the main function.,c++ programs begin to execute in the main method.,5.0,5.0,5.0,0.945445955,0.444032133,0.9911559809999999,0.999877902,0.9421238252999613,0.5120568685372124,0.991086115057313,0.9998778926776434
90,90.0,1.4,Where do C++ programs begin to execute?,At the main function.,A C++ program will begin to execute at the main() function.,5.0,5.0,5.0,0.964425027,0.610269249,0.988429769,0.9998908959999999,0.962258649156132,0.6579542553485669,0.988338366539657,0.9998908876697538
91,91.0,1.4,Where do C++ programs begin to execute?,At the main function.,They begin in the main() function.,5.0,5.0,5.0,0.9618263840000001,0.708941877,0.989254305,0.9999124620000001,0.9595017588787744,0.7445539204619155,0.9891694162055502,0.9999124553163488
92,92.0,1.4,Where do C++ programs begin to execute?,At the main function.,Int main(),5.0,5.0,5.0,0.883653283,0.354132265,0.9857484670000001,0.9998525420000001,0.8765682192976164,0.43315658362198506,0.9856358828018229,0.9998525307413711
93,93.0,1.4,Where do C++ programs begin to execute?,At the main function.,main method,5.0,5.0,5.0,0.8814944029999999,0.364448965,0.985027065,0.99991737,0.8742778718809139,0.4422109970209561,0.9849087818734527,0.9999173636910815
94,94.0,1.4,Where do C++ programs begin to execute?,At the main function.,in the testing phase,0.0,0.0,0.0,0.9003410940000001,0.01915854,0.990615035,0.999919427,0.8942722532477522,0.13916813926058702,0.9905408956944639,0.9999194208481365
95,95.0,1.4,Where do C++ programs begin to execute?,At the main function.,#NAME?,5.0,5.0,5.0,0.9399713279999999,0.481374949,0.9949176590000001,0.999819074,0.9363158147542804,0.5448306521643131,0.9948775095447556,0.9998190601860415
96,96.0,1.4,Where do C++ programs begin to execute?,At the main function.,main,5.0,5.0,5.0,0.838604331,0.49406176799999996,0.969755032,0.9998078420000001,0.8287759608866102,0.5559651916918674,0.9695161029338307,0.9998078273284623
97,97.0,1.4,Where do C++ programs begin to execute?,At the main function.,They begin to execute at the funcion main().,5.0,5.0,5.0,0.958923698,0.574924111,0.990775911,0.99988426,0.9564223105622407,0.6269337263910824,0.9907030425819863,0.9998842511630857
98,98.0,1.4,Where do C++ programs begin to execute?,At the main function.,The main method.,5.0,5.0,5.0,0.9710738059999999,0.651628792,0.9939883009999999,0.999957251,0.9693123130035322,0.6942533044935957,0.9939408098064842,0.9999572477360529
99,99.0,1.4,Where do C++ programs begin to execute?,At the main function.,At the root,0.0,5.0,2.5,0.913529635,0.25665614,0.995182948,0.999954572,0.9082639252301802,0.3476070249181578,0.9951448942736395,0.9999545685315073
100,100.0,1.4,Where do C++ programs begin to execute?,At the main function.,In the main() function.,5.0,5.0,5.0,0.959240973,0.79011488,0.994652649,0.999958127,0.9567589063788837,0.8157951047551405,0.9946104060199145,0.9999581238029368
101,101.0,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at main.,5.0,5.0,5.0,0.937730372,0.496552974,0.989346262,0.999764428,0.9339383932275888,0.5581515893758165,0.9892620996470574,0.9997644100137413
102,102.0,1.4,Where do C++ programs begin to execute?,At the main function.,In the Main function..?,5.0,5.0,5.0,0.9559345840000001,0.596611798,0.9940085259999999,0.9998864040000001,0.9532511711158014,0.6459678442548847,0.9939611945798509,0.9998863953267833
103,103.0,1.4,Where do C++ programs begin to execute?,At the main function.,"At the ""main()"" function",5.0,5.0,5.0,0.921155572,0.523801744,0.99181077,0.999919758,0.9163542522089311,0.5820663710592502,0.9917460767565967,0.9999197518734088
104,104.0,1.4,Where do C++ programs begin to execute?,At the main function.,The main function.,5.0,5.0,5.0,0.989047468,0.925686598,0.9939883009999999,0.999959472,0.9883805012911551,0.9347791190214002,0.9939408098064842,0.9999594689056294
105,105.0,1.4,Where do C++ programs begin to execute?,At the main function.,The function main,5.0,5.0,5.0,0.964405,0.745000005,0.9907071009999999,0.999902002,0.962237402589526,0.7762002024421041,0.9906336889970486,0.9999019945177128
106,106.0,1.4,Where do C++ programs begin to execute?,At the main function.,"After loading the required include statements and libraries, the main method begins the execution.",5.0,5.0,5.0,0.955414236,0.41883724899999997,0.986214574,0.999899639,0.9526991359412726,0.48994467226562166,0.9861056719518666,0.9998996313372943
107,107.0,1.4,Where do C++ programs begin to execute?,At the main function.,main function,5.0,5.0,5.0,0.911407292,0.693437874,0.985027065,0.999898087,0.9060123397750338,0.7309468898706522,0.9849087818734527,0.9998980792187969
108,108.0,1.4,Where do C++ programs begin to execute?,At the main function.,main,5.0,5.0,5.0,0.838604331,0.49406176799999996,0.969755032,0.9998078420000001,0.8287759608866102,0.5559651916918674,0.9695161029338307,0.9998078273284623
109,109.0,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at the main function.,5.0,5.0,5.0,0.963004649,0.66868192,0.991698415,0.999793426,0.9607517756462376,0.7092199188816818,0.9916328341750582,0.99979341022778
110,110.0,1.4,Where do C++ programs begin to execute?,At the main function.,At main,5.0,5.0,5.0,0.92415452,0.64429909,0.983362975,0.999915146,0.9195358245078198,0.6878204187840892,0.9832315459025354,0.999915139521276
111,111.0,1.4,Where do C++ programs begin to execute?,At the main function.,they beging to excute at main,5.0,5.0,5.0,0.935650945,0.35717654200000004,0.987882367,0.99986766,0.9317323371903513,0.4358283820128445,0.9877866401757271,0.999867649895652
112,112.0,1.4,Where do C++ programs begin to execute?,At the main function.,at the main function  int main() {},5.0,5.0,5.0,0.933519304,0.580518186,0.98971176,0.9999401609999999,0.9294708875230762,0.6318433455168542,0.9896304850065623,0.9999401564312068
113,113.0,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at the main function.,5.0,5.0,5.0,0.963004649,0.66868192,0.991698415,0.999793426,0.9607517756462376,0.7092199188816818,0.9916328341750582,0.99979341022778
114,114.0,1.4,Where do C++ programs begin to execute?,At the main function.,"in the ""main"" function",5.0,5.0,5.0,0.919759393,0.455883324,0.994440421,0.9998972079999999,0.9148730513242574,0.5224580222573133,0.9943965014620865,0.9998972001516839
115,115.0,1.4,Where do C++ programs begin to execute?,At the main function.,Within the main function,5.0,5.0,5.0,0.9669790859999999,0.653330386,0.9990706220000001,0.9999563309999999,0.9649682404408517,0.6957467021414102,0.9990632801037328,0.9999563276658096
116,116.0,1.5,What is a variable?,A location in memory that can store a value.,Variable can be a integer or a string in a program.,1.0,3.0,2.0,0.9744989279999999,0.229905665,0.9930900979999999,0.999949918,0.9729460116456943,0.324129569988884,0.9930355111863459,0.9999499141761677
117,117.0,1.5,What is a variable?,A location in memory that can store a value.,"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ",4.0,5.0,4.5,0.979282677,0.247859776,0.991171494,0.999936994,0.9780210724014118,0.33988692875719295,0.9911017506068428,0.999936989189402
118,118.0,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in memory where a value can be stored.,5.0,5.0,5.0,0.987533808,0.783521175,0.997424999,0.999983066,0.9867746652693448,0.8100081640763516,0.9974046570183416,0.999983064707065
119,119.0,1.5,What is a variable?,A location in memory that can store a value.," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",5.0,5.0,5.0,0.9878371359999999,0.71622318,0.9938030040000001,0.999980822,0.9870964647677947,0.7509443289690124,0.9937540489980526,0.9999808205357325
120,120.0,1.5,What is a variable?,A location in memory that can store a value.,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",5.0,5.0,5.0,0.985480309,0.6714153890000001,0.995184353,0.99996903,0.9845961161467207,0.7116189377868813,0.9951463103728525,0.9999690276353964
121,121.0,1.5,What is a variable?,A location in memory that can store a value.,A named object that can hold a numerical or letter value,2.0,5.0,3.5,0.974974155,0.402501166,0.998070386,0.999965873,0.9734501781263682,0.4756073697559139,0.9980551424437466,0.9999658703943549
122,122.0,1.5,What is a variable?,A location in memory that can store a value.,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",3.0,5.0,4.0,0.973994672,0.292293817,0.9933190190000001,0.9999418090000001,0.9724110484115374,0.37888429964137377,0.9932662406154625,0.9999418045570342
123,123.0,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in the computers memory where a value can be stored for use by a program,5.0,5.0,5.0,0.983417332,0.626581967,0.9974957720000001,0.999972249,0.9824075118506659,0.6722710516528925,0.9974759891105779,0.9999722468811717
124,124.0,1.5,What is a variable?,A location in memory that can store a value.,#NAME?,3.0,5.0,4.0,0.963871598,0.612101793,0.9985931109999999,0.999936102,0.9616715184770399,0.6595625807770279,0.9985819968644195,0.9999360971212966
125,125.0,1.5,What is a variable?,A location in memory that can store a value.,a block of memory that holds a specific type of data,5.0,5.0,5.0,0.966636658,0.302713692,0.994991995,0.999972506,0.9646049599040889,0.3880292641955047,0.9949524327839637,0.999972503900794
126,126.0,1.5,What is a variable?,A location in memory that can store a value.,It is a location in the computer's memory where it can be stored for use by a program.,5.0,5.0,5.0,0.981884182,0.546101272,0.9963447209999999,0.999965588,0.9807809989634664,0.6016374689019643,0.9963158450429132,0.9999655853725947
127,127.0,1.5,What is a variable?,A location in memory that can store a value.,A location in memory where value can be stored.,5.0,5.0,5.0,0.9855355020000001,0.846884608,0.9982899709999999,0.99997949,0.9846546701863013,0.8656188454725348,0.9982764621203709,0.9999794884340322
128,128.0,1.5,What is a variable?,A location in memory that can store a value.,a value/word that can assume any of a set of values,3.0,3.0,3.0,0.957045376,0.239197314,0.995295165,0.999933085,0.9544296060393234,0.3322843511886994,0.9952579977650063,0.9999330798909442
129,129.0,1.5,What is a variable?,A location in memory that can store a value.,A pointer to a location in memory.,3.0,5.0,4.0,0.9748252629999999,0.636582136,0.9957091999999998,0.999950365,0.9732922191811895,0.681047662796531,0.9956753035568916,0.999950361210297
130,130.0,1.5,What is a variable?,A location in memory that can store a value.,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",5.0,5.0,5.0,0.978727162,0.410932124,0.989080405,0.999965311,0.9774317286930121,0.4830067686995065,0.9889941424310894,0.9999653083514454
131,131.0,1.5,What is a variable?,A location in memory that can store a value.,A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.,5.0,5.0,5.0,0.984559953,0.453596503,0.9960501270000001,0.9999460520000001,0.9836197140368086,0.5204510023087399,0.996018923810518,0.9999460478809933
132,132.0,1.5,What is a variable?,A location in memory that can store a value.,a symbol that stands in for a value that may or may not change depending on the program.,3.0,5.0,4.0,0.977868915,0.303268611,0.9959378529999999,0.999943565,0.9765212177802505,0.3885162867927445,0.9959057628688629,0.9999435606911072
133,133.0,1.5,What is a variable?,A location in memory that can store a value.,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",4.0,5.0,4.5,0.944357514,0.230519936,0.980069422,0.999943053,0.940969102465629,0.32466868264826143,0.9799119745069242,0.9999430486520152
134,134.0,1.5,What is a variable?,A location in memory that can store a value.,a stored value used by the program,4.0,5.0,4.5,0.959326685,0.38737255299999995,0.9943116240000001,0.99994555,0.956849837907167,0.4623297988025036,0.9942666869921083,0.9999455458426648
135,135.0,1.5,What is a variable?,A location in memory that can store a value.,"A way to store different values into the program, such as numbers, words, letters, etc.",4.0,5.0,4.5,0.9602456690000001,0.319238275,0.993074274,0.9999524009999999,0.9578247844676016,0.4025320030293963,0.9930195621799801,0.9999523973657484
136,136.0,1.5,What is a variable?,A location in memory that can store a value.,An object with a location in memory where value can be stored,2.0,5.0,3.5,0.977824688,0.707728267,0.996873232,0.999973445,0.9764742975275278,0.7434888001574456,0.9968485311718037,0.9999734429724879
137,137.0,1.5,What is a variable?,A location in memory that can store a value.,location in memory where a value can be stored,5.0,5.0,5.0,0.976524472,0.739905715,0.996302868,0.999975607,0.9750949034172691,0.7717292177634526,0.9962736614127664,0.9999756051375598
138,138.0,1.5,What is a variable?,A location in memory that can store a value.,a variable is an object where data is stored.,2.0,5.0,3.5,0.967393756,0.339746237,0.994708367,0.999970283,0.9654081622351542,0.42053073963299903,0.9946665641807276,0.9999702807310648
139,139.0,1.5,What is a variable?,A location in memory that can store a value.,Location in memory where a value can be stored.,5.0,5.0,5.0,0.9855355020000001,0.791657627,0.996700567,0.999983587,0.9846546701863013,0.8171490909239758,0.9966745021535904,0.9999835857468441
140,140.0,1.5,What is a variable?,A location in memory that can store a value.,it is a location in memory where value can be stored,5.0,5.0,5.0,0.978691876,0.695088685,0.996134099,0.999975223,0.9773942939125029,0.7323957180073206,0.9961035591721571,0.9999752211082408
141,141.0,1.5,What is a variable?,A location in memory that can store a value.,A variable is the location in a computer's memory where a value can be stored for use by a program.,5.0,5.0,5.0,0.985817432,0.692892373,0.9974892470000001,0.999980557,0.984953768629564,0.7304681329460975,0.9974694125644116,0.9999805555154994
142,142.0,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in a computers memory where a value can be stored   for use by a program.,5.0,5.0,5.0,0.986398518,0.6981696490000001,0.997462836,0.9999756329999999,0.9855702405126616,0.7350997146073331,0.9974427929229089,0.9999756311395448
143,143.0,1.5,What is a variable?,A location in memory that can store a value.,a location in memory where data can be stored and retrieved,5.0,5.0,5.0,0.9656305909999999,0.536661565,0.9970292279999999,0.999963637,0.9635376273267897,0.5933527451489076,0.9970057595083234,0.9999636342236332
144,144.0,1.5,What is a variable?,A location in memory that can store a value.,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",5.0,5.0,5.0,0.982739985,0.424265474,0.988983313,0.999967345,0.9816889170461094,0.4947087337555002,0.9888962834241316,0.9999673425067442
145,145.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",1.0,3.0,2.0,0.966515839,0.33445259899999996,0.992837069,0.999954115,0.964476783495702,0.4158847979232951,0.9927804833089565,0.9999541114966147
146,146.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),In the Function main() before using the variable.,1.0,5.0,3.0,0.975184202,0.547637641,0.988512773,0.999843099,0.9736730161737985,0.6029858574428121,0.9884220262542938,0.9998430870203846
147,147.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",5.0,5.0,5.0,0.9871934059999999,0.7017326359999999,0.992814578,0.999980078,0.9864135341081222,0.7382267569012021,0.9927578146346528,0.999980076478927
148,148.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared where ever it is defined either inside a block locally or outside a block globally.,4.0,5.0,4.5,0.9707600470000001,0.484219134,0.993324652,0.9999763559999999,0.9689794472976492,0.5473268405552862,0.9932719181150113,0.9999763541947467
149,149.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared before they are actually used. They can be declared before main() to use globally,3.0,5.0,4.0,0.98073101,0.59270829,0.993631752,0.99997206,0.9795576032623556,0.6425419449713745,0.9935814441422507,0.9999720578667411
150,150.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"For good programing practice they should be declared before main(), but should at least be declared before they are used.",2.0,3.0,2.5,0.9653180240000001,0.43704769,0.991429882,0.999973261,0.9632060262090822,0.505926998105432,0.9913621798192371,0.9999732589584392
151,151.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",5.0,5.0,5.0,0.974963605,0.552821219,0.987542575,0.999972066,0.9734389856722967,0.6075352054027034,0.9874441638883689,0.9999720638671993
152,152.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variables are declared inside the method while global variables are declared in the body.,5.0,5.0,5.0,0.98351121,0.689204037,0.994299787,0.999978041,0.9825071066566695,0.7272310785684082,0.9942547564822274,0.9999780393233991
153,153.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),#NAME?,1.0,3.0,2.0,0.9488047359999999,0.334915668,0.982315102,0.9999030459999999,0.9456871430325908,0.4162912087095202,0.9821753949199846,0.9999030385974236
154,154.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Globally for an entire program, and locally for individual functions (including FOR statements)",4.0,5.0,4.5,0.95870024,0.46263927200000005,0.988311996,0.999979525,0.9561852448369379,0.5283873549018558,0.9882196631570257,0.9999795234367045
155,155.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,2.0,4.0,3.0,0.971751213,0.390297234,0.9931116040000001,0.999961413,0.9700309714618562,0.464896634208604,0.9930571870793511,0.9999614100538275
156,156.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Inside the method.,2.0,3.0,2.5,0.930161417,0.271491408,0.985912022,0.9998486520000001,0.9259085182315783,0.36062714272293317,0.9858007298528979,0.9998486404443641
157,157.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),at the top,1.0,2.0,1.5,0.864271998,-0.09488567699999999,0.9662930270000001,0.999811793,0.8560066892301166,0.039077656210778536,0.9660267488018455,0.9998117786301267
158,158.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.,5.0,5.0,5.0,0.986054599,0.740474403,0.9930876190000001,0.9999845079999999,0.9852053781797832,0.7722283246723513,0.9930330126027528,0.9999845068171637
159,159.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are usually declared at the beginning of a module of C++ code.,2.0,3.0,2.5,0.966108382,0.46888414,0.9932358809999999,0.999987042,0.9640445139451168,0.5338681400845213,0.993182445842253,0.9999870410106383
160,160.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.",3.0,4.0,3.5,0.97591418,0.476302803,0.9887297079999999,0.99996018,0.974447447002075,0.5403791020849333,0.9886406749964597,0.9999601769596861
161,161.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),in the very beginning of the program. Before the main() starts.,1.0,3.0,2.0,0.954503298,0.336553216,0.9919179370000001,0.999977452,0.9517327253510239,0.4177283966235487,0.9918540903539955,0.9999774502784281
162,162.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",2.0,3.0,2.5,0.967657685,0.383878321,0.981405596,0.999968365,0.9656881634873513,0.45926309907876317,0.9812587040084563,0.9999683625846226
163,163.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),After declaration of the variable's data type.,1.0,1.0,1.0,0.958775759,0.388840497,0.990771078,0.999927418,0.9562653626510647,0.4636181343964958,0.990698171402274,0.9999274124582606
164,164.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",3.0,3.0,3.0,0.9617080090000001,0.25870043,0.988255285,0.999936259,0.9593761753005061,0.3494011884362772,0.9881625041517156,0.9999362541332838
165,165.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Before they are used.,2.0,2.0,2.0,0.9401327970000001,0.254357874,0.9865246870000001,0.999909575,0.9364871165899673,0.3455899603078852,0.9864182347811903,0.9999095680959221
166,166.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Anywhere in the same scope before they are used,3.0,4.0,3.5,0.957282245,0.18307869100000002,0.9914492890000001,0.99992334,0.9546808994424987,0.2830320503538391,0.9913817401305711,0.9999233341468996
167,167.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variables can be declared in classes and methods.,1.0,4.0,2.5,0.973157585,0.61995101,0.9930957290000001,0.9999880409999999,0.9715229860606864,0.6664514168948011,0.9930411866700953,0.9999880400869133
168,168.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside the function scope and outside of the function scope in case of global variables,5.0,5.0,5.0,0.973567188,0.433307678,0.992228035,0.999809596,0.9719575322943463,0.5026445904784668,0.9921666380648221,0.9998095814623825
169,169.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variables are declared in the main function local variables are declared in any other function,3.0,5.0,4.0,0.974462211,0.678343833,0.994440743,0.9999823520000001,0.9729070587228366,0.7176996609045081,0.9943968260058208,0.9999823506525501
170,170.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",4.0,4.0,4.0,0.973994255,0.462378085,0.9940410590000001,0.999964948,0.9724106060178552,0.528158125102362,0.9939939845839024,0.9999649453237299
171,171.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are declared in the main function, before any operation is   attempted with the variables.",1.0,3.0,2.0,0.978462398,0.66215694,0.992920708,0.999984227,0.9771508415925547,0.703493294443633,0.9928647830399636,0.9999842257957091
172,172.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere, but where you declare them depends on where you want them to be accessible (their scope)",4.0,5.0,4.5,0.956277609,0.34928929799999997,0.991719248,0.99995743,0.953615085007548,0.42890617163990025,0.9916538317515007,0.9999574267497199
173,173.0,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),It depends if it’s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn’t need to be declared outside the variable seeing how it is used for the function or block its being called for.,4.0,5.0,4.5,0.9769930240000001,0.553313971,0.990958992,0.999967205,0.9755919884163384,0.6079676673635214,0.9908875698844709,0.999967202496055
174,174.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"""The “do” statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The “do while” statement executes the lines of code and then it evaluates the condition. """,4.0,5.0,4.5,0.96270293,0.333824962,0.98980708,0.999879465,0.9604316831296456,0.4153339546437106,0.989726558015082,0.9998794557969807
175,175.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,5.0,5.0,5.0,0.989336491,0.7267025109999999,0.992542875,0.9999669390000001,0.9886871246706008,0.7601414748604944,0.9924839652364797,0.9999669364757456
176,176.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",5.0,5.0,5.0,0.986226618,0.530881524,0.9945580409999999,0.999938867,0.9853878724695415,0.5882799136546312,0.9945150506360491,0.9999388623324083
177,177.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,5.0,5.0,5.0,0.9847057459999999,0.59742105,0.991985804,0.9999459559999999,0.9837743852649099,0.6466780812640005,0.9919224934894258,0.9999459518736634
178,178.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",5.0,5.0,5.0,0.9871488209999999,0.6338530179999999,0.9902119079999999,0.999928485,0.986366234054588,0.6786524625303049,0.990134584073549,0.9999284795397277
179,179.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,5.0,5.0,5.0,0.9845570920000001,0.6252446770000001,0.989257072,0.9999194229999999,0.9836166788130078,0.6710973840562473,0.9891722050642847,0.9999194168478309
180,180.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",5.0,5.0,5.0,0.986627102,0.579083324,0.981305034,0.9999582370000001,0.9858127443914784,0.6305840442171677,0.9811573475892077,0.9999582338113354
181,181.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,5.0,5.0,5.0,0.979121327,0.592331827,0.994858597,0.9999794609999999,0.9778498968123632,0.6422115436190605,0.9948179809670258,0.999979459431818
182,182.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,#NAME?,5.0,5.0,5.0,0.97673142,0.5020393129999999,0.980026363,0.99995152,0.9753144537476217,0.5629666544017353,0.979868575349624,0.9999515162984828
183,183.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",5.0,5.0,5.0,0.985346079,0.600611627,0.976236342,0.999916899,0.9844537120604611,0.6494782793059373,0.9760486139582739,0.9999168926551201
184,184.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,5.0,5.0,5.0,0.987188339,0.779288888,0.994929394,0.999972138,0.9864081585474795,0.806293713125845,0.9948893372488573,0.9999721358726966
185,185.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The loop of a do...while statement always executes once.,4.0,5.0,4.5,0.986099064,0.7561993,0.9955047859999999,0.999982797,0.9852525509257828,0.786029222061462,0.9954692747280668,0.9999827956865265
186,186.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",5.0,5.0,5.0,0.9825992579999999,0.63930881,0.9876798370000001,0.999828938,0.9815396203177544,0.6834407180952432,0.9875825102301173,0.9998289249391719
187,187.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"Do ...while runs the embedded code at least once, the do command does not necessarily",4.0,4.0,4.0,0.982707381,0.521242023,0.9934100920000001,0.999969515,0.9816543275889953,0.5798198414402802,0.9933580330735504,0.9999695126724267
188,188.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"While tests for true first before running, do...while runs once first before checking.",5.0,5.0,5.0,0.968651533,0.546021044,0.990141004,0.999928149,0.9667425329749535,0.6015670570960406,0.9900631199464395,0.9999281435140736
189,189.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.,5.0,5.0,5.0,0.990984857,0.775421441,0.9956633770000001,0.999970647,0.990435869765224,0.8028994626449151,0.9956291185645564,0.9999706447588567
190,190.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.,5.0,5.0,5.0,0.982585073,0.660582244,0.992865406,0.9999369379999999,0.9815245715062848,0.7021112683537296,0.9928090441654654,0.9999369331851263
191,191.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",5.0,5.0,5.0,0.982534826,0.507479668,0.9921611340000001,0.999968805,0.9814712646589161,0.5677413617410163,0.9920992085605944,0.9999688026182173
192,192.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,5.0,5.0,5.0,0.984578133,0.608004391,0.9938024440000001,0.9999530440000001,0.9836390011282801,0.655966511145288,0.9937534845741672,0.9999530404148426
193,193.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",3.0,4.0,3.5,0.968693018,0.235658795,0.990688135,0.9999174479999999,0.9667865442505139,0.32917878314406174,0.9906145731695246,0.9999174416970369
194,194.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,the loop body always executes at least once,3.0,4.0,3.5,0.95837301,0.411650896,0.99360598,0.9999552740000001,0.955838087799415,0.483637596273014,0.9935554685487177,0.9999552705851061
195,195.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",5.0,5.0,5.0,0.9763887529999999,0.460294783,0.987355304,0.9998479990000001,0.9749509196566859,0.5263297228474838,0.9872554134857408,0.9998479873945066
196,196.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.",5.0,5.0,5.0,0.989567757,0.671042085,0.99359309,0.9999501340000001,0.9889324738728127,0.7112913089191726,0.9935424767203519,0.9999501301926598
197,197.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",5.0,5.0,5.0,0.9763268829999999,0.38580343100000003,0.9846174329999999,0.9999622770000001,0.9748852820137084,0.46095266471297697,0.9844959138643672,0.9999622741197952
198,198.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",5.0,5.0,5.0,0.985557318,0.612899482,0.984508685,0.9999152370000001,0.9846778146960669,0.6602626695621833,0.9843863067773917,0.999915230528224
199,199.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,NO ANSWER,0.0,0.0,0.0,0.8222383259999999,0.011174782,0.9911107490000001,0.9997224459999999,0.8114133296734396,0.13216122373436814,0.991040525733757,0.9997224248083555
200,200.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.",5.0,5.0,5.0,0.984582305,0.6358311179999999,0.992876183,0.99997636,0.9836434271868948,0.6803885346410093,0.9928199063015629,0.9999763581950524
201,201.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",5.0,5.0,5.0,0.976764023,0.528060675,0.982921303,0.999949836,0.9753490421438396,0.5858042060172981,0.9827863847839979,0.9999498321699071
202,202.0,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",5.0,5.0,5.0,0.983379185,0.580818236,0.9773477490000001,0.999966902,0.9823670418463557,0.6321066832838108,0.9771688008464406,0.9999668994729206
203,203.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",1.0,3.0,2.0,0.899985313,0.24375900600000003,0.9782885920000001,0.9999364709999999,0.8938948065650917,0.33628790321277485,0.9781170763138647,0.9999364661494702
204,204.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,4.0,4.0,4.0,0.908661485,0.37144798,0.9838879540000001,0.9999279609999999,0.9030993237809936,0.44835365651435993,0.9837606721293478,0.9999279554997195
205,205.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Information telling the compiler what data members and member functions belong to the class.,5.0,5.0,5.0,0.947719812,0.658615112,0.987318212,0.9999606320000001,0.9445361513699146,0.7003848222674477,0.9872180284665211,0.999960628994197
206,206.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",5.0,5.0,5.0,0.937705874,0.559311807,0.980386262,0.999968015,0.933912403394428,0.6132316458298169,0.980231317478173,0.9999680125578997
207,207.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,An object and data.,1.0,3.0,2.0,0.929905057,0.473627746,0.9896989409999999,0.9998897379999999,0.9256365469021178,0.5380313482543663,0.9896175647390818,0.9998897295813387
208,208.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"It's specific class name, includes only information defined by that class... implementation details... etc.",2.0,4.0,3.0,0.924830258,0.304216206,0.981614023,0.9998877829999999,0.9202527123305184,0.38934794002147055,0.981468777539161,0.9998877744320717
209,209.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions.,5.0,5.0,5.0,0.975794435,0.864236236,0.990203243,0.999963142,0.9743204099961214,0.8808474372758401,0.9901258506218199,0.9999631391858391
210,210.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,A class definition usually contains the function and its data members,5.0,5.0,5.0,0.936376751,0.470067054,0.98760116,0.999929776,0.9325023419600129,0.5349063201587146,0.9875032116978961,0.9999297706382974
211,211.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data members and member functions,5.0,5.0,5.0,0.954373658,0.7783280020000001,0.99025767,0.999960629,0.9515951907779576,0.8054503951003831,0.9901807075839969,0.9999606259939681
212,212.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,member functions,3.0,4.0,3.5,0.8676527140000001,0.659164548,0.9872409990000001,0.9998686509999999,0.8595932777191502,0.7008670327301225,0.9871402054996008,0.9998686409713161
213,213.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Member functions and data members belonging to the class.,5.0,5.0,5.0,0.956453562,0.739597857,0.989905765,0.9999705940000001,0.9538017528626446,0.771459027334325,0.9898260226064143,0.9999705917548102
214,214.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,a public and private area that includes the functions and variables that are used in the class,5.0,4.0,4.5,0.929502547,0.282841563,0.9832859359999999,0.999926278,0.9252095256046409,0.37058856406041496,0.9831538983101794,0.99992627237122
215,215.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",3.0,4.0,3.5,0.9115438459999999,0.091756925,0.9733811720000001,0.999968263,0.9061572093838773,0.202883841945327,0.9731708886987726,0.9999682605768349
216,216.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,A class definition typically includes function definitions.,3.0,3.0,3.0,0.924356759,0.336271465,0.986793605,0.999959991,0.9197503790783409,0.41748111890590905,0.9866892771784327,0.9999599879452558
217,217.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",5.0,5.0,5.0,0.9343133570000001,0.482338905,0.984058077,0.999970382,0.9303132952702761,0.5456766645638613,0.9839321390662804,0.9999703797386236
218,218.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,the data and methods,5.0,4.0,4.5,0.9231296179999999,0.348201186,0.983117683,0.9999249240000001,0.9184485099520904,0.4279511941885465,0.9829843161458647,0.9999249182678404
219,219.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",5.0,4.0,4.5,0.9179015159999999,0.33862102,0.995514758,0.999935592,0.9129020368225246,0.4195431971163464,0.995479325504829,0.9999355870823573
220,220.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Member functions and data members.,5.0,5.0,5.0,0.990693688,0.9472655059999999,1.0,0.999912934,0.9901269697027038,0.9537177674002775,0.9999999999999999,0.9999129273523866
221,221.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"public section and private section, and there must be a semicolon to set the end",1.0,4.0,2.5,0.90247637,0.12837863,0.990765476,0.999876413,0.8965375592724254,0.2350247451842662,0.9906925251476189,0.999876403563956
222,222.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,member funtions and data members,5.0,5.0,5.0,0.9300514459999999,0.684294939,0.99025767,0.999960691,0.9257918504243068,0.7229226269600392,0.9901807075839969,0.9999606879987016
223,223.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data members and Member functions,5.0,5.0,5.0,0.954373658,0.7515409590000001,0.99025767,0.99995452,0.9515951907779576,0.7819408464018639,0.9901807075839969,0.9999545165275371
224,224.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions,5.0,5.0,5.0,0.954373658,0.777678669,0.99025767,0.999937455,0.9515951907779576,0.8048805104070612,0.9901807075839969,0.9999374502246
225,225.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"the class name and its public data types such as constructors, methods, functions.",2.0,5.0,3.5,0.936239004,0.48313766700000005,0.980479733,0.999950762,0.9323562067020975,0.5463776950634773,0.9803255268799709,0.9999507582406085
226,226.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"a constructor and several data members, and at least one public data member or method",4.0,5.0,4.5,0.94068867,0.5112903120000001,0.994679242,0.9999536040000001,0.9370768400991778,0.5710857592801818,0.9946372090991799,0.9999536004575994
227,227.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"class name, two curly prenthesis, public and private",1.0,3.0,2.0,0.904706895,0.067000717,0.9837256520000001,0.999968139,0.8989039145916836,0.18115664803420098,0.9835970879767167,0.9999681365673673
228,228.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions,5.0,5.0,5.0,0.954373658,0.777678669,0.99025767,0.999937455,0.9515951907779576,0.8048805104070612,0.9901807075839969,0.9999374502246
229,229.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data and functions,5.0,4.0,4.5,0.911214471,0.55070442,0.9807445770000001,0.999888613,0.9058077767241759,0.6056774046303122,0.9805924630934458,0.9998886044954435
230,230.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,functions and data members that belong to the class,5.0,5.0,5.0,0.94170326,0.563371301,0.987425903,0.999946975,0.9381532146941124,0.6167944456462933,0.9873265702034126,0.9999469709514656
231,231.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"class variables, function definitions for the class",5.0,5.0,5.0,0.916436017,0.265422553,0.990464131,0.9999678009999999,0.9113472946187754,0.3553008346953263,0.9903887995837034,0.9999677985415604
232,232.0,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",5.0,4.0,4.5,0.9278296229999999,0.362689227,0.9888910959999999,0.9999552420000001,0.9234347270230895,0.44066656950771266,0.9888033379286776,0.999955238582663
233,233.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the data components of a particular class.  A member function are the functioning components of the class.,1.0,5.0,3.0,0.9707052709999999,0.623681426,0.99605124,0.999969019,0.9689213356517505,0.6697254026280429,0.9960200456029905,0.9999690166345564
234,234.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,1.0,4.0,2.5,0.9602739220000001,0.397849083,0.991702732,0.9999658220000001,0.9578547579656951,0.4715244864067494,0.991637185278476,0.9999658193904609
235,235.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",4.0,5.0,4.5,0.983372927,0.711735606,0.989280885,0.999972813,0.9823604027584334,0.7470058263320768,0.9891962061821182,0.9999728109242337
236,236.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,4.0,5.0,4.5,0.9819887279999999,0.712884724,0.99556943,0.99996707,0.9808919114092838,0.748014345472519,0.9955344294024558,0.9999670674857476
237,237.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,5.0,5.0,5.0,0.986824989,0.711608589,0.9961824659999999,0.9999891609999999,0.9860226819420828,0.7468943503342581,0.9961523082615725,0.9999891601724268
238,238.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",4.0,5.0,4.5,0.9819395540000001,0.684016585,0.992208625,0.999954188,0.9808397429034528,0.7226783306068197,0.9921470747297888,0.9999541845021885
239,239.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable can only be accessed within the scope of its declaration.,3.0,4.0,3.5,0.971565783,0.501183212,0.995476065,0.999979625,0.9698342494942251,0.5622153005419477,0.9954403268380364,0.9999796234443398
240,240.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,4.0,5.0,4.5,0.982011557,0.6713151340000001,0.995839713,0.999923964,0.9809161306068195,0.7115309493588652,0.9958068475829193,0.9999239581945428
241,241.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",3.0,5.0,4.0,0.983534098,0.736417115,0.99262314,0.9999720259999999,0.9825313884470763,0.7686674609435731,0.9925648643135762,0.9999720238641451
242,242.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body,3.0,5.0,4.0,0.976485789,0.59662205,0.9956341340000001,0.999972272,0.9750538647726383,0.6459768418845693,0.9955996445508327,0.9999722698829278
243,243.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is globally accessible, while a local variable is only accessible inside the member function.",4.0,5.0,4.5,0.982085407,0.67715925,0.988618109,0.999895578,0.9809944777853212,0.7166600160386698,0.9885281943871668,0.9998955700272312
244,244.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,5.0,5.0,5.0,0.9907149670000001,0.803036392,0.9963416209999999,0.99996823,0.9901495445112527,0.8271356217215896,0.9963127205535466,0.9999682275743152
245,245.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Local variables are used only within the scope of its declaration,5.0,4.0,4.5,0.966310859,0.40098565799999997,0.9954365140000001,0.9999606259999999,0.9642593210089145,0.47427728979415784,0.9954004633932195,0.9999606229937389
246,246.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",0.0,4.0,2.0,0.980248749,0.700050712,0.991341372,0.9999698890000001,0.9790459744383699,0.7367506225557573,0.9912729706083255,0.9999698867009822
247,247.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,2.0,5.0,3.5,0.977855921,0.55937767,0.994108254,0.999967598,0.9765074324960603,0.6132894502468975,0.99406171041067,0.9999675955260611
248,248.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",5.0,5.0,5.0,0.9775795340000001,0.5896824,0.992510555,0.999937662,0.9762142145999939,0.6398862838627049,0.9924513899150847,0.9999376572404047
249,249.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The local variable is lost once it exits the block of code, while the data member is not.",4.0,5.0,4.5,0.9735969309999999,0.424690932,0.9934070290000001,0.9999283179999999,0.9719890865276593,0.49508213538740764,0.9933549458764764,0.999928312526977
250,250.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.,4.0,5.0,4.5,0.981235027,0.63203907,0.996942763,0.999963204,0.9800923129423398,0.6770604578121067,0.9969186114524938,0.9999632011905729
251,251.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",5.0,5.0,5.0,0.9827648999999999,0.6493387820000001,0.992366025,0.999914552,0.9817153492729522,0.6922434857310285,0.9923057181576217,0.9999145454759232
252,252.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,4.0,5.0,4.5,0.988383114,0.79997164,0.9956953829999999,0.999989845,0.9876756907098927,0.8244458535231033,0.9956613774054154,0.9999898442246514
253,253.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The data member can be accessed outside of the class, whereas the local variable cannot.",3.0,5.0,4.0,0.98243463,0.638429344,0.997035318,0.999976663,0.981364967111223,0.6826688580300733,0.997011897618079,0.9999766612181867
254,254.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",5.0,5.0,5.0,0.98277998,0.6875792740000001,0.9961369959999999,0.9999705940000001,0.98173134758645,0.7258051113620969,0.996106479057865,0.9999705917548102
255,255.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,a local variable in a member function has to be static. a data member can change its value freely.,0.0,4.0,2.0,0.977805316,0.611869574,0.9938724940000001,0.999881039,0.9764537458478806,0.6593587746350352,0.9938240879548513,0.9998810299171578
256,256.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",5.0,5.0,5.0,0.977543652,0.568160415,0.99137811,0.999933785,0.9761761475253967,0.6209975937431459,0.9913099988310176,0.9999337799443903
257,257.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.,5.0,5.0,5.0,0.986310184,0.7508588429999999,0.996594254,0.999945328,0.9854765273147503,0.7813421898304744,0.9965673493026171,0.9999453238257149
258,258.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members   local variables are declared in a function definition’s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",5.0,4.0,4.5,0.982175529,0.664438903,0.994732773,0.9999718040000001,0.981090087865496,0.7054960507865677,0.9946911629831398,0.9999718018471954
259,259.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable is only available in the function.,4.0,5.0,4.5,0.9698489309999999,0.512174845,0.990567313,0.999852007,0.9680128478678909,0.5718620663790633,0.9904927967004166,0.9998519957005231
260,260.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variables are accessed inside member functions only while data members   can be accessed throughout the class,4.0,5.0,4.5,0.98609072,0.829386592,0.995633233,0.9999819,0.9852436988085529,0.8502617767852791,0.9955987364331168,0.9999818986180392
261,261.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",5.0,5.0,5.0,0.9807347059999999,0.662404478,0.988531767,0.999948012,0.9795615243344171,0.7037105452490218,0.9884411703030122,0.9999480080306421
262,262.0,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",3.0,5.0,4.0,0.978027225,0.572677791,0.9897027759999999,0.99995515,0.9766891682450927,0.624962251994582,0.9896214300347981,0.9999551465756386
263,263.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,2.0,3.0,2.5,0.974254429,0.415721804,0.992044522,0.9999764940000001,0.9726866236051195,0.4872104135441548,0.9919816753496259,0.9999764922052835
264,264.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",2.0,4.0,3.0,0.982300878,0.614055693,0.9856466859999999,0.999982378,0.9812230701333091,0.6612774138477044,0.9855332977527234,0.9999823766545352
265,265.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Unlike regular functions, constructors are only used to initialize an object’s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",5.0,5.0,5.0,0.986534238,0.64461416,0.9945261479999999,0.9999830279999999,0.9857142253341407,0.6880969387982037,0.9944829056878669,0.9999830267041635
266,266.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",4.0,5.0,4.5,0.98297596,0.561592877,0.992532385,0.999982477,0.9819392620081526,0.6152336184346218,0.9924733923676233,0.999982475662094
267,267.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",3.0,5.0,4.0,0.988314867,0.625009835,0.99070846,0.99998442,0.9876032877323544,0.6708912758480565,0.9906350587328709,0.9999844188104449
268,268.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,2.0,4.0,3.0,0.9764522309999999,0.438185155,0.990185448,0.999988015,0.9750182632206252,0.5069252900337483,0.9901079150449565,0.9999880140849283
269,269.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is called whenever a new object of that class is made.,4.0,3.0,3.5,0.981435835,0.583469749,0.9935421809999999,0.999984978,0.9803053493705123,0.6344337738103111,0.9934911655496558,0.999984976853049
270,270.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.,3.0,5.0,4.0,0.9821928740000001,0.565094352,0.989281462,0.999960855,0.981108489108707,0.6183066749503838,0.9891967877403003,0.9999608520112234
271,271.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ",4.0,4.0,4.0,0.988121569,0.669374824,0.997806132,0.999989679,0.9873982186340471,0.7098280435011629,0.997788800891151,0.9999896782119769
272,272.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructors cannot return values, so they cannot specify a return type like functions can.",3.0,5.0,4.0,0.98303324,0.612329662,0.9907181829999999,0.9999751259999999,0.982000030137937,0.6597625691576933,0.9906448585425839,0.9999751241008347
273,273.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created.,4.0,3.0,3.5,0.98519069,0.604676962,0.993941209,0.999978673,0.9842888604731872,0.6530462054543477,0.9938933457893083,0.9999786713716531
274,274.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,2.0,3.0,2.5,0.9714182020000001,0.351552278,0.991365275,0.999970329,0.9696776813838606,0.4308922676234612,0.9912970624371407,0.9999703267345769
275,275.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initialized values at the execution of its instantiation. It provides default values.,4.0,3.0,3.5,0.9716414809999999,0.270225465,0.989809985,0.999974178,0.9699145572087575,0.3595160925555799,0.9897294859639882,0.9999741760284534
276,276.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",4.0,4.0,4.0,0.979644418,0.531986475,0.9931329259999999,0.9999907440000001,0.9784048420249505,0.5892496697917299,0.9930786775187935,0.9999907432932914
277,277.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",3.0,3.0,3.0,0.988123119,0.667319,0.993085263,0.999969821,0.9873998630230341,0.7080237572108252,0.9930306379908341,0.9999698186957903
278,278.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.,3.0,5.0,4.0,0.95392251,0.552986205,0.990551745,0.99995532,0.9511165696149702,0.6076800047522088,0.9904771057163981,0.9999553165886182
279,279.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor does not need a type, and it is used to initialize the variables.",3.0,4.0,3.5,0.9886145000000001,0.555282056,0.98537779,0.999984146,0.9879211672196391,0.6096949498467101,0.9852622775292765,0.9999841447895245
280,280.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",Constructors don't have a return type.,3.0,5.0,4.0,0.9766272309999999,0.601152182,0.989310613,0.999969478,0.9752039200417191,0.6499526953919803,0.9892261690272428,0.9999694756696017
281,281.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor creates the class object into memory where functions perform actions against that object,2.0,4.0,3.0,0.953633428,0.37141004200000005,0.989540875,0.9999766940000001,0.9508098836426533,0.44832036036970807,0.9894582500499851,0.9999766922205539
282,282.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors cannot return values,3.0,5.0,4.0,0.9394850140000001,0.33991158,0.9815412179999999,0.9999405720000001,0.9357998861183182,0.42067585230222715,0.9813953973945397,0.9999405674625875
283,283.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes values and a function usual performs some sort of operation.,2.0,3.0,2.5,0.9746356009999999,0.44363749,0.9918098559999999,0.9999797909999999,0.9730910075011763,0.5117105115754892,0.9917451555361835,0.999979789457014
284,284.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,5.0,5.0,5.0,0.98937887,0.7201331259999999,0.9928742509999999,0.9999813359999999,0.9887320843872929,0.7543758785392871,0.9928179590391578,0.999981334574977
285,285.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,4.0,4.0,4.0,0.981829763,0.44482159600000004,0.992465574,0.999951315,0.980723266057483,0.5127497378040509,0.9924060535743774,0.9999513112828308
286,286.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is a function that initializes a class instance, a function performs whatever task it is written for",2.0,4.0,3.0,0.9800519940000001,0.45816913299999995,0.9942027790000001,0.999985482,0.9788372378221741,0.5244641540278493,0.9941569821388524,0.9999854808915302
287,287.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor cannot return values, not even void, but function get a return value.",3.0,5.0,4.0,0.984618366,0.5214238170000001,0.991673908,0.999958169,0.9836816841618974,0.5799793922684959,0.9916081335747666,0.9999581658061435
288,288.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",5.0,5.0,5.0,0.991892517,0.6836259370000001,0.991475071,0.9999663240000001,0.9913988027379896,0.7223354798419938,0.991407725803102,0.9999663214287894
289,289.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object. A function is part of an object.,1.0,4.0,2.5,0.974748194,0.523665547,0.9932538809999999,0.999964486,0.973210456978076,0.5819468382685613,0.9932005880385745,0.9999644832884554
290,290.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors initialize the data that is then used in the calculations of a   function,2.0,3.0,2.5,0.959770083,0.339985728,0.99117092,0.9999768859999999,0.9573202371252203,0.4207409280187554,0.99110117207236,0.9999768842352131
291,291.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is called when the class is created, a function can be called any time.",4.0,3.0,3.5,0.987900555,0.6706866029999999,0.993232461,0.999958033,0.9871637457388629,0.7109793214635043,0.9931789988249519,0.9999580297957597
292,292.0,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",4.0,4.0,4.0,0.980460942,0.551845431,0.993989108,0.9999871159999999,0.979271089168875,0.606678808692345,0.9939416231816193,0.9999871150162881
293,293.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler creates a default constructor when we do not define one in our class file,5.0,5.0,5.0,0.9770960809999999,0.693130255,0.989855547,0.99997995,0.9757013211878323,0.730676909198986,0.989775407894477,0.999979948469154
294,294.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",during compilation,2.0,5.0,3.5,0.774725914,0.20636200899999999,0.9769250490000001,0.999862833,0.7610075961053383,0.3034665678324614,0.976742761602826,0.9998628225271037
295,295.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When the class does not explicitly include a constructor.,5.0,5.0,5.0,0.980460167,0.558415711,0.98263914,0.999963478,0.9792702669743816,0.6124451905069748,0.9825019927539623,0.9999634752114931
296,296.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When no parameters are set is when a default constructor is used.,3.0,3.0,3.0,0.979801774,0.627421498,0.9877853520000001,0.9999708490000001,0.9785717803948935,0.6730078629137851,0.9876888587770537,0.9999708467742797
297,297.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,5.0,5.0,5.0,0.9806227679999999,0.561836302,0.98397673,0.999968073,0.9794427697444765,0.6154472594808521,0.9838501494416049,0.9999680705623281
298,298.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When there are no arguments passed.,1.0,2.0,1.5,0.9486294390000001,0.247074038,0.982278381,0.999937738,0.9455011711253494,0.3391973287227555,0.982138383831589,0.9999377332462075
299,299.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when there is not one already for a specific class,5.0,5.0,5.0,0.952731192,0.179068938,0.977214822,0.999954207,0.9498527049704455,0.27951290554108266,0.9770348237503063,0.9999542035036392
300,300.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When it the programs compiles,2.0,5.0,3.5,0.931230426,0.223319262,0.980313771,0.999880152,0.9270426257324962,0.3183490378832472,0.9801582538140877,0.999880142849434
301,301.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a constructor is not provided by the programmer of the class,5.0,5.0,5.0,0.9807277320000001,0.539220214,0.985774296,0.9999808579999999,0.9795541256448728,0.5955983339310631,0.9856619158456443,0.999980856538481
302,302.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that does not explicitly include a constructor.,5.0,5.0,5.0,0.97613889,0.529748797,0.97984929,0.999974945,0.9746858409693206,0.5872857800143997,0.9796901035091117,0.999974943087015
303,303.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",Before the main function of the code.,0.0,2.0,1.0,0.951230228,0.269591481,0.978570982,0.999918368,0.9482603380857817,0.35895967885504265,0.9784016971371539,0.9999183617672802
304,304.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",whenevery you dont specifiy your own,5.0,5.0,5.0,0.8605901,0.09653464,0.984229279,0.999932673,0.8521005779257078,0.2070769857522095,0.9841046935270926,0.9999326678594874
305,305.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When non are provided,5.0,5.0,5.0,0.929195106,0.295572192,0.9745538909999999,0.99978145,0.9248833626404472,0.38176155327158995,0.9743528719392089,0.9997814333133952
306,306.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ will create a default constructor when no other constructor is present.,5.0,5.0,5.0,0.9717236159999999,0.707918465,0.98805388,0.999983625,0.9700016939116176,0.7436557267250163,0.9879595080933758,0.9999836237497456
307,307.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor was specified in the constructor's class, but the class is instantiated in a program.",5.0,5.0,5.0,0.972661138,0.57573694,0.9923067309999999,0.9999735959999999,0.9709963073643348,0.6276471027409494,0.9922459557471394,0.999973593984017
308,308.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor exists when one is needed, a parameterless default constructor is declared.",5.0,5.0,5.0,0.987915456,0.698397279,0.99586702,0.999978406,0.987179554151955,0.735299493230537,0.9958343703026388,0.9999784043512673
309,309.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","The Compiler creates this automatically for you, unless you specifically create one.",5.0,5.0,5.0,0.970998347,0.453068525,0.992406172,0.9999795290000001,0.9692322588431728,0.5199876243799872,0.992346182310717,0.9999795274370101
310,310.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that doesn't explicitly include a constructor.,5.0,5.0,5.0,0.9687486890000001,0.527013958,0.9818772379999999,0.9999656690000001,0.9668456053984404,0.5848855587337936,0.9817340718838689,0.9999656663787791
311,311.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when no user-defined constructor exists,5.0,5.0,5.0,0.8985167740000001,0.49111717899999996,0.97930901,0.999824748,0.8923368392371361,0.5533808841035822,0.9791455554075263,0.9998247346192595
312,312.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","If a class does not explicitly include a constructor, the compiler creates one.",5.0,5.0,5.0,0.989664614,0.7667384740000001,0.9905873959999999,0.99997945,0.9890352290883595,0.7952788889394062,0.9905130383520122,0.9999794484309782
313,313.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you do not provide your own constructor.,5.0,5.0,5.0,0.954243958,0.5337050560000001,0.981204126,0.999970303,0.9514575925511242,0.5907579760169392,0.9810556424366298,0.9999703007325916
314,314.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,5.0,5.0,5.0,0.9806227679999999,0.561836302,0.98397673,0.999968073,0.9794427697444765,0.6154472594808521,0.9838501494416049,0.9999680705623281
315,315.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ creates a default constructor during compilation if one is not provided.,5.0,5.0,5.0,0.9840635059999999,0.781404138,0.9888146320000001,0.9999802640000001,0.983093035340457,0.8081501544241452,0.9887262698787044,0.9999802624931283
316,316.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a class does not explicitly include a constructor,5.0,5.0,5.0,0.974416554,0.47384831299999997,0.9796874790000001,0.999962482,0.9728586213886614,0.5382249280618794,0.9795270142352803,0.9999624791354472
317,317.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler will provide one when class does not explictly include a consructor.,5.0,5.0,5.0,0.97836268,0.6209262010000001,0.989124097,0.99996732,0.9770450511532072,0.6673072896503293,0.9890381795889603,0.9999673175048355
318,318.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when the programmer does not explicitly include a constructor,5.0,5.0,5.0,0.978802443,0.48824331200000004,0.9809686,0.999971449,0.9775115940138621,0.5508586454156627,0.9808182558293632,0.9999714468200905
319,319.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When one is not explicitly stated.,5.0,5.0,5.0,0.9626171590000001,0.31405773800000003,0.981708935,0.9999422729999999,0.9603406890084911,0.3979853239918489,0.9815644393245643,0.9999422685924612
320,320.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when one is not explicitly included by a class,5.0,5.0,5.0,0.96162498,0.273638308,0.9801379659999999,0.999951684,0.959288090156514,0.36251136152606317,0.9799810599905161,0.9999516803110046
321,321.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you dont specify any constructors.,5.0,5.0,5.0,0.952637672,0.475624025,0.984402897,0.999946819,0.9497534899652531,0.5397833750968338,0.9842796830738112,0.9999468149395548
322,322.0,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",5.0,5.0,5.0,0.984284818,0.581828117,0.992284982,0.9999769609999999,0.9833278243826851,0.6329930015888663,0.9922240349344841,0.9999769592409394
323,323.0,2.5,How many constructors can be created for a class?,Unlimited number.,Just one per class.,0.0,0.0,0.0,0.92630738,0.381242245,0.988280895,0.9998730509999999,0.9218197853298767,0.45694955677792026,0.9881883164654818,0.9998730413072624
324,324.0,2.5,How many constructors can be created for a class?,Unlimited number.,As many as you want so long as they have different parameters.,5.0,5.0,5.0,0.911226392,0.170116603,0.9933793059999999,0.999845655,0.9058204236668288,0.27165592201184585,0.9933270038704419,0.9998456432155388
325,325.0,2.5,How many constructors can be created for a class?,Unlimited number.,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",5.0,5.0,5.0,0.9233736990000001,0.31364277,0.9873715820000001,0.999908586,0.918707454538087,0.3976211288694411,0.9872718200786141,0.9999085790204105
326,326.0,2.5,How many constructors can be created for a class?,Unlimited number.,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,1.0,2.0,1.5,0.923429251,0.195063725,0.987016179,0.999901272,0.9187663894393748,0.29355067088528064,0.9869136094675462,0.9999012644619762
327,327.0,2.5,How many constructors can be created for a class?,Unlimited number.,"In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",5.0,5.0,5.0,0.909558475,0.200009346,0.986294619,0.999891223,0.904050936992153,0.29789117676881244,0.9861863492910082,0.9998912146947208
328,328.0,2.5,How many constructors can be created for a class?,Unlimited number.,1,0.0,0.0,0.0,0.754600108,0.061966006,0.9749136290000001,0.9998079120000001,0.7396562065972809,0.1767379526433932,0.974715451795891,0.9998078973338069
329,329.0,2.5,How many constructors can be created for a class?,Unlimited number.,any number you want,5.0,5.0,5.0,0.8726597429999999,0.257908702,0.992441847,0.999884762,0.8649052153606606,0.34870633130060974,0.9923821391359263,0.9998847532014141
330,330.0,2.5,How many constructors can be created for a class?,Unlimited number.,One,0.0,0.0,0.0,0.749747217,0.084790774,0.9806875159999999,0.9993966540000001,0.7345077933619976,0.19677002541933947,0.980534951323207,0.9993966079336709
331,331.0,2.5,How many constructors can be created for a class?,Unlimited number.,"by default just one, but they may be overloaded to create as many constructors as necessary",5.0,5.0,5.0,0.9066418409999999,0.006032733,0.984581643,0.999889866,0.9009566912965299,0.12764832354692782,0.9844598411306815,0.9998898575911118
332,332.0,2.5,How many constructors can be created for a class?,Unlimited number.,as many as you want,5.0,5.0,5.0,0.85914886,-0.035546917000000004,0.99134998,0.999785245,0.8505715720009467,0.0911560983116757,0.9912816466097664,0.9997852286031489
333,333.0,2.5,How many constructors can be created for a class?,Unlimited number.,"As many as you want, with different parameters.",5.0,5.0,5.0,0.916219652,0.276220858,0.992866424,0.9998971659999999,0.9111177538296557,0.36477792693200817,0.9928100702074575,0.9998971581484771
334,334.0,2.5,How many constructors can be created for a class?,Unlimited number.,infinite,5.0,5.0,5.0,0.8538305159999999,0.143929541,0.9125379840000001,0.9995382820000001,0.8449293614836715,0.24867294440733229,0.9118470519478267,0.9995382467471711
335,335.0,2.5,How many constructors can be created for a class?,Unlimited number.,as many as you need,5.0,5.0,5.0,0.858913899,-0.013324797,0.9889615690000001,0.9997860120000001,0.8503223027875695,0.11065925931098188,0.9888743676509755,0.9997859956617106
336,336.0,2.5,How many constructors can be created for a class?,Unlimited number.,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",5.0,5.0,5.0,0.914235055,0.10669332,0.983772505,0.999905356,0.9090123025715287,0.2159927134856765,0.9836443111058415,0.9999053487737954
337,337.0,2.5,How many constructors can be created for a class?,Unlimited number.,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",5.0,5.0,5.0,0.926125586,0.306493908,0.981886252,0.999906944,0.9216269207805399,0.3913469567135972,0.9817431570926267,0.9999069368950415
338,338.0,2.5,How many constructors can be created for a class?,Unlimited number.,It depends on the number of objects. Each object should have a constructor.,1.0,4.0,2.5,0.935943365,0.33260887899999997,0.9926404129999999,0.999947426,0.9320425644339184,0.41426666391998485,0.9925822737667461,0.9999474219859
339,339.0,2.5,How many constructors can be created for a class?,Unlimited number.,"Theoretically unlimited, as long as they are defined by the programmer.",5.0,5.0,5.0,0.931704104,0.326352447,0.9877434279999999,0.9999115959999999,0.9275451488850794,0.4087757296357127,0.9876466035860214,0.9999115892502283
340,340.0,2.5,How many constructors can be created for a class?,Unlimited number.,As many as needed.,5.0,5.0,5.0,0.910212755,0.334955305,0.997512052,0.999876175,0.9047450601058972,0.4163259959752054,0.9974923977192508,0.9998761655457844
341,341.0,2.5,How many constructors can be created for a class?,Unlimited number.,as many as wanted/needed,5.0,5.0,5.0,0.8104785090000001,-0.021715377999999997,0.990758743,0.999883104,0.7989373854399282,0.10329529709132329,0.9906857389582948,0.9998830950748234
342,342.0,2.5,How many constructors can be created for a class?,Unlimited number.,several,4.0,5.0,4.5,0.699717403,0.011169421,0.9806875159999999,0.9995382820000001,0.6814313577782669,0.13215651867264958,0.980534951323207,0.9995382467471711
343,343.0,2.5,How many constructors can be created for a class?,Unlimited number.,One,0.0,0.0,0.0,0.749747217,0.084790774,0.9806875159999999,0.9993966540000001,0.7345077933619976,0.19677002541933947,0.980534951323207,0.9993966079336709
344,344.0,2.5,How many constructors can be created for a class?,Unlimited number.,one,0.0,0.0,0.0,0.8390874859999999,0.313976198,0.962290641,0.999689145,0.8292885381517276,0.39791376071400303,0.9619927447703953,0.9996891212657766
345,345.0,2.5,How many constructors can be created for a class?,Unlimited number.,There can be infinite constructors as long as the signature is different.,5.0,5.0,5.0,0.91945529,0.226350993,0.990676393,0.999889191,0.9145504296313142,0.32100982532385086,0.9906027384101244,0.9998891825395746
346,346.0,2.5,How many constructors can be created for a class?,Unlimited number.,that depends on the number of data members in the class,0.0,3.0,1.5,0.890102983,0.224327788,0.989316254,0.999915992,0.8834106810062365,0.31923416697759044,0.98923185458999,0.9999159855858692
347,347.0,2.5,How many constructors can be created for a class?,Unlimited number.,one,0.0,0.0,0.0,0.8390874859999999,0.313976198,0.962290641,0.999689145,0.8292885381517276,0.39791376071400303,0.9619927447703953,0.9996891212657766
348,348.0,2.5,How many constructors can be created for a class?,Unlimited number.,you can overload constructors as you need,5.0,5.0,5.0,0.840801776,-0.039486442000000004,0.989066607,0.999884855,0.8311072217622011,0.08769858884202152,0.9889802354297093,0.9998848462085148
349,349.0,2.5,How many constructors can be created for a class?,Unlimited number.,As many as the programmer wants to create.,5.0,5.0,5.0,0.918610513,0.24968960899999998,0.99535106,0.999909017,0.9136542089892962,0.3414928748865831,0.9953143343240832,0.999909010053318
350,350.0,2.5,How many constructors can be created for a class?,Unlimited number.,one,0.0,0.0,0.0,0.8390874859999999,0.313976198,0.962290641,0.999689145,0.8292885381517276,0.39791376071400303,0.9619927447703953,0.9996891212657766
351,351.0,2.5,How many constructors can be created for a class?,Unlimited number.,"as many as you want, as long as they each have a unique argument list",5.0,5.0,5.0,0.902237535,0.001706589,0.9868532040000001,0.99979891,0.8962841801474772,0.1238514993493183,0.9867493469983527,0.9997988946464912
352,352.0,2.5,How many constructors can be created for a class?,Unlimited number.,as many as the user decides to use.,5.0,5.0,5.0,0.921586573,0.235553503,0.9925227870000001,0.999886013,0.9168114994977782,0.32908637401172247,0.992463718545385,0.9998860042969298
353,353.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.,5.0,3.0,4.0,0.9705152509999999,0.46589097399999996,0.985214423,0.999947535,0.9687197441709263,0.5312411990727884,0.9850976199633631,0.9999475309942224
354,354.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",1.0,4.0,2.5,0.986188889,0.5919765229999999,0.9841587390000001,0.999944279,0.98534784591981,0.6418997123844304,0.9840335962755087,0.9999442747456221
355,355.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",5.0,5.0,5.0,0.9931386109999999,0.823242128,0.9939820359999999,0.9999772440000001,0.9927207790284125,0.8448691107999258,0.9939344953142645,0.9999772422625471
356,356.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,3.0,3.0,3.0,0.979417682,0.6365066770000001,0.9909348440000001,0.999938885,0.9781642986821646,0.6809814364857268,0.9908632311202059,0.9999388803337826
357,357.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",5.0,5.0,5.0,0.9921875,0.8014481659999999,0.990140839,0.999976042,0.9917117490583136,0.8257417210774888,0.9900629536429733,0.9999760401707726
358,358.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,5.0,4.0,4.5,0.97556901,0.576794505,0.985551893,0.9999470840000001,0.9740812574881497,0.6285752707313225,0.9854377559073958,0.9999470799597879
359,359.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only tells the user what data types go into a function and what type is returned.,5.0,4.0,4.5,0.974930823,0.523831606,0.9862311990000001,0.999934675,0.9734042073756732,0.5820925793325274,0.9861224282859692,0.9999346700123429
360,360.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.,4.0,5.0,4.5,0.988239944,0.7864220140000001,0.985787564,0.999962088,0.9875238022123156,0.8125540746397932,0.9856752886601328,0.9999620851053647
361,361.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",4.0,4.0,4.0,0.989699364,0.7098687890000001,0.989343895,0.9999598140000001,0.9890720952285481,0.745367421332588,0.9892597139482411,0.9999598109317417
362,362.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes a class's public interface without revealing the class's member function implementations,5.0,4.0,4.5,0.97305423,0.509836614,0.9842077020000001,0.999945208,0.9714133371421485,0.569809926635125,0.9840829460732023,0.9999452038165525
363,363.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",1.0,3.0,2.0,0.9774642590000001,0.61950326,0.986831735,0.999942792,0.9760919197996991,0.6660584507719722,0.9867277083976401,0.9999427876320875
364,364.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype does not include any actual code where the function has all the code that is executed in the program.,3.0,3.0,3.0,0.9739954470000001,0.527533054,0.9803882540000001,0.9999451490000001,0.972411870606031,0.5853411414082682,0.9802333252145661,0.9999451448120479
365,365.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype declares what will be used in the program and the definition,3.0,3.0,3.0,0.96745348,0.350554794,0.981917795,0.999900048,0.9654715231950572,0.4300168294993654,0.9817749492758804,0.9999000403685221
366,366.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",5.0,5.0,5.0,0.9935804009999999,0.821689308,0.993121478,0.999962674,0.9931894723255039,0.8435062841000905,0.9930671390819331,0.9999626711501067
367,367.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",5.0,5.0,5.0,0.9870011209999999,0.78739351,0.9935266140000001,0.999977888,0.986209539697585,0.8134067044923087,0.9934754755735374,0.9999778863117174
368,368.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",3.0,4.0,3.5,0.9869619009999999,0.7068946359999999,0.992547608,0.9999666229999999,0.9861679313517375,0.7427571670096174,0.9924887356262123,0.9999666204516183
369,369.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,5.0,4.0,4.5,0.9851482509999999,0.692086816,0.983063923,0.99996053,0.9842438371027276,0.7297611388399943,0.9829301314528514,0.9999605269864092
370,370.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.,5.0,4.0,4.5,0.991574705,0.74641794,0.986533498,0.999967114,0.9910616372201297,0.7774446478231727,0.9864271153862896,0.999967111489107
371,371.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",3.0,4.0,3.5,0.9653506279999999,0.510337114,0.986905818,0.999939705,0.9632406156661961,0.5702491885993369,0.9868023766382001,0.9999397003963907
372,372.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",5.0,5.0,5.0,0.9906910059999999,0.8083181979999999,0.994205259,0.9999580570000001,0.9901241243793084,0.8317711791204832,0.9941594817303455,0.9999580537975922
373,373.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype just specifies parameters.  A function definition includes parameters and a code body.,4.0,4.0,4.0,0.976709127,0.74327451,0.983320055,0.99994939,0.9752908031904066,0.7746858281705,0.9831882868433067,0.9999493861358543
374,374.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototypes describe the class's public interface,5.0,4.0,4.5,0.961007178,0.40373295600000003,0.9819559529999999,0.999934781,0.9586326664114546,0.4766884456697932,0.9818134087162822,0.9999347760204363
375,375.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",4.0,5.0,4.5,0.986198783,0.659713149,0.992643622,0.999949158,0.9853583424260264,0.7013485103581517,0.9925855081171905,0.9999491541181408
376,376.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",4.0,4.0,4.0,0.97716403,0.7509005670000001,0.9942910290000001,0.999964407,0.9757734080183267,0.7813788087439506,0.9942459292958173,0.9999644042824237
377,377.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A functgion prototype is a declaration of a function , while function definition specifies what a function does",3.0,4.0,3.5,0.973826468,0.65251869,0.988905901,0.9999444609999999,0.9722326014404787,0.695034320164781,0.9888182598851519,0.999944456759518
378,378.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",5.0,5.0,5.0,0.990436435,0.829985917,0.9870396570000001,0.999952775,0.9898540509930074,0.8507877721433238,0.9869372729389482,0.9999527713943038
379,379.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",5.0,4.0,4.5,0.9848203059999999,0.768739224,0.987599955,0.999957254,0.9838959215244785,0.7970348397384012,0.9875019971786424,0.9999572507362818
380,380.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done",5.0,4.0,4.5,0.9780761,0.574835479,0.990021123,0.999957608,0.9767410195429838,0.6268559388458036,0.989942291911039,0.9999576047633104
381,381.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",5.0,5.0,5.0,0.9901430609999999,0.734493554,0.996358126,0.9999427,0.9895428116545413,0.7669792547834505,0.9963293559396736,0.9999426956250631
382,382.0,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.,5.0,4.0,4.5,0.977654755,0.5848593120000001,0.9829286509999999,0.999927538,0.9762940162670766,0.6356533186110628,0.9827937908316962,0.9999275324674229
383,383.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the role of a header file list all the functions a class can do while hiding the inner workings of its functions,5.0,4.0,4.5,0.968969643,0.262692094,0.989576978,0.9998891679999999,0.9670800146398573,0.352904457505436,0.9894946382563069,0.9998891595378184
384,384.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",The main role of header file is it is used to share information among various files.,3.0,3.0,3.0,0.970671356,0.218579948,0.990792115,0.999923489,0.9688853553598227,0.31418959657124523,0.9907193745902747,0.999923483158276
385,385.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,4.0,3.0,3.5,0.973734379,0.36839616299999994,0.98901977,0.9999098809999999,0.9721349045776349,0.4456752406705331,0.988933028426981,0.9999098741192856
386,386.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",No,0.0,0.0,0.0,0.666803658,-0.139411196,0.9674851859999999,0.99961857,0.6465132933954604,0.0,0.967228325614309,0.9996185408772745
387,387.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""",4.0,3.0,3.5,0.962896168,0.330561847,0.98607892,0.999894996,0.9606366885741857,0.41247009389575984,0.9859689463129896,0.9998949879827946
388,388.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",5.0,4.0,4.5,0.979012907,0.560619533,0.990118817,0.9999059309999999,0.9777348744549748,0.6143793666917768,0.9900407576736737,0.9999059238176975
389,389.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,5.0,4.0,4.5,0.97085166,0.397609502,0.9866012670000001,0.9998633020000001,0.9690766391739398,0.47131421903282755,0.98649541974754,0.9998632915629125
390,390.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files declares the class member functions.,3.0,4.0,3.5,0.95226568,0.622358084,0.990640242,0.9999179340000001,0.9493588450955828,0.668563976441741,0.9905663018246124,0.9999179277341438
391,391.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",A header file allows for the separation of declaration and implementation into separate files.,5.0,3.0,4.0,0.971627235,0.292188734,0.9887291559999999,0.9999099359999999,0.9698994436826245,0.37879207393710745,0.9886401186357725,0.9999099291234849
392,392.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the header file has access to the C++ Standard Library and makes certain classes like class string work.,0.0,3.0,1.5,0.975444973,0.35509073700000005,0.9889796470000001,0.99995256,0.9739496671160468,0.433997783009322,0.9888925884634809,0.9999525563778883
393,393.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",“Instruct” the compiler on how to interface with library and user-written components.,2.0,3.0,2.5,0.964654028,0.394275785,0.988152493,0.999876257,0.9625015954286309,0.46838839470206506,0.9880589001159227,0.9998762475520453
394,394.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",create a comon area to contain reusable functions.,3.0,3.0,3.0,0.954866648,0.36397534600000003,0.990668365,0.999760675,0.9521182019564205,0.44179532706645447,0.990594646990565,0.9997606567271944
395,395.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",to declare the functions being used in the classes,3.0,3.0,3.0,0.960731089,0.263061822,0.991145845,0.9998703659999999,0.9583397646624321,0.35322894791003967,0.9910758989849845,0.9998703561022588
396,396.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0.0,3.0,1.5,0.966089964,0.31326302899999997,0.9839822429999999,0.9999165040000001,0.9640249743603686,0.39728785059261434,0.9838557059931782,0.9999164976249613
397,397.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,5.0,3.0,4.0,0.971301675,0.28512927899999996,0.9889519859999999,0.9998894309999999,0.9695540583416227,0.37259636950241093,0.9888647089472337,0.9998894225578989
398,398.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",a header file is a file used to store a list of prototye functions and data members.,5.0,5.0,5.0,0.975842416,0.607978284,0.9915618979999999,0.999926779,0.9743713128528808,0.6559435984338001,0.9914952387186575,0.9999267734094722
399,399.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",3.0,4.0,3.5,0.9789888259999999,0.368378818,0.9869449990000001,0.9998882020000001,0.977709327015496,0.4456600178957694,0.986841867160093,0.9998881934640631
400,400.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",It contains reusable source code for use by other classes.,3.0,3.0,3.0,0.9534181359999999,0.36937201,0.9868499740000001,0.999841476,0.9505814811950708,0.44653168916202224,0.9867460914820129,0.9998414638964661
401,401.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",4.0,3.0,3.5,0.9750306009999999,0.379819155,0.9855015109999999,0.999896641,0.9735100614687879,0.4557005871302673,0.9853869758998921,0.9998966331083927
402,402.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files have reusable source code in a file that a programer can use.,3.0,2.0,2.5,0.9536038040000001,0.32396033399999996,0.987580311,0.999921763,0.9507784556559786,0.40667630055479986,0.987482197995057,0.9999217570264933
403,403.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To hide the definition and details of a class.  Also to help readability of the main C++ file.,4.0,3.0,3.5,0.969467878,0.337548167,0.987937222,0.999919551,0.9676085902184723,0.4186016116696119,0.9878419285190166,0.9999195448576039
404,404.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To allow the compiler to recognize the classes when used elsewhere.,3.0,4.0,3.5,0.9656422729999999,0.243048519,0.988158833,0.999895732,0.9635500207152699,0.33566434693871483,0.9880652902006269,0.9998957240389893
405,405.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file declares a class, its data, and functions available through that class.",5.0,3.0,4.0,0.975135326,0.536098182,0.994222917,0.99995724,0.9736211638150112,0.5928582941535359,0.9941772792249369,0.9999572367352129
406,406.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",header files contain code which can be used in multiple files,3.0,3.0,3.0,0.9452939029999999,0.242060781,0.987744883,0.99993177,0.9419625139230414,0.3347974623552848,0.9876480700802241,0.999931764790542
407,407.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,3.0,3.0,3.0,0.962458134,0.164161846,0.989198131,0.999882457,0.9601719800029229,0.2664297516697387,0.9891127984424303,0.999882448025424
408,408.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,3.0,4.0,3.5,0.962458134,0.164161846,0.989198131,0.999882457,0.9601719800029229,0.2664297516697387,0.9891127984424303,0.999882448025424
409,409.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To promote function reusuablitly,3.0,3.0,3.0,0.913847685,0.26314953,0.9875469570000001,0.9997866440000001,0.9086013432413167,0.3533059245101538,0.9874485805052735,0.9997866277099646
410,410.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",class definitions are placed here,3.0,3.0,3.0,0.9256872540000001,0.238916501,0.988148857,0.9998985309999999,0.9211618960622333,0.33203789670327233,0.9880552353922657,0.9998985232526969
411,411.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",A header file usually contains class and/or function prototypes.,4.0,5.0,4.5,0.96413523,0.5869987010000001,0.988230053,0.999914663,0.9619512046430891,0.6375309454129675,0.988137072824072,0.9999146564843981
412,412.0,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",contains all the standard C++ library's i.e. string,0.0,2.0,1.0,0.9308610559999999,0.194901422,0.9874297609999999,0.999878409,0.9266507625324538,0.2934082262607502,0.9873304586808241,0.9998783997163535
413,413.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",4.0,5.0,4.5,0.98100239,0.643401921,0.992674335,0.999960757,0.9798455092515468,0.6870330217467865,0.9926164637436138,0.9999607540037408
414,414.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,it includes the specific information about the function such as input and output variable types and how many of each.,1.0,5.0,3.0,0.978503943,0.486246079,0.992696067,0.999870218,0.9771949165218823,0.5491057812986418,0.9926383674219724,0.999870208090959
415,415.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function signature includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.993094921,0.7893351909999999,0.995031795,0.999977962,0.9926744284769062,0.8151108136030637,0.9949925471958302,0.9999779603173674
416,416.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",4.0,5.0,4.5,0.979066372,0.5884630679999999,0.984996908,0.999946434,0.9777915952660592,0.6388161416662084,0.9848783866393156,0.9999464299101596
417,417.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,It includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.991462052,0.80158335,0.997424485,0.9999732370000001,0.9909421240894631,0.8258603648124939,0.9974041389578466,0.999973234956607
418,418.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"Name, paramaters, scope, and other general function information",4.0,5.0,4.5,0.952623725,0.378903121,0.9743407540000001,0.9998724929999999,0.94973869364706,0.4548966332958519,0.974138051200467,0.9998724832646584
419,419.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,5.0,5.0,5.0,0.9615796209999999,0.545918703,0.9904016999999999,0.9999336129999999,0.9592399689693825,0.60147723789788,0.9903258753915621,0.9999336079312576
420,420.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,input parameters and return type,1.0,5.0,3.0,0.9260934000000001,0.36644792600000003,0.98862562,0.9998680320000001,0.9215927747780045,0.44396537771075234,0.9885357647225318,0.9998680219240548
421,421.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,5.0,5.0,5.0,0.9859696029999999,0.7012854820000001,0.9935221259999999,0.999945374,0.9851152062531219,0.7378343138555574,0.9934709521192543,0.999945369829227
422,422.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,Name of the function and the types of it's arguments,5.0,5.0,5.0,0.988553762,0.7125290040000001,0.996885433,0.9999801759999999,0.9878567305110699,0.7477021491370356,0.9968608285572101,0.9999801744864093
423,423.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,5.0,5.0,5.0,0.995340943,0.869052053,0.999816296,0.999999208,0.9950572245033444,0.8850740211613648,0.9998148447759426,0.9999992079395298
424,424.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,Includes the name of the function and the types of its arguments.,5.0,5.0,5.0,0.9931515459999999,0.804916918,0.997829994,0.99998637,0.9927345017197315,0.8287860583739604,0.9978128513960746,0.9999863689593301
425,425.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"identification of a function and the data types of its parameters, it has the name, and the data type variables ",5.0,5.0,5.0,0.985281766,0.6753481029999999,0.990600349,0.999962638,0.984385482648261,0.7150704696077077,0.9905260936780652,0.999962635147358
426,426.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"a return type, and input parameters",1.0,5.0,3.0,0.9594787359999999,0.37970650200000006,0.9856285159999999,0.999863108,0.9570111482231904,0.4556017176436452,0.9855149842134366,0.9998630975481003
427,427.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function signature includes the method name and the input types.,5.0,5.0,5.0,0.9829313759999999,0.6779482370000001,0.992593224,0.9998987540000001,0.9818919630155147,0.717352467545878,0.99253471198329,0.9998987462697234
428,428.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature includes the name of the function and types of arguments, but not the return type.  ",5.0,5.0,5.0,0.9891509409999999,0.7221158740000001,0.993546342,0.999948715,0.9884902753954352,0.7561160299499111,0.9934953594207055,0.9999487110843172
429,429.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The signature can include a result type and thrown errors.,1.0,3.0,2.0,0.964189231,0.335174859,0.988677956,0.99991777,0.9620084940944942,0.4165186867270348,0.988588514166236,0.9999177637216221
430,430.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"function name, and input paramaters",5.0,5.0,5.0,0.9384530190000001,0.411881506,0.98807906,0.9998885000000001,0.9347050466264059,0.4838399902821387,0.9879848870102299,0.9998884914868158
431,431.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",5.0,5.0,5.0,0.9916287659999999,0.835476935,0.9958509529999999,0.9999818540000001,0.9911189903253022,0.8556069436761967,0.9958181763766222,0.9999818526145271
432,432.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,5.0,5.0,5.0,0.992862582,0.77821517,0.995876702,0.9999656440000001,0.9924279409331571,0.8053513685150764,0.9958441287884602,0.9999656413768706
433,433.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,A function signature includes the name of the function and the types of its arguments,5.0,5.0,5.0,0.98904258,0.6990418429999999,0.99499417,0.999975365,0.9883753156309181,0.7358651924287393,0.9949546249660194,0.9999753631190825
434,434.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature includes a function's return type, parameters and semi-colon.",1.0,5.0,3.0,0.960490882,0.5533371570000001,0.986941071,0.9998902690000001,0.9580849299880065,0.6079880164702192,0.9868379081296956,0.9998902606218816
435,435.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,5.0,5.0,5.0,0.992862582,0.77821517,0.995876702,0.9999656440000001,0.9924279409331571,0.8053513685150764,0.9958441287884602,0.9999656413768706
436,436.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the function's name and parameters,5.0,5.0,5.0,0.959560037,0.708061814,0.992319965,0.9999273479999999,0.9570974001386863,0.743781536441915,0.9922592942930347,0.9999273424529159
437,437.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,5.0,5.0,5.0,0.995340943,0.869052053,0.999816296,0.999999208,0.9950572245033444,0.8850740211613648,0.9998148447759426,0.9999992079395298
438,438.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The portion of a function prototype that includes the name of the function and the types of its arguments,5.0,5.0,5.0,0.987122059,0.7340612409999999,0.9940040040000001,0.999918199,0.9863378423526104,0.7665998368862789,0.9939566368569753,0.9999181927543769
439,439.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and its parameters,5.0,5.0,5.0,0.9884480240000001,0.7888033390000001,0.994758367,0.999970115,0.9877445534770768,0.8146440356726142,0.9947169591705093,0.9999701127182375
440,440.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function name and parameters,5.0,5.0,5.0,0.9647177459999999,0.731443286,0.991533474,0.999930458,0.962569193607639,0.7643021984137147,0.9914665901748665,0.9999304526903691
441,441.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,name of function and types of arguments,5.0,5.0,5.0,0.976133347,0.638701201,0.994158543,0.999936018,0.9746799604221243,0.6829074523153975,0.9941123966834927,0.999936013114883
442,442.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,a function's return type and parameter list,1.0,5.0,3.0,0.949585021,0.44227007,0.990880387,0.999847119,0.9465149443620031,0.5105104004963631,0.990808343921035,0.9998471073273173
443,443.0,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",5.0,5.0,5.0,0.9833728079999999,0.709471524,0.9946830259999999,0.99996614,0.9823602765117951,0.745018763182313,0.9946410229920063,0.9999661374147407
444,444.0,3.2,What is the scope of global variables?,File scope.,Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.,5.0,5.0,5.0,0.918475807,0.458820283,0.9855609359999999,0.999809045,0.9135112999164833,0.5250356334044659,0.9854468703452477,0.999809030420313
445,445.0,3.2,What is the scope of global variables?,File scope.,they can be accessed by any C++ file anywhere.,0.0,5.0,2.5,0.9201934340000001,0.382321835,0.987214904,0.9997887670000001,0.915333523737311,0.4578970549276576,0.9871139043544336,0.9997887508720588
446,446.0,3.2,What is the scope of global variables?,File scope.,Global variables have file scope.,5.0,5.0,5.0,0.961108208,0.6988912820000001,0.99641221,0.9999025779999999,0.9587398487465124,0.7357330531268538,0.9963838671922208,0.9999025705616911
447,447.0,3.2,What is the scope of global variables?,File scope.,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,0.0,5.0,2.5,0.9123139379999999,0.355263472,0.985925092,0.999819076,0.9069741969991331,0.43414938323986774,0.9858139031032268,0.9998190621861941
448,448.0,3.2,What is the scope of global variables?,File scope.,A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.,5.0,5.0,5.0,0.9283674359999999,0.552965045,0.990445652,0.9998584640000001,0.9240052907483632,0.6076614337568788,0.9903701746033798,0.9998584531935244
449,449.0,3.2,What is the scope of global variables?,File scope.,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,3.0,5.0,4.0,0.899689317,0.20239588600000002,0.992106622,0.999775988,0.8935807855569975,0.29998571472699487,0.9920442659269347,0.9997759708963638
450,450.0,3.2,What is the scope of global variables?,File scope.,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,5.0,5.0,5.0,0.915177703,0.36506515700000003,0.986549783,0.999814935,0.9100123541777595,0.4427517956388416,0.9864435290344614,0.9998149208700229
451,451.0,3.2,What is the scope of global variables?,File scope.,can be accesed by any classes that have and object of that variables class in it,1.0,5.0,3.0,0.873978138,0.011383295,0.9892804940000001,0.999811137,0.8663038955014944,0.13234422439359636,0.9891958120932981,0.9998111225800401
452,452.0,3.2,What is the scope of global variables?,File scope.,Global variables have file-scope.  The variable is know to all functions throught the file,5.0,5.0,5.0,0.929281175,0.431208491,0.9946387170000001,0.9998351740000001,0.9249746729086455,0.5008022468123966,0.9945963639599616,0.9998351614152996
453,453.0,3.2,What is the scope of global variables?,File scope.,The entire program,4.0,5.0,4.5,0.799048781,0.029133383,0.98962137,0.999849068,0.786811631345948,0.14792252313448392,0.9895393809440347,0.9998490564761262
454,454.0,3.2,What is the scope of global variables?,File scope.,They have file scope when placed outside a function.,5.0,5.0,5.0,0.941448808,0.621511221,0.9942908840000001,0.9998648440000001,0.9378832675544497,0.6678207302783077,0.994245783150347,0.9998648336806465
455,455.0,3.2,What is the scope of global variables?,File scope.,File scope.,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
456,456.0,3.2,What is the scope of global variables?,File scope.,They can be used throughout the program,4.0,5.0,4.5,0.8600869179999999,0.027359377999999997,0.992728886,0.999841869,0.8515667540939843,0.1463655742417332,0.9926714456853655,0.9998418569264723
457,457.0,3.2,What is the scope of global variables?,File scope.,Global variable can b accessed by any class wit an object in the variables class,1.0,5.0,3.0,0.8795923000000001,0.061449446,0.991488622,0.9998375690000001,0.8722599381873545,0.17628459567989008,0.9914213838532326,0.9998375565981612
458,458.0,3.2,What is the scope of global variables?,File scope.,The scope of global variables is at the file level.,5.0,5.0,5.0,0.9321377279999999,0.626681924,0.994497637,0.999886846,0.9280051789044507,0.6723587785423165,0.9944541694567935,0.9998868373605305
459,459.0,3.2,What is the scope of global variables?,File scope.,Global variables all have file scope.,5.0,5.0,5.0,0.95236522,0.673982978,0.995677092,0.999887374,0.9494644466954207,0.713872372726799,0.9956429419102536,0.9998873654008441
460,460.0,3.2,What is the scope of global variables?,File scope.,it is accessible by all functions within a program,4.0,5.0,4.5,0.8708670140000001,0.025152721,0.991183802,0.99984604,0.8630033161193886,0.14442890992972127,0.9911141558375274,0.9998460282449341
461,461.0,3.2,What is the scope of global variables?,File scope.,"variables accessible anywhere in the program, as long as they are public.",4.0,5.0,4.5,0.8990435,0.20811575699999998,0.990504545,0.999818495,0.8928956408071215,0.3050057382444748,0.9904295328460442,0.9998184811418339
462,462.0,3.2,What is the scope of global variables?,File scope.,They can be referenced by any function following their declaration or definition inside the source file.,5.0,5.0,5.0,0.91572535,0.380069286,0.993307134,0.999843467,0.9105933507554825,0.45592011367246565,0.9932542617263914,0.9998434550484819
463,463.0,3.2,What is the scope of global variables?,File scope.,"globally, anywhere in the program.",4.0,5.0,4.5,0.9057112340000001,0.20364148899999998,0.988788551,0.999865351,0.8999694139404866,0.3010789135689693,0.9886999828441343,0.9998653407193565
464,464.0,3.2,What is the scope of global variables?,File scope.,Global variables have a file scope,5.0,5.0,5.0,0.921528637,0.512834191,0.9968813390000001,0.999866405,0.9167500354201388,0.5724407389446085,0.996856702215447,0.999866394799831
465,465.0,3.2,What is the scope of global variables?,File scope.,The entire program.,4.0,5.0,4.5,0.8975679870000001,0.28231805600000004,0.990039165,0.999876172,0.8913302747896212,0.3701291100881898,0.9899604764391519,0.9998761625455553
466,466.0,3.2,What is the scope of global variables?,File scope.,throughout the execution of the program,4.0,5.0,4.5,0.859981179,0.066064745,0.9828885820000001,0.999817449,0.851454575999095,0.18033519568821227,0.982753405294785,0.9998174350619704
467,467.0,3.2,What is the scope of global variables?,File scope.,"If a variable is declared global, any function or class can use that variable.",4.0,5.0,4.5,0.906011343,0.17854636899999998,0.9905920690000001,0.9998753659999999,0.9002877984143244,0.27905427480107015,0.9905177482677574,0.999875356484016
468,468.0,3.2,What is the scope of global variables?,File scope.,The entire program or file.,5.0,5.0,5.0,0.93804574,0.468988478,0.9913938729999999,0.9999048759999999,0.9342729659153299,0.5339597119423074,0.991325886355496,0.9999048687371467
469,469.0,3.2,What is the scope of global variables?,File scope.,throught the programm,4.0,5.0,4.5,0.8217411640000001,0.04491974,0.992278135,0.999648607,0.810885892436362,0.16177736066409515,0.9922171338445834,0.9996485801706424
470,470.0,3.2,What is the scope of global variables?,File scope.,the whole code,4.0,5.0,4.5,0.8355895879999999,0.084451057,0.978511382,0.999801924,0.8255776317334975,0.19647187405730915,0.9783416263093341,0.9998019088766145
471,471.0,3.2,What is the scope of global variables?,File scope.,File scope,5.0,5.0,5.0,0.9428582190000001,0.8349677320000001,0.997979979,0.9999465120000001,0.9393785062165905,0.8551600435563914,0.9979640212469226,0.9999465079161148
472,472.0,3.2,What is the scope of global variables?,File scope.,can be referenced by any function that follows their declarations or definitions in the source file,5.0,5.0,5.0,0.890284836,0.23507651699999998,0.990961385,0.999829656,0.8836036081484443,0.3286677490221888,0.9908899817886818,0.9998296429939922
473,473.0,3.2,What is the scope of global variables?,File scope.,global variables have program scope (accessible anywhere in program),4.0,5.0,4.5,0.867018402,0.23227690199999998,0.991944424,0.999890452,0.8589203385791407,0.3262106773260107,0.9918807865958825,0.9998904436358538
474,474.0,3.2,What is the scope of global variables?,File scope.,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,4.0,5.0,4.5,0.9086052179999999,0.297587723,0.9863867759999999,0.99982029,0.9030396303389793,0.3835304765602813,0.9862792343124744,0.9998202762788847
475,475.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.,4.0,5.0,4.5,0.9852023129999999,0.552332461,0.994903062,0.999966494,0.984301191268796,0.6071062487611365,0.9948627972314387,0.9999664914417691
476,476.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.   ",4.0,5.0,4.5,0.984175384,0.505520463,0.9806123459999999,0.9999465240000001,0.9832117262766304,0.5660218727568129,0.9804591874955692,0.9999465199170311
477,477.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,5.0,5.0,5.0,0.981545925,0.559001386,0.9928549390000001,0.999948864,0.9804221434244222,0.6129592059932681,0.9927984944783047,0.9999488600956935
478,478.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.9698461290000001,0.28576076,0.993039418,0.9999431609999999,0.9680098752369612,0.3731505864543041,0.9929844308247032,0.9999431566602611
479,479.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.",5.0,5.0,5.0,0.98562336,0.63756609,0.995381393,0.9999579259999999,0.9847478783976593,0.6819112263664293,0.9953449069485841,0.99995792278759
480,480.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,0.0,4.0,2.0,0.977657676,0.34819239399999996,0.9903671759999999,0.9999636540000001,0.9762971151446447,0.42794347792243387,0.9902910786590176,0.9999636512249311
481,481.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It expands a small function out... making your code longer, but also makes it run faster.",4.0,4.0,4.0,0.977202833,0.492820472,0.991940167,0.999951006,0.9758145739704918,0.5548757728724302,0.9918764959664524,0.9999510022592383
482,482.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,the function is not treated as a separate unit like other functions,4.0,3.0,3.5,0.9728878740000001,0.38975691799999995,0.9913959529999999,0.99996113,0.9712368507071207,0.4644224278800223,0.991327982787071,0.9999611270322201
483,483.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the program compiles,it will copy the function inplace, avoiding a function call.",5.0,5.0,5.0,0.985708833,0.64461726,0.988582748,0.99996367,0.9848385563717699,0.6880996595016782,0.9884925540424934,0.9999636672261526
484,484.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",5.0,5.0,5.0,0.976898849,0.44709342700000004,0.993061405,0.999936237,0.975492078524187,0.5147436018348551,0.99300659151751,0.999936232131604
485,485.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.9698461290000001,0.28576076,0.993039418,0.9999431609999999,0.9680098752369612,0.3731505864543041,0.9929844308247032,0.9999431566602611
486,486.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Ignores the inline qualifier and typically does so for all but the smallest functions.,2.0,4.0,3.0,0.962736487,0.23970994399999998,0.9947645909999999,0.9999399170000001,0.9604672836207624,0.3327342590023137,0.9947232323388372,0.9999399124125773
487,487.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,5.0,4.0,4.5,0.9731169340000001,0.465298712,0.991789053,0.999965117,0.9714798595724907,0.5307214025304346,0.9917241881967349,0.9999651143366332
488,488.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it treats them as the same function,2.0,2.0,2.0,0.9555079340000001,0.406395495,0.98963945,0.9999490740000001,0.9527985397859746,0.4790252131242004,0.9895576037723398,0.9999490701117274
489,489.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Inline functions are copied in place, instead of being referenced.",5.0,5.0,5.0,0.972560823,0.420891762,0.988402753,0.9999216009999999,0.9708898835700033,0.49174780796168344,0.9883111371187782,0.9999215950141244
490,490.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",5.0,5.0,5.0,0.99014163,0.760858774,0.990187453,0.999970838,0.989541293512193,0.7901185920942978,0.9901099358840468,0.9999708357734397
491,491.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the function's coding which eliminates calling the function,5.0,5.0,5.0,0.979738653,0.652332902,0.996336505,0.999951135,0.9785048155708691,0.6948712640173145,0.9963075641381923,0.9999511312690875
492,492.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
493,493.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,It generates a copy of the function's code by by inserting it in the program.,4.0,5.0,4.5,0.980496168,0.606202006,0.998124641,0.999966745,0.9793084602956168,0.6543846546510501,0.9981098260471587,0.9999667424609334
494,494.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",5.0,5.0,5.0,0.9910935759999999,0.731961608,0.9965920559999999,0.99997235,0.9905512093305524,0.7647571017899669,0.9965651339388663,0.999972347888883
495,495.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2.0,2.0,2.0,0.9698461290000001,0.28576076,0.993039418,0.9999431609999999,0.9680098752369612,0.3731505864543041,0.9929844308247032,0.9999431566602611
496,496.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Multiple copies of the function code are inserted into the program, making it bigger.",4.0,5.0,4.5,0.982772172,0.591700375,0.9928875340000001,0.999954439,0.9817230641095409,0.6416573521189096,0.9928313469721434,0.9999544355213527
497,497.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,compiler ignores inline qualifier,2.0,3.0,2.5,0.848833561,0.05365755,0.986641082,0.9997046270000001,0.8396281113096792,0.1694460671246555,0.9865355492779031,0.9997046044478495
498,498.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It generates a copy of the function, if it is needed again.",2.0,5.0,3.5,0.983097911,0.539953172,0.995121998,0.999973096,0.9820686393509481,0.5962416117947291,0.9950834627810957,0.9999730939458412
499,499.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",5.0,5.0,5.0,0.964345276,0.554109514,0.9869970440000001,0.999942219,0.9621740416296232,0.6086658727197551,0.9868943233049569,0.9999422145883382
500,500.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,5.0,5.0,5.0,0.98419857,0.688706994,0.996030194,0.999960795,0.9832363242140811,0.7267948506273937,0.9959988333438917,0.9999607920066423
501,501.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",5.0,5.0,5.0,0.9872851970000001,0.635743022,0.992408677,0.9999785859999999,0.9865109148239224,0.6803112175141378,0.9923487070997051,0.9999785843650105
502,502.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Expands the function into the program,4.0,4.0,4.0,0.962082982,0.28793534600000004,0.993024992,0.999947666,0.9597739827015117,0.3750591037724015,0.9929698908622516,0.9999476620042244
503,503.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the functions code in place to avoid a function call,5.0,5.0,5.0,0.989012122,0.758969307,0.997012415,0.999964376,0.9883430028568787,0.7884603084065184,0.9969888136890596,0.9999643732800568
504,504.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,the function call will be replaced by the code that was defined in the inline function,5.0,5.0,5.0,0.977815986,0.575510085,0.99166751,0.999969441,0.9764650656094869,0.6274480042936141,0.9916016850318741,0.9999694386667767
505,505.0,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller. ",4.0,5.0,4.5,0.984175384,0.505520463,0.9806123459999999,0.9999465240000001,0.9832117262766304,0.5660218727568129,0.9804591874955692,0.9999465199170311
506,506.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.,5.0,5.0,5.0,0.965883017,0.409939796,0.981182845,0.9999659129999999,0.963805425090912,0.4821358557196414,0.9810341933210789,0.9999659103974089
507,507.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,because you can't change the original and passing by reference limits memory needed for the program.,5.0,4.0,4.5,0.961301625,0.267508268,0.989932701,0.999948638,0.9589450440914582,0.3571313547106834,0.9898531713953094,0.9999486340784379
508,508.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,5.0,5.0,5.0,0.970036507,0.41699013100000004,0.992724088,0.999984158,0.9682118465185965,0.48832355602024474,0.992666609782146,0.9999841567904407
509,509.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",5.0,5.0,5.0,0.971898556,0.42120510299999997,0.986302493,0.999957859,0.9701872870789443,0.49202281052537594,0.986194285493999,0.9999578557824745
510,510.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",5.0,5.0,5.0,0.966037989,0.41419184200000003,0.9858224,0.99998277,0.9639698342845038,0.4858676480830368,0.9857103998574135,0.999982768684465
511,511.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,You do not alter the original value of the variable that was passed.,3.0,3.0,3.0,0.957742393,0.11525154900000001,0.98954741,0.99994748,0.9551690686705709,0.22350381134924358,0.9894648366751496,0.999947475990023
512,512.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Don't have to make copies of stuff.,4.0,5.0,4.5,0.9485432509999999,0.46434676700000005,0.9966062790000001,0.9999780640000001,0.9454097346105124,0.5298859315403813,0.9965794692976598,0.9999780623251552
513,513.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,you do not use unessesary memory space to copy variables between functions,5.0,5.0,5.0,0.956391335,0.30500772600000003,0.987553923,0.999980097,0.9537357364797521,0.39004261460671136,0.9874556015352498,0.9999800954803776
514,514.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It elimitates the need to copy large amonts of data,5.0,5.0,5.0,0.959567189,0.49282029299999996,0.988769256,0.9999807690000001,0.9571049876677404,0.5548756157737457,0.9886805354175775,0.999980767531686
515,515.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The function can change the data stored in a variable passed by reference directly.,3.0,4.0,3.5,0.962914348,0.342627555,0.995027503,0.999973817,0.960655975665657,0.4230595176633669,0.9949882212899072,0.9999738150008907
516,516.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data.,3.0,4.0,3.5,0.9689599870000001,0.514252842,0.9950165559999999,0.9999675729999999,0.9670697706269173,0.573685812720415,0.9949771878108443,0.9999675705241523
517,517.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data directly.,3.0,4.0,3.5,0.9709392790000001,0.494198531,0.9948722409999999,0.999978432,0.9691695938311251,0.556085221230352,0.9948317327518373,0.9999784303532525
518,518.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,3.0,3.0,3.0,0.9674927,0.203985527,0.990797237,0.999906703,0.9655131315409047,0.30138085724058483,0.990724537053028,0.9999066958766408
519,519.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,you don't make another copy and waste memory,5.0,5.0,5.0,0.935653925,0.20513938399999998,0.9876123179999999,0.9999674209999999,0.9317354986607905,0.30239353554675796,0.9875144578438158,0.9999674185125468
520,520.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",5.0,5.0,5.0,0.9675577879999999,0.450163186,0.993478036,0.999978955,0.9655821831475979,0.517437764408276,0.993426513817265,0.9999789533931843
521,521.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.",5.0,5.0,5.0,0.974163234,0.482983857,0.9893867820000001,0.999979603,0.9725898751834072,0.5462427042888212,0.9893029397467765,0.99997960144266
522,522.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Gives access to the caller data directly, also it allows for modifying the data.",3.0,4.0,3.5,0.9717416170000001,0.425645381,0.989271171,0.999977995,0.9700207911026835,0.49591980400375146,0.9891864154435034,0.9999779933198868
523,523.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"less overhead overall, and you modify the variable directly.",4.0,3.0,3.5,0.961434543,0.10388269300000001,0.991232778,0.999992222,0.9590860562820074,0.21352597714863952,0.9911635187379184,0.9999922214061386
524,524.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The original variable being referenced can be modified directly by the called function.,3.0,3.0,3.0,0.960809708,0.31179842399999996,0.99735562,0.9999746759999999,0.9584231712545324,0.3960024454595582,0.9973347299384202,0.9999746740664764
525,525.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,gives function ability to access and modify the caller's argument data directly,3.0,4.0,3.5,0.962823153,0.369205624,0.996253504,0.9999768529999999,0.9605592272439447,0.4463856611077219,0.9962239074472549,0.9999768512326935
526,526.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives the called function the ability to access and modify the caller's argument data directly.,3.0,3.0,3.0,0.970522523,0.45241770200000003,0.992989589,0.999957584,0.968727459007515,0.5194164319937049,0.9929342081857867,0.9999575807614779
527,527.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Less overhead than passed by value, especially when using large numbers.",4.0,3.0,3.5,0.966153622,0.314480394,0.990917005,0.999983385,0.9640925088856096,0.39835626645887373,0.9908452511957515,0.999983383731421
528,528.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ",5.0,5.0,5.0,0.969253719,0.38961312200000003,0.994087341,0.99998354,0.9673813897661947,0.46429622585523556,0.9940406322022438,0.9999835387432555
529,529.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,4.0,4.0,4.0,0.97716707,0.536688209,0.995779126,0.999976964,0.9757766331425333,0.593376129156449,0.9957457819580012,0.9999769622411686
530,530.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Functions can directly modify arguments that are passed by reference.,3.0,4.0,3.5,0.9526196720000001,0.404003173,0.99395126,0.99997796,0.9497343938350835,0.4769256006152146,0.9939034761901543,0.9999779583172147
531,531.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,5.0,5.0,5.0,0.9711406229999999,0.489198566,0.9944848279999999,0.9999889470000001,0.969383198899618,0.5516970205372635,0.9944412592683113,0.9999889461560879
532,532.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"it takes less memory, thus it would make the program faster",4.0,4.0,4.0,0.956113696,0.13898322,0.989310737,0.9999558890000001,0.9534411903417426,0.24433182417140298,0.9892262940068175,0.9999558856320624
533,533.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,You are able to modify the variable that is referenced directly.,3.0,4.0,3.5,0.9450261590000001,0.20455683800000002,0.9920709520000001,0.9999876320000001,0.9416784653521448,0.3018822662156815,0.9920083141412246,0.9999876310556858
534,534.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",3.0,4.0,3.5,0.9550490979999999,0.11941534300000001,0.985885188,0.999947714,0.9523117624536124,0.2271581496729474,0.9857736838697818,0.9999477100078894
535,535.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",5.0,5.0,5.0,0.964967728,0.446305424,0.9868136359999999,0.999875862,0.962834398541643,0.5140520139315886,0.986709466419239,0.9998758525218864
536,536.0,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",3.0,3.0,3.0,0.965651035,0.32874018,0.991175021,0.9999869,0.9635593162870779,0.41087131462590964,0.991105305469422,0.9999868989997963
537,537.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.984477341,0.5817011,0.996773682,0.999983318,0.983532071286499,0.6328815255910474,0.9967481947471483,0.9999833167263056
538,538.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.,4.0,2.0,3.0,0.97478646,0.49961283799999995,0.989857152,0.99993309,0.9732510532290244,0.5608370676392757,0.9897770255736491,0.999933084891326
539,539.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",5.0,5.0,5.0,0.9842992429999999,0.6549327970000001,0.9939078709999999,0.9999600479999999,0.9833431278092237,0.6971530521980231,0.9938597444259213,0.9999600449496077
540,540.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",5.0,5.0,5.0,0.978524745,0.549878299,0.9937475640000001,0.999941215,0.9772169852829817,0.604952362606063,0.9936981710333829,0.9999412105116813
541,541.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9857621190000001,0.597228468,0.995081368,0.9999568059999999,0.9848950872824489,0.646509062387693,0.995042511812399,0.9999568027020763
542,542.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the type they are initilized with (int, char, etc.)",2.0,4.0,3.0,0.9689619540000001,0.25675863,0.985432045,0.999957447,0.9670718574095865,0.3476969748856145,0.9853169611326886,0.9999574437510178
543,543.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It selects the proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.987504721,0.5650089979999999,0.9961081759999999,0.999969668,0.9867438069838868,0.6182317643296178,0.9960774313857547,0.9999696656841085
544,544.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded functions must have the same return type but different input parameters,1.0,5.0,3.0,0.957853615,0.36032438299999997,0.990604535,0.999963068,0.9552870636588893,0.4385910729632676,0.9905303127466096,0.9999630651801891
545,545.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It examines the names, types, and order of arguments on each function.",5.0,5.0,5.0,0.9764738079999999,0.376390189,0.994290162,0.9999684409999999,0.9750411541762181,0.45269116786877706,0.9942450554466943,0.9999684385904254
546,546.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",unique function signatures,5.0,5.0,5.0,0.9261667729999999,0.538312554,0.986481768,0.9999415070000001,0.9216706159090564,0.5948017295066144,0.9863749767298614,0.9999415025339761
547,547.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Is based on number, types, and order of arguments in the function call.",5.0,5.0,5.0,0.983974397,0.467555106,0.993240992,0.99995875,0.9829984999480521,0.5327017183355814,0.9931875972181087,0.9999587468505037
548,548.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9841789009999999,0.5754246120000001,0.994689135,0.999947932,0.9832154574482861,0.6273729892329406,0.994647180251858,0.9999479280245339
549,549.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
550,550.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","they have to have same return type, but different input parameters",1.0,5.0,3.0,0.968394876,0.14893525800000001,0.9899498290000001,0.9999540659999999,0.9664702465593451,0.25306619332183566,0.9898704347030091,0.9999540624928734
551,551.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",Overloaded functions are differentiated by their parameters.,4.0,5.0,4.5,0.956828177,0.496676385,0.991292478,0.9999214,0.9541991804628391,0.5582599005811419,0.9912236903557178,0.9999213939987778
552,552.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the right function to execute from the number, types and order of arguments in the function call.",5.0,5.0,5.0,0.98694247,0.5752060410000001,0.9969096129999999,0.9999772379999999,0.9861473170792194,0.6271811612074066,0.9968851995742686,0.9999772362620888
553,553.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",it creates a set of candidate functions then a set of viable functions,3.0,3.0,3.0,0.9661940929999999,0.344819635,0.989671085,0.999908823,0.9641354444125039,0.42498338852552403,0.9895894886823747,0.9999088160385058
554,554.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",their function signature.,5.0,5.0,5.0,0.953746378,0.7542377709999999,0.988545508,0.999966178,0.9509297118594677,0.7843076934272988,0.9884550198541039,0.999966175417642
555,555.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The number and type of its parameters.,5.0,5.0,5.0,0.9635903840000001,0.21230433899999998,0.9880878540000001,0.999960952,0.9613731796353997,0.30868183166422036,0.9879937504810328,0.9999609490186295
556,556.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by their function signature,5.0,5.0,5.0,0.9480215909999999,0.65424341,0.9851424940000001,0.999975044,0.9448563075402736,0.6965480142605163,0.985025122738963,0.9999750420945738
557,557.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They have the same name, just different parameters.",3.0,4.0,3.5,0.967035174,0.221742317,0.994279597,0.9999606040000001,0.9650277439824604,0.31696503796685527,0.9942344069853534,0.9999606009920593
558,558.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They are differntiated by number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9854733940000001,0.441897243,0.992521306,0.999975864,0.9845887800500472,0.510183190265931,0.9924622258457877,0.999975862157182
559,559.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","it looks at the number, types, and order of arguments in the function call ",5.0,5.0,5.0,0.9809265140000001,0.311187595,0.99124589,0.99997562,0.979765012697505,0.39546635365868393,0.9911767343200387,0.9999756181385523
560,560.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The compiler differentiates overloaded functions by their signature.,5.0,5.0,5.0,0.963250458,0.660758495,0.990631623,0.9998257140000001,0.9610125534607303,0.7022659543886033,0.9905576147362738,0.999825700693015
561,561.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, types, and order of their arguments",5.0,5.0,5.0,0.965074122,0.09986130900000001,0.992653617,0.9999440409999999,0.9629472715234912,0.20999662443197548,0.9925955820756477,0.9999440367274505
562,562.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5.0,5.0,5.0,0.9841789009999999,0.5754246120000001,0.994689135,0.999947932,0.9832154574482861,0.6273729892329406,0.994647180251858,0.9999479280245339
563,563.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",paremeters,4.0,5.0,4.5,0.526004195,0.076904245,0.9547590290000001,0.9994984490000001,0.4971396893252279,0.18984844256348699,0.9544016345747979,0.9994984107058645
564,564.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, and the types and order of the  parameters.",5.0,5.0,5.0,0.969429433,0.203704432,0.9927724520000001,0.9999503470000001,0.9675678040671183,0.3011341552589062,0.9927153558478622,0.9999503432089226
565,565.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by the number and type of arguments,5.0,5.0,5.0,0.958664715,0.068799213,0.983989936,0.999931177,0.9561475565022559,0.18273509136204766,0.9838634597663061,0.9999311717452658
566,566.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","by their signature (return type, argument list)",3.0,5.0,4.0,0.957341969,0.315768212,0.989877867,0.999917377,0.9547442604024015,0.39948651513864886,0.9897979042179156,0.999917370691616
567,567.0,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,1.0,5.0,3.0,0.980564654,0.49150395399999997,0.99246477,0.999960827,0.9793811168273279,0.5537203357443575,0.9924052432229417,0.9999608240090855
568,568.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",5.0,5.0,5.0,0.984882712,0.506578207,0.990043322,0.999980051,0.9839621278077766,0.5669501978458705,0.9899646662786022,0.9999800494768655
569,569.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",badly designed algorithyms. using recursion for a non recursive problem.,2.0,3.0,2.5,0.950034261,0.337335527,0.98783564,0.9999652,0.9469915413351926,0.4184149889641773,0.9877395440419765,0.9999651973429703
570,570.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5.0,5.0,5.0,0.990673602,0.6766940359999999,0.994276341,0.9999747459999999,0.9901056605432266,0.7162517227011694,0.9942311252636188,0.9999747440718211
571,571.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",5.0,5.0,5.0,0.990666032,0.625678718,0.99406095,0.999973903,0.9900976295595942,0.6714783185261942,0.9940140327187373,0.9999739010074568
572,572.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.,5.0,5.0,5.0,0.9867225890000001,0.59766382,0.9948220729999999,0.9999645690000001,0.9859140461793399,0.646891147451916,0.9947811684348898,0.9999645662947928
573,573.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Not having a base case that returns a base value.,3.0,5.0,4.0,0.971782088,0.306063265,0.9905334640000001,0.999962989,0.9700637266295777,0.39096900448571686,0.9904586803002342,0.9999629861741574
574,574.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,5.0,5.0,5.0,0.9835192559999999,0.506062746,0.989640312,0.99996516,0.9825156426268553,0.5664978054156316,0.9895584725819637,0.9999651573399163
575,575.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",no base case no change in values.,4.0,5.0,4.5,0.943380714,0.332530886,0.9869962529999999,0.999901099,0.9399328191350897,0.41419821365350185,0.9868935260562183,0.9999010914487675
576,576.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5.0,5.0,5.0,0.985931039,0.582293391,0.993827336,0.999975763,0.9850742938551298,0.6334013475851434,0.99377857321588,0.9999757611494705
577,577.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Omitting the base case or incorrectly calling the recursive step.,5.0,5.0,5.0,0.9734091159999999,0.568945706,0.992567326,0.999965043,0.9717898343227809,0.6216868014696952,0.9925086093943828,0.9999650403309831
578,578.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",The recursive problem cannot be reduced to reach the base case.,4.0,5.0,4.5,0.980950117,0.39758101100000004,0.99185342,0.9999841999999999,0.9797900530286381,0.4712892140126031,0.9917890636828806,0.9999841987936474
579,579.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,5.0,5.0,0.9849219920000001,0.55939126,0.99581978,0.999987025,0.9840037998073914,0.6133013774598718,0.9957867571162932,0.9999870240093404
580,580.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Not having the proper case to leave the recursion,3.0,5.0,4.0,0.9701906440000001,0.297338158,0.991359716,0.9999541759999999,0.9683753698639277,0.3833114467658786,0.9912914595221766,0.999954172501272
581,581.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","no base case, or the recursive calls do not converge to the base case",5.0,5.0,5.0,0.979481816,0.36102849299999995,0.99256539,0.999979026,0.978232338193959,0.43920903248698634,0.9925066581003784,0.9999790243986052
582,582.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5.0,5.0,5.0,0.9862682220000001,0.598273873,0.993405636,0.9999831370000001,0.9854320099917404,0.6474265581992754,0.993353541872061,0.9999831357124861
583,583.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",5.0,5.0,5.0,0.98894006,0.6019396779999999,0.9910970990000001,0.999982065,0.9882665525606407,0.6506438383285816,0.9910267679015466,0.9999820636306372
584,584.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included."," not creating a base case, or in the case where the base case will never be met.",5.0,5.0,5.0,0.981819689,0.500654697,0.993574983,0.9999676820000001,0.9807125785899646,0.5617514513171415,0.9935242266787524,0.9999676795324747
585,585.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",improper handling of cases such that not all possible values are able to be handled.,2.0,5.0,3.5,0.974651396,0.258663952,0.9915471509999999,0.999976286,0.9731077643554003,0.34936917365519726,0.9914803752203712,0.9999762841894023
586,586.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",There is no base case. The recursion step doesn't reduce the problem during each recursive call.,4.0,5.0,4.5,0.979087591,0.531745613,0.9922396379999999,0.999981982,0.9778141064208408,0.5890382781529206,0.9921783327261507,0.9999819806243001
587,587.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","no base case, as in a single return that does not include calling the function again.  a static value to end at.",2.0,5.0,3.5,0.981314778,0.45383495100000004,0.992000192,0.999878752,0.9801769204688486,0.5206602753094239,0.9919369951516854,0.9998787427425421
588,588.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5.0,5.0,5.0,0.987367511,0.624608874,0.995555265,0.99998432,0.9865982414271881,0.6705393739171227,0.9955201525018508,0.9999843188028098
589,589.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",omitting the base case or writing the recursive call so that it does not converge upon the base case.,5.0,5.0,5.0,0.9821959140000001,0.444332093,0.992021378,0.9999475240000001,0.9811117142329133,0.5123201273160036,0.9919583485167557,0.9999475199933826
590,590.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5.0,5.0,5.0,0.9824002390000001,0.560276985,0.996430178,0.99998735,0.9813284818327417,0.6140787307131218,0.9964019771357487,0.9999873490341545
591,591.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion may occur if no base case is defined or if the call is not varied.,4.0,5.0,4.5,0.989528298,0.731747687,0.993122389,0.9999813059999999,0.9888906119727923,0.7645693548196449,0.9930680572786469,0.9999813045726863
592,592.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Not having a base case, or building a recursion process that doesn't converge on the base case.",5.0,5.0,5.0,0.982646227,0.43270015700000003,0.991507315,0.999983134,0.98158944954764,0.5021114019314937,0.9914402245241125,0.9999831327122569
593,593.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorerectly ",5.0,5.0,5.0,0.960610747,0.5080701710000001,0.996599662,0.9999841420000001,0.9582120943014945,0.5682596145035599,0.9965728000247119,0.9999841407892193
594,594.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",no base case or if the programmar does not define the base case as the simplest case and it never gets reached,5.0,5.0,5.0,0.9822514059999999,0.517765522,0.9910534870000001,0.99997124,0.9811705854804338,0.5767687032627684,0.9909828113756594,0.9999712378041331
595,595.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",No easily reached base case and no base case at all,5.0,5.0,5.0,0.959929645,0.2535851,0.990646645,0.9999742420000001,0.9574895158320054,0.3449117380798495,0.9905727554070038,0.9999742400333401
596,596.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",function is never allowed to reach the 'base case',5.0,5.0,5.0,0.9675301909999999,0.20883114600000002,0.99041704,0.999963907,0.9655529055973595,0.3056335967406099,0.9903413365744271,0.999963904244248
597,597.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","it has no base case, or the base case is never met",5.0,5.0,5.0,0.978355706,0.437571704,0.990080717,0.999934167,0.9770376524636624,0.5063868970443222,0.9900023566914601,0.9999341619735566
598,598.0,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1.0,5.0,3.0,0.979508281,0.408362716,0.9890391009999999,0.999973902,0.9782604148097891,0.4807517373210014,0.9889525121379305,0.9999739000073805
599,599.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ",5.0,5.0,5.0,0.981188417,0.7690424920000001,0.997590832,0.999982413,0.9800428645741617,0.7973010017710938,0.9975718000651509,0.9999824116572075
600,600.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",1.0,3.0,2.0,0.9485176209999999,0.33904567399999996,0.997433205,0.999982432,0.9453825438429431,0.419915893120643,0.9974129278440645,0.9999824306586583
601,601.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,5.0,5.0,5.0,0.974388003,0.720869482,0.991640429,0.9999836059999999,0.9728283317435238,0.75502213864502,0.9915743900975086,0.9999836047482947
602,602.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,5.0,5.0,5.0,0.938655734,0.45860627299999995,0.988935743,0.9999288609999999,0.9349201061834802,0.5248478083236247,0.9888483376308533,0.9999288555684357
603,603.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",5.0,5.0,5.0,0.974632382,0.650595605,0.9959581240000001,0.999979955,0.9730875924765643,0.6933465317642885,0.9959261940056204,0.9999799534695358
604,604.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",5.0,5.0,5.0,0.9668264990000001,0.616787791,0.994649364,0.99998234,0.9648063614845075,0.6636752294998512,0.9946070950690858,0.9999823386516339
605,605.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",3.0,5.0,4.0,0.966322184,0.40786746100000004,0.991875182,0.9999446470000001,0.9642713356574795,0.4803170786115393,0.9918109975982331,0.9999446427737196
606,606.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do iterativly you can do recursively,2.0,4.0,3.0,0.881190777,0.299165785,0.9779121709999999,0.999968891,0.8739557562354202,0.38491545680757033,0.977737681664892,0.9999688886247834
607,607.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are repetative and both have a end test.,4.0,5.0,4.5,0.9545918109999999,0.59522295,0.9891386520000001,0.999938655,0.9518266284493409,0.6447489269712249,0.9890528495704858,0.9999386503162216
608,608.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",3.0,4.0,3.5,0.960237205,0.407710135,0.9944167079999999,0.999980635,0.9578158050428374,0.4801790020325551,0.9943726011342325,0.9999806335214546
609,609.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5.0,5.0,5.0,0.9785366059999999,0.740942538,0.990194035,0.999972676,0.9772295685718673,0.7726391816146416,0.9901165698805018,0.9999726739137736
610,610.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",5.0,5.0,5.0,0.980749786,0.7322089079999999,0.9920123540000001,0.99997831,0.9795775226479149,0.7649741437155405,0.991949253229,0.9999783083439376
611,611.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
612,612.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do recursively you can do iteratively,2.0,4.0,3.0,0.8840813040000001,0.311864823,0.9779121709999999,0.999968891,0.8770223051160243,0.3960607202950462,0.977737681664892,0.9999688886247834
613,613.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",2.0,5.0,3.5,0.968032241,0.527900815,0.993963218,0.999983394,0.9660855284946746,0.5856639054826349,0.9939155286559104,0.9999833927321083
614,614.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",5.0,5.0,5.0,0.9780765770000001,0.622647643,0.990589507,0.999982576,0.9767415255904335,0.6688181068215516,0.9905151660284809,0.9999825746696528
615,615.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on control statement, involve repetition, and involve a termination test within loops",5.0,5.0,5.0,0.971035957,0.502648354,0.9945531440000001,0.999975892,0.9692721591462661,0.5635011769710572,0.9945101149507499,0.99997589015932
616,616.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are methods of repeating the same task.,1.0,3.0,2.0,0.952400386,0.31503576,0.9837800640000001,0.999970825,0.9495017541683957,0.39884368136400167,0.9836519298203968,0.9999708227724472
617,617.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,5.0,5.0,5.0,0.9695785640000001,0.61074239,0.988935262,0.9999830129999999,0.9677260165664701,0.6583695057881457,0.9888478528310517,0.9999830117030183
618,618.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"based on a control statement, involve repetition, involve a termination test.",5.0,5.0,5.0,0.9612391,0.46151784100000004,0.990744636,0.999963426,0.9588787115615216,0.5274031351540275,0.9906715205158778,0.9999634232075229
619,619.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5.0,5.0,5.0,0.978960574,0.743908465,0.990194035,0.999974177,0.9776793545782987,0.7752422164192951,0.9901165698805018,0.9999741750283772
620,620.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",5.0,5.0,5.0,0.9781963229999999,0.736532629,0.992815729,0.999972902,0.9768685636572829,0.7687688413762085,0.9927589747273177,0.999972899931029
621,621.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",5.0,5.0,5.0,0.982472777,0.75536859,0.991549117,0.999983945,0.9814054371155332,0.7853001525184241,0.9914823567513696,0.9999839437741779
622,622.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",5.0,5.0,5.0,0.980057538,0.657611728,0.99123024,0.999979202,0.978843119430266,0.6995042060302872,0.9911609606882371,0.999979200412043
623,623.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.",5.0,5.0,5.0,0.985986173,0.782342196,0.990108726,0.999983958,0.9851327853018392,0.8089734375402785,0.990030586956836,0.9999839567751704
624,624.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",5.0,5.0,5.0,0.9812207820000001,0.75229007,0.9914926690000001,0.999980347,0.9800772004771028,0.7825983008859253,0.9914254628237057,0.9999803454994655
625,625.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).,3.0,4.0,3.5,0.9599769709999999,0.333643109,0.9851590729999999,0.999981995,0.9575397238018057,0.41517435203436426,0.9850418327096747,0.9999819936252926
626,626.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly,5.0,5.0,5.0,0.9712312820000001,0.6967813970000001,0.992764037,0.9999645359999999,0.9694793786810099,0.7338813204008573,0.9927068743710817,0.999964533292273
627,627.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"repetition, termination test, eventually terminate, occur infinately",5.0,5.0,5.0,0.95374012,0.466334999,0.992582842,0.999923205,0.9509230727715456,0.5316308959632164,0.9925242479676119,0.9999231991365921
628,628.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,both need to have some kind of base case to tell when the loop needs to stop.,3.0,3.0,3.0,0.9561718109999999,0.25977176399999996,0.9808159209999999,0.999932853,0.9535028443197875,0.35034144073830914,0.9806643706964655,0.9999328478732307
629,629.0,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",2.0,5.0,3.5,0.9638451929999999,0.391814351,0.990368513,0.999982105,0.9616435055149772,0.46622812630322796,0.9902924262210444,0.9999821036336912
630,630.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user,3.0,5.0,4.0,0.9407855270000001,0.27180755100000004,0.9854485629999999,0.999982625,0.9371795953147246,0.36090460445150835,0.9853336096215128,0.9999826236733941
631,631.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,3.0,5.0,4.0,0.9784595970000001,0.533420026,0.9889110590000001,0.9999365379999999,0.9771478700225211,0.5905078204971403,0.988823458632298,0.9999365331545856
632,632.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,5.0,5.0,5.0,0.9866883759999999,0.730401814,0.9920490409999999,0.999967024,0.9858777497403679,0.7633881543849601,0.9919862300488023,0.9999670214822355
633,633.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Pass the length along with the array or use a vector.,2.0,4.0,3.0,0.979036272,0.534325659,0.993986137,0.9999163040000001,0.9777596622928311,0.5913026459325751,0.9939386287113267,0.999916297609691
634,634.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",5.0,5.0,5.0,0.98102957,0.562035561,0.984451705,0.9999346090000001,0.9798743444081028,0.6156221384013854,0.9843288766470364,0.9999346040073039
635,635.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",5.0,5.0,5.0,0.9571256640000001,0.45992177700000003,0.9863897840000001,0.9999143640000001,0.9545147832670491,0.5260023555183673,0.9862822660750599,0.9999143574615692
636,636.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",5.0,5.0,5.0,0.9590837959999999,0.44934874799999996,0.971360043,0.9999137220000001,0.9565921579093462,0.5167229759255411,0.9711337931927216,0.9999137154125516
637,637.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",statically and dynamically,2.0,3.0,2.5,0.835159421,-0.006020246,0.984832015,0.99990185,0.825121269232015,0.11707007133884613,0.9847121910183141,0.9999018425061074
638,638.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Explicitly int array[10]; or by variable const int size = 10; int array[size];,3.0,5.0,4.0,0.938376963,0.368294925,0.985624898,0.999834949,0.9346243591110622,0.4455863895162217,0.9855113376319761,0.9998349363981204
639,639.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ",5.0,5.0,5.0,0.983638883,0.595199108,0.9836386640000001,0.999913345,0.9826425544470667,0.6447280021285661,0.9835094127892942,0.999913338383767
640,640.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Specify an arrays size with a constant variable. And setting array elements with calculations.,2.0,5.0,3.5,0.972521842,0.516768158,0.9894324320000001,0.999948543,0.9708485287783286,0.5758933704562264,0.9893489503724473,0.9999485390711847
641,641.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","statically, using {} and dynamically, using []",4.0,4.0,4.0,0.934247136,0.337324411,0.9909092270000001,0.9999425409999999,0.930243041668278,0.41840523304810495,0.9908374117511412,0.9999425366129232
642,642.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","define it as array[5] or array[1,2,3,4,5]",4.0,5.0,4.5,0.922903776,0.334331423,0.994161354,0.999932417,0.9182089150504363,0.41577844825741034,0.9941152298898183,0.9999324118399414
643,643.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Static and dynamic.,2.0,3.0,2.5,0.9291822909999999,0.308390558,0.986299479,0.9999071490000001,0.9248697672566625,0.3930115445346212,0.986191247684015,0.9999071419106936
644,644.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",manually inside the brackets or automatically via an initializer list,5.0,5.0,5.0,0.9562821979999999,0.41889026799999995,0.995425885,0.9998991629999999,0.9536199534598451,0.4899912041938545,0.9953897504262915,0.999899155300951
645,645.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.",5.0,5.0,5.0,0.978061438,0.561920643,0.9784450509999999,0.99997846,0.9767254646840646,0.6155212810459342,0.9782747713079897,0.9999784583553902
646,646.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",4.0,5.0,4.5,0.980668724,0.52977103,0.978717348,0.9999672279999999,0.979491524286592,0.5873052927241905,0.9785492193986417,0.999967225497811
647,647.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ",5.0,5.0,5.0,0.974259675,0.468511015,0.98771718,0.999975044,0.9726921890661677,0.5335406683154972,0.9876201482321857,0.9999750420945738
648,648.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",5.0,5.0,5.0,0.9630804059999999,0.41169798399999996,0.994533845,0.9999451540000001,0.9608321459536409,0.48367892288114744,0.994490663492594,0.9999451498124298
649,649.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",either initializing the array with a specific length or initializing an array while declaring its contents.,5.0,5.0,5.0,0.978309393,0.5849369170000001,0.991436478,0.9999566809999999,0.9769885191816321,0.6357214283507884,0.9913688279262891,0.9999566776925325
650,650.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",within the brackets or by using an initializer list.,5.0,5.0,5.0,0.988590539,0.73647368,0.995483166,0.9999706690000001,0.9878957470876948,0.7687171050055225,0.9954474839344852,0.9999706667605365
651,651.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,3.0,5.0,4.0,0.972947717,0.367698044,0.9908270440000001,0.999938716,0.9713003379136618,0.4450625391256907,0.9907545795222366,0.999938711320879
652,652.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",with a number and with a variable,3.0,3.0,3.0,0.951313555,0.141994238,0.987308017,0.999891517,0.9483487393768175,0.24697443292456467,0.9872077529281046,0.999891508717168
653,653.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",5.0,5.0,5.0,0.962929785,0.462876886,0.9757584970000001,0.999940831,0.9606723527190697,0.5285958959455406,0.9755669940804291,0.9999408264823625
654,654.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",4.0,5.0,4.5,0.946003079,0.32783666300000003,0.986533688,0.999949423,0.9427148759902186,0.4100783462900079,0.9864273068872507,0.9999494191383739
655,655.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable,5.0,5.0,5.0,0.969826877,0.524427891,0.9901576999999999,0.9999614509999999,0.9679894508648488,0.5826159066458743,0.9900799478414273,0.9999614480567288
656,656.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",5.0,5.0,5.0,0.955319285,0.358885378,0.9883681209999999,0.999898471,0.9525984027937315,0.4373281355750343,0.9882762315330557,0.9998984632481158
657,657.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",user defined value or by the number of elements in initializer list,5.0,5.0,5.0,0.9763284329999999,0.430722326,0.9935610009999999,0.999931948,0.9748869264026951,0.5003755659076392,0.9935101342238096,0.9999319428041326
658,658.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",5.0,5.0,5.0,0.96558696,0.293451428,0.983401967,0.9999297659999999,0.9634913393681546,0.3799002726316901,0.9832708459313668,0.9999297606375338
659,659.0,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",3.0,5.0,4.0,0.97205466,0.41310864700000005,0.989104388,0.999963053,0.9703528972069444,0.48491698601845235,0.9890183148918881,0.9999630501790439
660,660.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",1.0,4.0,2.5,0.9800052640000001,0.353415847,0.989312028,0.9999515090000001,0.9787876621464615,0.4325278220278257,0.9892275952054536,0.999951505297643
661,661.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",1.0,5.0,3.0,0.985848665,0.545767188,0.987615063,0.99992744,0.9849869035980967,0.6013442613214414,0.9875172245287549,0.9999274344599404
662,662.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",5.0,5.0,5.0,0.986085117,0.674486637,0.987151549,0.999968455,0.9852377546075897,0.7143144071756163,0.9870500488628812,0.9999684525914944
663,663.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",5.0,5.0,5.0,0.985238671,0.568169832,0.99051961,0.99997068,0.9843397633299464,0.6210058585381849,0.9904447168564654,0.9999706777613763
664,664.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",1.0,4.0,2.5,0.987125516,0.545948029,0.991847193,0.999983414,0.9863415098704991,0.60150297575275,0.9917827874908531,0.9999834127336352
665,665.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),0.0,4.0,2.0,0.986718595,0.6160723570000001,0.991001937,0.999890635,0.9859098089602345,0.6630473315096336,0.9909308541411944,0.9998906266498261
666,666.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",2.0,5.0,3.5,0.979165614,0.481421769,0.9792231109999999,0.999977426,0.9778968807188533,0.544871743563243,0.979058977822981,0.9999774242764429
667,667.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,4.0,4.0,4.0,0.975610733,0.43556875,0.99148698,0.999956796,0.9741255212569868,0.5046290119129214,0.9914197288817683,0.999956792701313
668,668.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.",3.0,4.0,3.5,0.9863844509999999,0.6335613729999999,0.9919692090000001,0.9999595920000001,0.985555316886934,0.6783965013803497,0.9919057673923173,0.9999595889147915
669,669.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ",5.0,5.0,5.0,0.985415995,0.537081957,0.9805987979999999,0.9999481859999999,0.9845278856736244,0.5937217006247497,0.980445532469138,0.999948182043927
670,670.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,5.0,5.0,5.0,0.9843984840000001,0.658563376,0.995985531,0.99995443,0.983448412201122,0.7003394163593948,0.9959538175153192,0.9999544265206654
671,671.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,A char array reads a string as each individual character. A string literal array reads the entire string.,2.0,4.0,3.0,0.9790089129999999,0.580983877,0.995394102,0.9999546570000001,0.9777306372358692,0.6322520574916309,0.9953577163470869,0.9999546535379974
672,672.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,array of characters can only hold as many characters as the array size and strings are not that limited.,4.0,4.0,4.0,0.9783967729999999,0.59660548,0.995879148,0.9999182109999999,0.9770812202846444,0.6459622992856742,0.9958465941113602,0.9999182047552929
673,673.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",3.0,4.0,3.5,0.979554653,0.384853423,0.9915520240000001,0.9999200979999999,0.9783096106846905,0.46011889372377207,0.9914852867160756,0.9999200918993681
674,674.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"if by type string, the array contains an additional terminating null character",3.0,5.0,4.0,0.9762434959999999,0.571612835,0.98718879,0.9999694459999999,0.9747968170689052,0.6240275973205375,0.9870875840591704,0.9999694436671586
675,675.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.,5.0,5.0,5.0,0.987874925,0.754921556,0.994773985,0.9999570240000001,0.9871365549712936,0.7849078147903331,0.9947327005495176,0.9999570207187213
676,676.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,2.0,4.0,3.0,0.9846494790000001,0.675526142,0.984597907,0.9999523370000001,0.9837146918228958,0.7152267248741341,0.9844762336129578,0.9999523333608621
677,677.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the array of characters has a set length, while the type string has virtually unlimited length.",4.0,4.0,4.0,0.9794409279999999,0.48904150700000004,0.99050166,0.999978113,0.9781889602733824,0.5515591782898367,0.9904266250551337,0.9999781113288962
678,678.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.,1.0,3.0,2.0,0.969555616,0.5204283,0.9903982170000001,0.999948631,0.9677016711222959,0.579105680474637,0.990322364876574,0.9999486270779036
679,679.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,array of characters need a termination character as well as size specification whether its explicit or implicit.,5.0,5.0,5.0,0.97469002,0.414798379,0.991790208,0.999955057,0.9731487404071599,0.48639997302606813,0.9917253523209989,0.9999550535685379
680,680.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,when using an array individual characters can be accessed and manipulated.,1.0,4.0,2.5,0.9703295829999999,0.44626060100000003,0.9936046590000001,0.9999458520000001,0.9685227697100187,0.5140126751922842,0.9935541371130877,0.9999458478657229
681,681.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,strings declared using an array of characters could result in data loss if character array not initialized large enough.,4.0,4.0,4.0,0.9719930290000001,0.6448573470000001,0.996899254,0.999980772,0.9702875131181397,0.6883103709646189,0.9968747587402856,0.9999807705319149
682,682.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",3.0,4.0,3.5,0.980514467,0.43128299700000006,0.99133403,0.999969505,0.9793278736337265,0.5008676367262939,0.991265570608026,0.9999695026716634
683,683.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",3.0,4.0,3.5,0.981218457,0.567500353,0.987251943,0.999972502,0.9800747338936227,0.620418292782863,0.9871512359549641,0.9999724999004885
684,684.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",0.0,3.0,1.5,0.9724559779999999,0.40446040000000005,0.9904870459999999,0.999950812,0.9707786539162455,0.4773268841918595,0.9904118956075203,0.9999508082444261
685,685.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",5.0,5.0,5.0,0.982619107,0.607117415,0.99452107,0.99997485,0.9815606780448511,0.6551880599565392,0.9944777875727048,0.9999748480797616
686,686.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,4.0,4.0,4.0,0.986522734,0.657506704,0.995924583,0.999919656,0.9857020207851701,0.6994120321071515,0.9958923880385749,0.9999196498656209
687,687.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"cant modify individual characters of a type string array, character type array can modify individual characters",1.0,4.0,2.5,0.9590601329999999,0.458036244,0.995633889,0.99994882,0.9565670539244457,0.5243475244910618,0.9955993976153829,0.9999488160923339
688,688.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string is a class and is safer, while the other is just an array of characters.",3.0,4.0,3.5,0.981789172,0.453828603,0.981572938,0.999956301,0.9806802032230542,0.5206547040108249,0.9814273679760573,0.9999562976635189
689,689.0,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",1.0,4.0,2.5,0.9856585259999999,0.524184406,0.97219741,0.999950043,0.984785185870634,0.5824022129408671,0.9719777752208927,0.9999500391857118
690,690.0,4.3,How are arrays passed to functions?,by reference.,by reference only,5.0,5.0,5.0,0.899714351,0.657952905,0.996596597,0.9999548070000001,0.893607344030479,0.6998036387558895,0.9965697108118384,0.99995480354945
691,691.0,4.3,How are arrays passed to functions?,by reference.,a reference pointer to an element in the array.,4.0,5.0,4.5,0.887124538,0.623755992,0.992738986,0.9998928440000001,0.8802508602605071,0.6697908452007171,0.9926816254733014,0.9998928358184865
692,692.0,4.3,How are arrays passed to functions?,by reference.,Arrays are passed to functions by reference.,5.0,5.0,5.0,0.9205157159999999,0.62204057,0.993197688,0.999886768,0.9156754314608294,0.6682853114601132,0.9931439511253585,0.999886759354575
693,693.0,4.3,How are arrays passed to functions?,by reference.,#NAME?,5.0,5.0,5.0,0.8349323270000001,0.278628826,0.982840132,0.99975336,0.8248803460884182,0.36689127109472425,0.9827045725496865,0.9997533411686836
694,694.0,4.3,How are arrays passed to functions?,by reference.,Arrays are passed by reference.,5.0,5.0,5.0,0.94530189,0.6959564090000001,0.99425614,0.999916185,0.9419709873003563,0.7331572727498459,0.9942107646798471,0.9999161786006051
695,695.0,4.3,How are arrays passed to functions?,by reference.,"you must pass the array and its size to the function. Ex. function(array, size);",4.0,4.0,4.0,0.8665906790000001,0.307616681,0.9847046220000001,0.999845726,0.8584665689077768,0.39233235426273627,0.9845837916396489,0.9998457142209597
696,696.0,4.3,How are arrays passed to functions?,by reference.,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",3.0,4.0,3.5,0.86518085,0.276469827,0.964826437,0.999875862,0.8569708867910578,0.3649964336492267,0.964548573040566,0.9998758525218864
697,697.0,4.3,How are arrays passed to functions?,by reference.,you pass a pointer to the first item and also pass the size.,4.0,3.0,3.5,0.857274532,0.182633132,0.9895267320000001,0.999841205,0.848583104697135,0.2826410071540143,0.9894439953231756,0.9998411928757749
698,698.0,4.3,How are arrays passed to functions?,by reference.,By reference.,5.0,5.0,5.0,1.0,0.948016524,0.992687258,0.9998770090000001,1.0,0.954376895555799,0.9926294888326727,0.9998769996094616
699,699.0,4.3,How are arrays passed to functions?,by reference.,"In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",4.0,4.0,4.0,0.850299239,0.149981707,0.9762754240000001,0.999905376,0.8411830434138341,0.25398460539613654,0.976088004698087,0.9999053687753224
700,700.0,4.3,How are arrays passed to functions?,by reference.,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,5.0,5.0,5.0,0.868783176,0.459072173,0.9833168529999999,0.9998387329999999,0.8607925804693632,0.5252567037264745,0.983185059548161,0.9998387206870342
701,701.0,4.3,How are arrays passed to functions?,by reference.,Arrays are passed by reference.,5.0,5.0,5.0,0.94530189,0.6959564090000001,0.99425614,0.999916185,0.9419709873003563,0.7331572727498459,0.9942107646798471,0.9999161786006051
702,702.0,4.3,How are arrays passed to functions?,by reference.,the same way but with [] at the declaration and the actual function.,3.0,3.0,3.0,0.8446360829999999,0.29955169600000003,0.9852573920000001,0.999864602,0.8351750231834446,0.3852541501619579,0.9851409284096818,0.9998645916621693
703,703.0,4.3,How are arrays passed to functions?,by reference.,specify the array name without brackets.,3.0,3.0,3.0,0.850288391,0.342216611,0.988823204,0.9998728000000001,0.8411715348127184,0.4226988541895985,0.9887349095957524,0.9998727902880985
704,704.0,4.3,How are arrays passed to functions?,by reference.,by reference,5.0,5.0,5.0,0.933680415,0.8028118009999999,0.996143597,0.99995552,0.9296418095579517,0.8269385102654371,0.996113132204416,0.9999555166038886
705,705.0,4.3,How are arrays passed to functions?,by reference.,"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.",5.0,5.0,5.0,0.8595572709999999,0.372671485,0.943821125,0.9998902009999999,0.8510048536464307,0.44942746112879167,0.943377323368529,0.9998901926166894
706,706.0,4.3,How are arrays passed to functions?,by reference.,They are called by the function then the function must loop through the array to get the set of characters.,1.0,3.0,2.0,0.8524754640000001,0.239357725,0.985195136,0.99981392,0.8434917920737472,0.332425135306464,0.9850781806000046,0.9998139057925262
707,707.0,4.3,How are arrays passed to functions?,by reference.,"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",5.0,5.0,5.0,0.887978375,0.591091037,0.984536607,0.9999061290000001,0.8811566926213771,0.6411225688886419,0.9844144493554854,0.9999061218328152
708,708.0,4.3,How are arrays passed to functions?,by reference.,"The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",4.0,4.0,4.0,0.828608036,0.206145868,0.983532427,0.999874542,0.8181709303013782,0.30327687248739305,0.9834023365387052,0.9998745324211026
709,709.0,4.3,How are arrays passed to functions?,by reference.,specifying array name and passing as reference in an argument into the function,5.0,5.0,5.0,0.844685316,0.380381525,0.988063928,0.9999076379999999,0.835227254282147,0.45619414906995526,0.9879696354705223,0.9999076309480294
710,710.0,4.3,How are arrays passed to functions?,by reference.,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,4.0,4.0,4.0,0.8375376459999999,0.190209895,0.978975092,0.999859182,0.8276443189082764,0.2892907250316329,0.9788089995235677,0.9998591712483446
711,711.0,4.3,How are arrays passed to functions?,by reference.,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",5.0,5.0,5.0,0.84159404,0.302858621,0.9770367679999999,0.9998535209999999,0.8319477315662415,0.38815646059352926,0.9768553631600944,0.9998535098161191
712,712.0,4.3,How are arrays passed to functions?,by reference.,by reference only,5.0,5.0,5.0,0.899714351,0.657952905,0.996596597,0.9999548070000001,0.893607344030479,0.6998036387558895,0.9965697108118384,0.99995480354945
713,713.0,4.3,How are arrays passed to functions?,by reference.,by reference,5.0,5.0,5.0,0.933680415,0.8028118009999999,0.996143597,0.99995552,0.9296418095579517,0.8269385102654371,0.996113132204416,0.9999555166038886
714,714.0,4.3,How are arrays passed to functions?,by reference.,by reference,5.0,5.0,5.0,0.933680415,0.8028118009999999,0.996143597,0.99995552,0.9296418095579517,0.8269385102654371,0.996113132204416,0.9999555166038886
715,715.0,4.3,How are arrays passed to functions?,by reference.,by refrence,5.0,5.0,5.0,0.835099757,0.410512716,0.996143597,0.999620153,0.8250579719258795,0.482638676827606,0.996113132204416,0.9996201239981388
716,716.0,4.3,How are arrays passed to functions?,by reference.,"function( int [], int length)",4.0,4.0,4.0,0.818525255,0.10653538300000001,0.974710194,0.999858425,0.8074741470542655,0.21585410066481392,0.9745104097009661,0.9998584141905466
717,717.0,4.3,How are arrays passed to functions?,by reference.,by reference,5.0,5.0,5.0,0.933680415,0.8028118009999999,0.996143597,0.99995552,0.9296418095579517,0.8269385102654371,0.996113132204416,0.9999555166038886
718,718.0,4.3,How are arrays passed to functions?,by reference.,by reference,5.0,5.0,5.0,0.933680415,0.8028118009999999,0.996143597,0.99995552,0.9296418095579517,0.8269385102654371,0.996113132204416,0.9999555166038886
719,719.0,4.3,How are arrays passed to functions?,by reference.,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",1.0,4.0,2.5,0.849964321,0.326881409,0.9734635309999999,0.9998767390000001,0.8408277302069364,0.40923997116840694,0.973253898318041,0.9998767295888467
720,720.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value,5.0,5.0,5.0,0.9855926629999999,0.46917563700000003,0.9895633140000001,0.999980388,0.9847153120694472,0.5341239713428269,0.9894808663134995,0.9999803865025959
721,721.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,3.0,5.0,4.0,0.974918902,0.40950971799999997,0.985000778,0.999976146,0.9733915604330203,0.48175839936191045,0.9848822872115247,0.9999761441787131
722,722.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,5.0,5.0,5.0,0.988343298,0.642567694,0.9900927690000001,0.999982532,0.9876334500699573,0.6863008655217743,0.9900145038997972,0.9999825306662934
723,723.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",3.0,5.0,4.0,0.986461103,0.598630846,0.993148375,0.999985492,0.9856366366963654,0.6477398542255504,0.9930942485627362,0.9999854908922935
724,724.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Arrays that are static remain the same size throughout the program execution.,3.0,5.0,4.0,0.987007678,0.45705956200000003,0.98952763,0.999967838,0.9862164959934472,0.5234903431649272,0.989444900417192,0.9999678355443854
725,725.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",5.0,5.0,5.0,0.9798861740000001,0.490371555,0.988328668,0.999974411,0.9786613200274668,0.5527264899721066,0.9882364668624185,0.9999744090462434
726,726.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,4.0,5.0,4.5,0.9859284759999999,0.49112609,0.9879444690000001,0.999973283,0.9850715747783727,0.5533887048096024,0.9878492327688357,0.9999732809601191
727,727.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,1.0,5.0,3.0,0.980195046,0.332311183,0.9878108170000001,0.999968848,0.9789890011340088,0.41400539213237647,0.9877145249453496,0.9999688456215005
728,728.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","If an array is declared as static, it is not created each time the array is called.",5.0,5.0,5.0,0.989197433,0.705411673,0.9894613870000001,0.999959248,0.9885395985778713,0.7414556500461138,0.9893781341110298,0.9999592448885267
729,729.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",5.0,5.0,5.0,0.994802475,0.77354151,0.993286665,0.999992927,0.9944859658911118,0.8012495481920822,0.9932336310254745,0.9999929264599664
730,730.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",4.0,5.0,4.5,0.975100815,0.36091905799999996,0.9925783490000001,0.9999748009999999,0.9735845512289953,0.4391129872661002,0.9925197194738301,0.9999747990760203
731,731.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",4.0,5.0,4.5,0.9765197640000001,0.416106463,0.9931660370000001,0.99996029,0.9750899087183336,0.4875480080853971,0.9931120500889269,0.9999602869680849
732,732.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static cannot be changed,1.0,5.0,3.0,0.940159082,0.10392706800000001,0.972046506,0.999907435,0.9365150022444955,0.21356492270240954,0.9718256791101322,0.9999074279325301
733,733.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",3.0,5.0,4.0,0.985833705,0.363853276,0.991661674,0.999959264,0.9849710325921335,0.44168819278479343,0.9915958029286669,0.9999592608897484
734,734.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",1.0,5.0,3.0,0.9693672059999999,0.24594903,0.986359062,0.999948375,0.9675017876842258,0.3382099696341759,0.9862513013775382,0.9999483710583575
735,735.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.,5.0,5.0,5.0,0.9860262870000001,0.564067662,0.990360597,0.99998751,0.9851753420888185,0.6174056042889717,0.9902844476862622,0.9999875090463707
736,736.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",1.0,5.0,3.0,0.9877865309999999,0.5746577979999999,0.993742123,0.999979506,0.9870427781196149,0.6266999977767463,0.9936926870505945,0.9999795044352539
737,737.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","static arrays keep the values after the end of a function, while non static reinitialize every time.",5.0,5.0,5.0,0.982809782,0.444503069,0.9901967740000001,0.9999712559999999,0.9817629644126342,0.5124701837667391,0.990119330518042,0.9999712538053546
738,738.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.",5.0,5.0,5.0,0.990006745,0.654135346,0.992206345,0.999984715,0.9893981945389745,0.696453172292683,0.9921447767182549,0.9999847138329684
739,739.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",5.0,5.0,5.0,0.984141886,0.48112115299999997,0.9938985999999999,0.999975735,0.9831761883783845,0.5446079090484907,0.9938504001869161,0.9999757331473328
740,740.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",5.0,5.0,5.0,0.99191314,0.7809561490000001,0.993507595,0.9999834759999999,0.9914206815986832,0.807756978543855,0.993456306327324,0.999983474738369
741,741.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",the static array exists for the duration of the program,4.0,5.0,4.5,0.972669184,0.331208646,0.987195389,0.9999725979999999,0.9710048433345206,0.4130377546334028,0.9870942351899218,0.9999725959078182
742,742.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",an array declared as static can only be declared once,2.0,5.0,3.5,0.971701562,0.5489580629999999,0.98051593,0.999976278,0.9699782969085755,0.6041447209019701,0.9803620098288734,0.9999762761887915
743,743.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",5.0,5.0,5.0,0.98611337,0.548698068,0.991843605,0.999985445,0.9852677281056832,0.6039165372568447,0.9917791711463864,0.9999854438887051
744,744.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
745,745.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,5.0,5.0,5.0,0.98680526,0.523919046,0.99054865,0.9999722609999999,0.9860017515225208,0.582169320723438,0.9904739862665307,0.9999722588820877
746,746.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static array cannot be changed in the program.,1.0,5.0,3.0,0.98012501,0.39067211799999996,0.985040974,0.99993005,0.978914700213311,0.4652256497574384,0.9849228007517101,0.9999300446592178
747,747.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static arrays are available throughout the program,5.0,5.0,5.0,0.953548133,0.44247195100000003,0.985631617,0.999968272,0.9507193945080523,0.510687580605448,0.985518109710703,0.9999682695775219
748,748.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",5.0,5.0,5.0,0.990613937,0.56303829,0.9942902109999999,0.999985019,0.9900423621761949,0.616502179780231,0.9942451048337843,0.9999850178561794
749,749.0,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",1.0,5.0,3.0,0.9829481840000001,0.500872612,0.990194789,0.999976834,0.9819097945575088,0.5619427036067144,0.9901173298369477,0.9999768322312429
750,750.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","at least 2, depending on how many arrays are being used.",1.0,4.0,2.5,0.964627445,0.273927629,0.989664722,0.999961943,0.9624733936270586,0.36276528302605865,0.9895830754159751,0.9999619400942937
751,751.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all of them.,2.0,5.0,3.5,0.945343435,0.44297418,0.982031455,0.999925913,0.9420150622296839,0.5111283600200818,0.9818895071666522,0.9999259073433518
752,752.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",5.0,5.0,5.0,0.974877656,0.63108027,0.992583313,0.999962438,0.9733478027116327,0.6762189705567893,0.9925247226884156,0.9999624351320876
753,753.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,2.0,5.0,3.5,0.961122334,0.386142105,0.9900166970000001,0.999957532,0.9587548349651112,0.461249900689935,0.9899378309465435,0.9999575287575077
754,754.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",The first dimension is not required however the subsequent dimension(s) are needed for the compiler.,5.0,5.0,5.0,0.968224168,0.42351242899999997,0.9949210709999999,0.999950454,0.9662891431044007,0.49404782661096475,0.9948809484988582,0.9999504502170923
755,755.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all but the first,5.0,5.0,5.0,0.9437276720000001,0.48545637700000005,0.975404698,0.99993229,0.9403009055312785,0.5484127022743421,0.9752104001406333,0.9999322848302449
756,756.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",All of the dimensions must be specified.,2.0,5.0,3.5,0.964361727,0.5168871279999999,0.9924686509999999,0.9999684759999999,0.962191494431702,0.5759977840344127,0.9924091548820485,0.9999684735930977
757,757.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",just the first one at least.,1.0,3.0,2.0,0.974764049,0.52074343,0.9813586879999999,0.999947777,0.9732272774860669,0.5793822531475283,0.9812114254448426,0.9999477730126994
758,758.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","Two paramaters, the array and how many columns.  array(a[],[3])",4.0,4.0,4.0,0.937954783,0.253347248,0.992105511,0.99994679,0.9341764699868944,0.34470298815634953,0.9920431461502618,0.9999467859373404
759,759.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""",4.0,5.0,4.5,0.9559418559999999,0.335816771,0.9840921309999999,0.999942317,0.9532588859523896,0.4170820584072969,0.9839664620859209,0.9999423125958206
760,760.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,4.0,5.0,4.5,0.962861717,0.392753571,0.9924252840000001,0.999963391,0.960600139641937,0.4670524292443411,0.9923654452916112,0.9999633882048505
761,761.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",Every dimension after the first.,5.0,5.0,5.0,0.9699446559999999,0.597107709,0.98158798,0.99993211,0.9681144021490291,0.6464030787003079,0.9814425288047833,0.9999321048165016
762,762.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",both,2.0,3.0,2.5,0.7615051270000001,0.193241417,0.9661861420000001,0.9995015009999999,0.7469817144666074,0.2919513290441636,0.965919019432189,0.999501462938889
763,763.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","the size of the first dimension does not need to be specified, but all other dimensions do.",5.0,5.0,5.0,0.9775071740000001,0.501126945,0.988433715,0.999849788,0.976137448156712,0.5621659180185904,0.9883423437122506,0.9998497765310993
764,764.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","when passing (in main) a multidimensional array to a function, no dimensions need be specified",1.0,3.0,2.0,0.9474351409999999,0.188642725,0.9900662370000001,0.9999590359999999,0.9442341450103855,0.287915304107649,0.9899877623024194,0.9999590328723401
765,765.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.",5.0,5.0,5.0,0.9732475279999999,0.520108879,0.990720466,0.999931998,0.9716184062404556,0.5788253418215491,0.9906471595778173,0.9999319928079503
766,766.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",as many as there are dimensions. Most commonly just rows and columns,2.0,5.0,3.5,0.9611454009999999,0.362590522,0.99112046,0.999964313,0.9587793066559234,0.4405799414314339,0.9910503134486723,0.9999643102752466
767,767.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",1.0,5.0,3.0,0.9332720640000001,0.261989176,0.9732354809999999,0.999654885,0.9292085915662349,0.35228754413608554,0.9730240467696466,0.9996548586499766
768,768.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","None, just pass the array name.",1.0,3.0,2.0,0.9579835529999999,0.368957639,0.9932737970000001,0.999933255,0.9554249143789995,0.44616801799444494,0.9932206613709044,0.9999332499039238
769,769.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all subsequent dimensions after the first dimension.  first is not needed to be specified.,5.0,5.0,5.0,0.979148805,0.562512755,0.98848215,0.999959637,0.9778790481159634,0.6160409459413456,0.9883911613388521,0.9999596339182274
770,770.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","all dimensions, excluding the first one.",5.0,5.0,5.0,0.9858805540000001,0.7475937009999999,0.991897545,0.9999843540000001,0.9850207345144846,0.7784765500935098,0.9918335372613629,0.9999843528054057
771,771.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all dimensions but the first,5.0,5.0,5.0,0.9564441440000001,0.592780471,0.9878788279999999,0.9999775809999999,0.9537917613429816,0.6426052943576657,0.9877830732183503,0.9999775792882774
772,772.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),1.0,5.0,3.0,0.940350652,0.19925053399999998,0.9862901709999999,0.9998585790000001,0.9367182381143065,0.29722520823816795,0.9861818661527172,0.9998585682023048
773,773.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",one less than the number of dimensions the array contains,4.0,5.0,4.5,0.95584321,0.326957524,0.98210381,0.999957682,0.9531542327936835,0.4093067732151721,0.9819624337563654,0.9999576787689602
774,774.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
775,775.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",one,1.0,3.0,2.0,0.8390874859999999,0.313976198,0.962290641,0.999689145,0.8292885381517276,0.39791376071400303,0.9619927447703953,0.9996891212657766
776,776.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",All subsequent dimensions after the first one.,5.0,5.0,5.0,0.9838436840000001,0.70361203,0.987545819,0.999965969,0.9828598270334488,0.7398762000579816,0.9874474335153061,0.9999659664016846
777,777.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",two or more,1.0,4.0,2.5,0.87348038,0.153495535,0.972602691,0.999830509,0.8657758259703288,0.25706850347642185,0.9723862578579672,0.9998304960591201
778,778.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",1 less than the total number of dimensions,4.0,5.0,4.5,0.937934101,0.266530573,0.980932865,0.9999081959999999,0.9341545285333295,0.3562732843288649,0.9807822385301662,0.9999081889906334
779,779.0,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",2.0,5.0,3.5,0.961142004,0.41007682700000003,0.993048655,0.999964253,0.958775702791802,0.4822561204673296,0.9929937407951156,0.9999642502706657
780,780.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",1.0,5.0,3.0,0.984376252,0.481111646,0.99495663,0.999955935,0.9834248263585701,0.5445995652652864,0.9949167884076912,0.9999559316355745
781,781.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",5.0,5.0,5.0,0.9769183990000001,0.38488212200000005,0.993823496,0.999973443,0.9755128190433435,0.4601440812944233,0.9937747028806648,0.9999734409723352
782,782.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The sorted array or list is built one entry at a time.,3.0,4.0,3.5,0.9770458340000001,0.36927855,0.9894849290000001,0.999957529,0.975648014340464,0.44644966434049327,0.9894018620880187,0.9999575257572785
783,783.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,5.0,5.0,5.0,0.986630142,0.490435839,0.990099163,0.9999664490000001,0.9858159695156847,0.5527829085857078,0.9900209484110903,0.9999664464383334
784,784.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Compare two numbers at a time and swap until the entire list is sorted.,1.0,3.0,2.0,0.977020443,0.273262203,0.988279008,0.9999702490000001,0.9756210771270672,0.36218127437111824,0.9881864145585674,0.9999702467284689
785,785.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",5.0,5.0,5.0,0.9823508259999999,0.279390335,0.989634575,0.999969165,0.9812760597727375,0.3675596066373917,0.989552690260836,0.9999691626457038
786,786.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.,5.0,4.0,4.5,0.982795656,0.47321403,0.988735507,0.999967163,0.9817479781940355,0.5376682519451038,0.9886465198073747,0.9999671604928483
787,787.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Looking at the 2nd element move forward and place the element in the correct spot.,4.0,5.0,4.5,0.982355535,0.453528076,0.992257475,0.999962017,0.9812810555325693,0.5203909476065918,0.9921963106348056,0.9999620140999438
788,788.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ",5.0,5.0,5.0,0.988197744,0.612484634,0.994875508,0.999971708,0.987479032396029,0.6598985797573292,0.9948350255604698,0.9999717058398655
789,789.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",To sort the elements in an array by removing an element from the input data and inserting it at the correct position.,5.0,5.0,5.0,0.9839976429999999,0.57879895,0.993346167,0.9999868129999999,0.9830231615392702,0.63033446443333,0.9932936030791145,0.9999868119931538
790,790.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",5.0,5.0,5.0,0.9854587909999999,0.565161884,0.994833958,0.999977697,0.9845732877839988,0.6183659441591094,0.9947931473239612,0.9999776952971343
791,791.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,2.0,4.0,3.0,0.967398405,0.34550878399999996,0.990109005,0.99997678,0.9654130943412187,0.42558821758321563,0.9900308681608789,0.99997677822712
792,792.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",have a marker and sort everything to the left of the value for every new value when moving to the right.,3.0,3.0,3.0,0.981559932,0.35787555600000004,0.9902298759999999,0.9999749729999999,0.9804370033963825,0.4364418690511095,0.990152694017077,0.9999749710891529
793,793.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,4.0,5.0,4.5,0.990178824,0.50476712,0.991821451,0.9999753490000001,0.9895807524825002,0.5653607040736854,0.9917568421343139,0.9999753471178611
794,794.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,5.0,4.0,4.5,0.983144522,0.5246557589999999,0.9907814659999999,0.99997373,0.9821180887800225,0.5828158941488933,0.990708641465351,0.9999737279942481
795,795.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ",4.0,4.0,4.0,0.9869698290000001,0.362658441,0.993549208,0.999980317,0.9861763421361811,0.44063955028927065,0.9934982480615199,0.999980315497175
796,796.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,3.0,4.0,3.5,0.9835539459999999,0.501242697,0.9919292829999999,0.9999852220000001,0.9825524451132766,0.5622675073310408,0.9918655259850767,0.9999852208716787
797,797.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insert the item into its proper position by shifting larger sorted array values to the right.,1.0,5.0,3.0,0.9852039220000001,0.5045353770000001,0.99035379,0.999962293,0.9843028982506541,0.5651573156913231,0.9902775869123533,0.9999622901210167
798,798.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",a comparison sort in which the sorted array is built one entry at a time,4.0,4.0,4.0,0.978412449,0.332541585,0.991299478,0.999966943,0.9770978508922299,0.41420760359107445,0.9912307456542871,0.9999669404760508
799,799.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",5.0,4.0,4.5,0.986875892,0.47602707200000005,0.988797515,0.999977074,0.9860766847373064,0.5401371077979122,0.9887090176579024,0.9999770722495672
800,800.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",5.0,5.0,5.0,0.987154841,0.5788002010000001,0.994700274,0.9999791579999999,0.9863726206492336,0.630335562368829,0.9946584072476815,0.9999791564086836
801,801.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",the insertion sort creates a new array and inserts each item in its place with respect to the new array.,4.0,4.0,4.0,0.978994787,0.402845085,0.9907180659999999,0.999971169,0.9777156510172706,0.47590920898762173,0.9906447406183078,0.999971166798712
802,802.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",5.0,5.0,5.0,0.984681487,0.468551934,0.99532059,0.9999785809999999,0.983748648985922,0.5335765807237162,0.9952836236173103,0.9999785793646289
803,803.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",5.0,5.0,5.0,0.987620115,0.488630474,0.989593589,0.9999646170000001,0.98686622803082,0.5511984367055491,0.9895113804798122,0.9999646142984576
804,804.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",3.0,5.0,4.0,0.982792795,0.466147304,0.9893768740000001,0.9999883940000001,0.9817449429702347,0.5314661661442899,0.9892929534756014,0.9999883931138654
805,805.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",5.0,4.0,4.5,0.985322714,0.414564967,0.9897157190000001,0.99997627,0.9844289242226048,0.4861951198520609,0.9896344752818532,0.9999762681881806
806,806.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",you take each element and insert it in the correct position with respect to all the elements before it,5.0,5.0,5.0,0.984357774,0.549111664,0.9867212870000001,0.999957214,0.983405223120055,0.6042795282485534,0.986616387881012,0.9999572107332279
807,807.0,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",4.0,4.0,4.0,0.981095195,0.31224438600000004,0.992369155,0.9999648659999999,0.9799439657160129,0.39639384235083475,0.9923088728839821,0.9999648633174688
808,808.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,5.0,5.0,5.0,0.986399055,0.38450256,0.9896039090000001,0.999930054,0.9855708102138785,0.459810960116281,0.9895217820057033,0.9999300486595232
809,809.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",5.0,4.0,4.5,0.985961676,0.363949299,0.9926407709999999,0.99993948,0.9851067965295746,0.4417724670137435,0.9925826345948731,0.9999394753792116
810,810.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Finds the minimum value and swap it with the value in the first position.,5.0,5.0,5.0,0.9841786029999999,0.331972361,0.992199937,0.9999716999999999,0.9832151413012422,0.4137080262637686,0.9921383180963644,0.9999716978392547
811,811.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,5.0,5.0,5.0,0.9873075490000001,0.7090850470000001,0.992287921,0.999968568,0.9865346279740086,0.7446795730801298,0.9922269971519834,0.9999685656001219
812,812.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",4.0,5.0,4.5,0.983942449,0.22686637899999998,0.9960825109999999,0.999966877,0.9829646064387934,0.3214621519306187,0.9960515636374997,0.9999668744710116
813,813.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",5.0,4.0,4.5,0.97284615,0.32861375800000003,0.9890078809999999,0.999960587,0.9711925858773873,0.4107603608276288,0.9889210455063108,0.9999605839907612
814,814.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.,5.0,5.0,5.0,0.985346437,0.55682826,0.9894496970000001,0.999871698,0.9844540918612723,0.6110519700387427,0.9893663517624189,0.999871688203959
815,815.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the smallest and put it in the current position till you get to the end.,5.0,5.0,5.0,0.9795752759999999,0.26232191899999996,0.991525663,0.9999722459999999,0.9783314895453843,0.35257957479294416,0.9914587174695628,0.9999722438809425
816,816.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. ",5.0,5.0,5.0,0.9848629240000001,0.467803478,0.995719288,0.9999686190000001,0.9839411347953435,0.5329197010979696,0.9956854712500302,0.9999686166040159
817,817.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,2.0,5.0,3.5,0.9867516759999999,0.587200046,0.99108829,0.999961755,0.9859449044647979,0.6377076551036452,0.9910178893122468,0.9999617520799396
818,818.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",5.0,4.0,4.5,0.9810141920000001,0.36353597,0.9944001490000001,0.999970336,0.9798580299475614,0.44140971035359217,0.9943559113215169,0.9999703337351112
819,819.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Select the minimum number from the array and put it in the current position, then move on",5.0,5.0,5.0,0.986794114,0.464656264,0.994933761,0.999917442,0.9859899267743613,0.5301575604317653,0.9948937387472648,0.9999174356965789
820,820.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,5.0,5.0,5.0,0.984112859,0.350900561,0.993126356,0.999972285,0.9831453937466939,0.4303202906214027,0.9930720556171363,0.9999722828839203
821,821.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,5.0,4.0,4.5,0.988250732,0.44126245399999997,0.991016344,0.9999813120000001,0.9875352471596639,0.5096260700601365,0.9909453749535502,0.9999813105731447
822,822.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",5.0,5.0,5.0,0.984546542,0.37201219799999996,0.9872982779999999,0.999892977,0.9836054863589361,0.4488488403443773,0.9871979369919948,0.9998929688286411
823,823.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It runs through and finds the lowest (or highest) value and puts it in its desired position.,5.0,4.0,4.5,0.975273132,0.255893797,0.9928256409999999,0.99996026,0.9737673616657976,0.3469379574184911,0.992768965030092,0.9999602569657943
824,824.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",5.0,5.0,5.0,0.9861111640000001,0.284879059,0.995183818,0.9999868559999999,0.9852653877688413,0.3723767648496935,0.9951457711464619,0.9999868549964369
825,825.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Search for the largest item in an array and swap it with the last unsorted item.,5.0,4.0,4.5,0.9794965390000001,0.353370041,0.9912536829999999,0.9999481929999999,0.9782479577675418,0.43248762056222595,0.9911845888831461,0.9999481890444616
826,826.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,5.0,5.0,5.0,0.9855458140000001,0.42316851,0.9918955629999999,0.999981302,0.9846656101470963,0.4937459873792569,0.9918315396039679,0.9999813005723811
827,827.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,5.0,4.0,4.5,0.981186807,0.32257086,0.994355916,0.9999838190000001,0.9800411565314076,0.4054568338645674,0.9943113288898565,0.9999838177645578
828,828.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Select the smallest number in the list and move it to the front of the list and then advance to the next number.,5.0,5.0,5.0,0.982111871,0.293344617,0.9921424120000001,0.999955258,0.981022553340255,0.3798065303546482,0.9920803386606206,0.9999552545838845
829,829.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,5.0,4.0,4.5,0.982985795,0.229742795,0.9924753409999999,0.999977346,0.9819496959214982,0.32398662773891157,0.9924158977316812,0.9999773442703349
830,830.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",4.0,5.0,4.5,0.986564517,0.347205579,0.995650409,0.999978123,0.9857463482077746,0.4270774034065223,0.9956160481200066,0.9999781213296598
831,831.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",5.0,5.0,5.0,0.986997366,0.580187798,0.99419972,0.9999724440000001,0.9862055560326524,0.6315533817169898,0.9941538989733775,0.9999724418960602
832,832.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","To put the biggest element at the end of the list and place the next highest element behind it, and so on.",3.0,4.0,3.5,0.98363781,0.47912654299999996,0.994401733,0.9999651140000001,0.9826414161055292,0.5428573469976681,0.9943575078347932,0.9999651113364042
833,833.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",5.0,4.0,4.5,0.984356165,0.284033567,0.992881605,0.999946166,0.9834035161381969,0.37163472193931296,0.9928253711342548,0.9999461618896973
834,834.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",5.0,5.0,5.0,0.988950014,0.468127608,0.98253756,0.999975449,0.9882771127206245,0.5332041725874002,0.9823996102927218,0.9999754471254961
835,835.0,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.,5.0,5.0,5.0,0.982076049,0.366648614,0.9920221159999999,0.999968649,0.9809845499194252,0.44414151078782277,0.9919590923468048,0.9999686466063066
836,836.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ",4.0,3.0,3.5,0.9672300220000001,0.308363795,0.9848043470000001,0.999963611,0.9652344574697547,0.39298805608717224,0.9846843044467686,0.999963608221648
837,837.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.",5.0,4.0,4.5,0.980546832,0.545034111,0.99183682,0.999979724,0.9793622095366676,0.6007008790178677,0.991772332546273,0.9999797224518986
838,838.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ",3.0,3.0,3.0,0.983671546,0.564256847,0.98594366,0.9999713240000001,0.9826772064970517,0.6175716418008587,0.9858326177866321,0.9999713218105467
839,839.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",4.0,4.0,4.0,0.968859971,0.489047825,0.991304209,0.9999574509999999,0.9669636640405259,0.5515647232590472,0.9912355140282204,0.999957447751323
840,840.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Best case-1 Worst Case-N,0.0,4.0,2.0,0.7441445590000001,-0.019212813999999998,0.982943597,0.999707282,0.7285639552251085,0.10549166308174489,0.9828088549020418,0.9997072596505625
841,841.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,5.0,5.0,5.0,0.980453074,0.6058529020000001,0.9887791229999999,0.999978158,0.9792627420381985,0.6540782648233694,0.988690480364861,0.9999781563323321
842,842.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,O(n),3.0,4.0,3.5,0.880203903,0.271219492,0.981725154,0.999882754,0.8729087854373624,0.3603884966564784,0.9815807864513497,0.9998827450481005
843,843.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Best case is all elements sorted. n-1.,5.0,3.0,4.0,0.948108375,0.39647144100000004,0.9856319090000001,0.999928409,0.9449483763491984,0.4703154040273272,0.9855184040174434,0.999928403533925
844,844.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. ",5.0,5.0,5.0,0.977227628,0.47866508399999996,0.987881382,0.999968993,0.9758408788898005,0.5424523492219573,0.9877856473944284,0.9999689906325714
845,845.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,1 operation. the best case scenario s where it is already sorted and does one comparision.,3.0,3.0,3.0,0.961452663,0.34508156799999995,0.979015379,0.999964579,0.9591052797197115,0.4252132730491442,0.9788496047826344,0.9999645762955561
846,846.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"n operations, where n is the number of items.",3.0,5.0,4.0,0.968541861,0.410197884,0.991116824,0.999944265,0.9666261823756221,0.48236236569330676,0.9910466487250155,0.9999442607445531
847,847.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n-1,3.0,4.0,3.5,0.341632783,-0.058362662999999995,0.95848009,0.9995353929999999,0.3015407735967093,0.07113194366048689,0.9581520911962409,0.9995353575265916
848,848.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"O(n), the list is already sorted.",5.0,4.0,4.5,0.9676997070000001,0.5352077479999999,0.9935046470000001,0.999980381,0.9657327444641284,0.5920768080639431,0.9934533350387266,0.9999803795020613
849,849.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Insertion sort will take n-1 operations if the array is in reverse order.,4.0,4.0,4.0,0.9669384959999999,0.478625476,0.987522201,0.9999766729999999,0.9649251786673192,0.5424175874080142,0.9874236289379327,0.9999766712189503
850,850.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",5.0,5.0,5.0,0.9797627329999999,0.47766071600000004,0.9849922409999999,0.9999707059999999,0.9785303619494516,0.5415708693808552,0.9848736827709694,0.9999707037633613
851,851.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,1 where there is a list of two ints and only one must be moved.,2.0,3.0,2.5,0.94823271,0.14134635,0.976058203,0.9999162359999999,0.9450802828683451,0.24640581643012047,0.9758690676965794,0.9999162296044989
852,852.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Best case is N, while the worst case is N factorial.",2.0,4.0,3.0,0.9580942990000001,0.242497519,0.992615675,0.99995412,0.9555424043807643,0.33518076383725476,0.9925573403416018,0.9999541164969964
853,853.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n-1 The best case is when the array is already sorted.,5.0,4.0,4.5,0.9668216709999999,0.441485047,0.980443602,0.999959742,0.9648012394780374,0.5098214279790173,0.9802891104524548,0.9999597389262443
854,854.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,worst case its = O(n) time best case its = O(n^2) time,2.0,4.0,3.0,0.9482067820000001,0.341865242,0.990570135,0.9999548079999999,0.9450527759537319,0.42239047649308864,0.9904956409936398,0.9999548045495262
855,855.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,O(n),3.0,4.0,3.5,0.880203903,0.271219492,0.981725154,0.999882754,0.8729087854373624,0.3603884966564784,0.9815807864513497,0.9998827450481005
856,856.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,5.0,5.0,5.0,0.974420548,0.40921092,0.982442182,0.999937035,0.9728628586077668,0.48149616040809906,0.9823034788260138,0.9999370301925324
857,857.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,5.0,5.0,5.0,0.9735308290000001,0.331335038,0.9816885879999999,0.999953293,0.9719189591722999,0.4131486821022953,0.9815439315874224,0.999953289433854
858,858.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.",3.0,4.0,3.5,0.976983368,0.467273891,0.988255295,0.999964636,0.9755817444033985,0.532454911036349,0.9881625142307134,0.999964633299908
859,859.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,theta(n) the best case senario is that everything is already sorted,5.0,4.0,4.5,0.96742928,0.34914177700000004,0.9956120970000001,0.999950129,0.9654458495089402,0.4287767003827125,0.9955774334630364,0.9999501251922781
860,860.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n operations  The best case scenario is when all the numbers are in increasing order.,5.0,5.0,5.0,0.971385121,0.25920566899999997,0.98282731,0.999942433,0.969642585879297,0.34984460956622015,0.9826916492585068,0.9999424286046773
861,861.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order",2.0,3.0,2.5,0.9609949590000001,0.032712296,0.982516937,0.9999323440000001,0.9586197033217578,0.15106354282304243,0.9823788243752364,0.9999323388343678
862,862.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),5.0,3.0,4.0,0.96702975,0.14986144,0.976419389,0.9999267690000001,0.9650219896819026,0.2538790535107222,0.9762331069921655,0.9999267634087087
863,863.0,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1,2.0,3.0,2.5,0.972691,0.204071805,0.987300627,0.999951907,0.9710279878442862,0.30145657880651544,0.9872003045486147,0.999951903328031
864,864.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.",5.0,5.0,5.0,0.973092079,0.355841488,0.993058228,0.999970969,0.9714534909994146,0.4346566768332861,0.9930033894198592,0.9999709667834419
865,865.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,5.0,5.0,5.0,0.97695297,0.30852901899999996,0.9948882859999999,0.99996583,0.9755494952831265,0.3931330643164928,0.9948479045040582,0.9999658273910718
866,866.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is one.,5.0,5.0,5.0,0.9667676690000001,0.186888203,0.993645222,0.99996246,0.9647439489657366,0.2863754543974132,0.9935950205524978,0.9999624571337674
867,867.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The best case is the same as the worst case O(n log n) for a recursive merge sort.,1.0,3.0,2.0,0.970559359,0.357301146,0.9952219040000001,0.9999609429999999,0.968766538177011,0.4359377402501845,0.9951841580180784,0.9999609400179422
868,868.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),there is one object in the split array to sort.,5.0,5.0,5.0,0.964191496,0.325964272,0.994088593,0.999913816,0.9620108970242072,0.40843504929014235,0.9940418940927881,0.9999138094197285
869,869.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case is when the length of the current array is 1.,5.0,5.0,5.0,0.979486108,0.412081242,0.9946694559999999,0.999969621,0.9782368915601085,0.48401528783994857,0.9946273457917795,0.9999696186805199
870,870.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(nlog(n)),1.0,4.0,2.5,0.8857782479999999,0.29851484300000003,0.981970435,0.9998032309999999,0.8788225864223909,0.38434415998138044,0.9818280051211227,0.9998032159764056
871,871.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),Best case is one element.  One element is sorted.,5.0,5.0,5.0,0.9459431770000001,0.24007192300000002,0.9932950779999999,0.99995064,0.9426513261908065,0.33305194852587705,0.9932421104864552,0.9999506362312937
872,872.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),If the array being sorted has 0 or 1 elements,5.0,4.0,4.5,0.973957658,0.6015529039999999,0.996434377,0.999971842,0.9723717804025318,0.6503043875654526,0.9964062093069906,0.9999718398500966
873,873.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"T(n) = 0, if n&lt;2.",4.0,4.0,4.0,0.932497978,0.512278557,0.982902595,0.9999254059999999,0.9283873667318737,0.5719530888302768,0.9827675289946212,0.9999254003046415
874,874.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"A list size of 1, where it is already sorted.",5.0,5.0,5.0,0.9742677809999999,0.546215892,0.9953347859999999,0.999968251,0.9727007886901207,0.6017380647188234,0.9952979317628091,0.9999682485759186
875,875.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),Single element in the array,5.0,5.0,5.0,0.911210895,0.24280345399999997,0.992457204,0.999924681,0.9058039829596488,0.3354492665525818,0.9923976174530879,0.9999246752492869
876,876.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(nlog(n)),1.0,3.0,2.0,0.8857782479999999,0.29851484300000003,0.981970435,0.9998032309999999,0.8788225864223909,0.38434415998138044,0.9818280051211227,0.9998032159764056
877,877.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),n * log( n ),1.0,3.0,2.0,0.87461549,0.398718357,0.977644741,0.9999239440000001,0.8669800597657104,0.4722874015010118,0.9774681390225456,0.999923938193016
878,878.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),A list or array of only 1 element.,5.0,5.0,5.0,0.973537505,0.422625721,0.99325041,0.999933338,0.9719260417148003,0.49326961063141955,0.9931970896183838,0.999933332910261
879,879.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),where you only must merge sort once,3.0,4.0,3.5,0.933236361,0.19978959899999998,0.988707358,0.999946662,0.9291707143920434,0.2976983166312506,0.9886181484360274,0.9999466579275677
880,880.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),A single Element on the Array.,5.0,5.0,5.0,0.951600969,0.289134026,0.993727273,0.9999209029999999,0.9486536557744052,0.376111120817879,0.9936777197386294,0.9999208969608311
881,881.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),There is only one element in the subarray.,5.0,5.0,5.0,0.943098962,0.145869285,0.994366643,0.999968344,0.9396339095313364,0.2503753535172389,0.9943221406309642,0.9999683415830193
882,882.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",5.0,4.0,4.5,0.9778920409999999,0.409498185,0.995207088,0.999962045,0.976545752063934,0.4817482774673385,0.9951692249747063,0.9999620421020815
883,883.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",2.0,2.0,2.0,0.9553515909999999,0.45281735100000003,0.9607384940000001,0.999793206,0.9526326761038015,0.5197671824527166,0.960428336126301,0.9997931902109827
884,884.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The sequence of numbers has zero or one elements.,5.0,5.0,5.0,0.967716098,0.263856351,0.9946709340000001,0.9999672390000001,0.9657501336124401,0.3539262633329434,0.9946288354676777,0.999967236498651
885,885.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),one element in an array,5.0,5.0,5.0,0.930961371,0.22527253600000002,0.9909262670000001,0.999841619,0.9267571863267855,0.32006332154735123,0.9908545863636588,0.9998416069073844
886,886.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),array of length 1,5.0,5.0,5.0,0.945792615,0.414445519,0.990266726,0.999872463,0.9424915955491062,0.4860902867589516,0.9901898351245462,0.9998724532623678
887,887.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),the array has one element,5.0,5.0,5.0,0.9412952659999999,0.2578502,0.990513526,0.9999015179999999,0.9377203754423103,0.3486549872378119,0.9904385847941087,0.9999015104807586
888,888.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",4.0,5.0,4.5,0.976441443,0.359826386,0.994152203,0.999832018,0.9750068182732772,0.4381540077476999,0.9941060065987884,0.9998320051743343
889,889.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"when each half or the original array has nothing else to sort, and puts the halfs back together",2.0,3.0,2.5,0.97254926,0.305166394,0.994166432,0.999961051,0.9708776164281614,0.3901818689870062,0.9941203480049804,0.9999610480261883
890,890.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),the size of the list being sent is &lt;= 1,5.0,4.0,4.5,0.966355801,0.5592391489999999,0.9954298359999999,0.999946489,0.9643069998023635,0.6131678778062489,0.995393732638384,0.9999464849143588
891,891.0,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(n log n),1.0,3.0,2.0,0.892548204,0.37747857,0.982658125,0.999906545,0.8860048064789894,0.4536463814069807,0.9825211277315825,0.9999065378645773
892,892.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Its a location in memory that contains the memory address of another location in memory that contains information.,5.0,5.0,5.0,0.981504917,0.59504056,0.99792855,0.999983967,0.9803786381963113,0.6445888530658251,0.997912185968333,0.9999839657758577
893,893.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address as its value.,5.0,5.0,5.0,0.985693157,0.7602685690000001,0.996986048,0.999978113,0.9848219257641844,0.7896006008703464,0.9969622383951481,0.9999781113288962
894,894.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable which stores the address of another variable.,5.0,5.0,5.0,0.98736757,0.784710765,0.997568997,0.99995426,0.9865983040200592,0.8110522033171246,0.9975497925731133,0.9999542565076857
895,895.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Pointers are variables that contain as their values memory addresses of other variables.,5.0,5.0,5.0,0.9647076729999999,0.682730794,0.997193647,0.9999479109999999,0.962558507201017,0.7215498609160587,0.9971714773848218,0.9999479070229303
896,896.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,4.0,5.0,4.5,0.978537738,0.39839622399999997,0.9919631659999999,0.999982585,0.9772307695062759,0.4720046826712066,0.9918996766538521,0.9999825836703401
897,897.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a pointer holds a memory location,5.0,4.0,4.5,0.944102585,0.24785614,0.99125664,0.999957375,0.940698649278517,0.3398837376353111,0.9911875692428419,0.9999573717455205
898,898.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,5.0,4.0,4.5,0.9717007879999999,0.32306382100000003,0.995098967,0.9999841890000001,0.9699774757749782,0.40588947925345825,0.9950602498409024,0.9999841877928078
899,899.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A variable that stores the address of another variable,5.0,5.0,5.0,0.9870036240000001,0.795270026,0.999573681,0.9999784070000001,0.9862121951205747,0.8203194994759381,0.9995703131670247,0.9999784053513437
900,900.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address,5.0,5.0,5.0,0.971479118,0.29494679,0.98968195,0.9999804640000001,0.9697423069319389,0.381212671531446,0.9896004395136543,0.9999804625083987
901,901.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored somewhere else in the computer memory using its address.,5.0,5.0,5.0,0.9760920409999999,0.38359504899999997,0.99233119,0.999981363,0.9746361390469696,0.4590144864611283,0.9922706079682407,0.9999813615770384
902,902.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"It is like a variable however instead of holding data, it holds a location in memory.",4.0,5.0,4.5,0.976982951,0.416909605,0.994376956,0.999967828,0.9755813020097162,0.48825288267572897,0.9943325351015565,0.9999678255436218
903,903.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a reference to a location in memory,5.0,5.0,5.0,0.960423529,0.263811141,0.992671548,0.999946969,0.9580134754516001,0.3538865849445278,0.9926136547268832,0.9999469649510074
904,904.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a reference to the memory location of an object.,4.0,5.0,4.5,0.9698153140000001,0.353912175,0.994944595,0.9999511390000001,0.9679771837230071,0.4329634224517485,0.9949046583336506,0.9999511352693929
905,905.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains the memory address of a variable that has a value.,5.0,5.0,5.0,0.989616871,0.8582643870000001,0.9978944,0.9999861059999999,0.9889845787248766,0.8756062662034787,0.9978777661903121,0.9999861049391733
906,906.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",2.0,5.0,3.5,0.980574787,0.536575437,0.993035021,0.9999768520000001,0.9793918668877173,0.5932771552299193,0.9929799990893019,0.9999768502326173
907,907.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Contains a variable's memory address as a value.,5.0,5.0,5.0,0.981118918,0.7724618320000001,0.9928074809999999,0.999940348,0.9799691333546805,0.8003019728094721,0.9927506615698033,0.9999403434454847
908,908.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,variable that points to the memory address of another variable and it is type specific.,5.0,5.0,5.0,0.988118947,0.790376723,0.996751905,0.999949318,0.9873954369644191,0.8160249102905953,0.9967262457132987,0.9999493141303569
909,909.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,An element that references a memory cell,5.0,5.0,5.0,0.956660032,0.323971093,0.997178357,0.999963708,0.9540207960846518,0.40668574315114947,0.9971560665969467,0.9999637052290541
910,910.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Is a reference call to the place in memory where the object is stored.,4.0,4.0,4.0,0.972386897,0.305332929,0.9948283040000001,0.999964525,0.970705366151343,0.3903280278106026,0.9947874486585168,0.9999645222914332
911,911.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a variable that contains the address of another variable,5.0,5.0,5.0,0.992589057,0.871168852,0.998086224,0.99999169,0.9921377593217877,0.8869318219337561,0.9980711055607098,0.9999916893655197
912,912.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",5.0,5.0,5.0,0.9856430890000001,0.642129898,0.994110665,0.999960958,0.9847688088172215,0.6859166354900378,0.9940641404570772,0.9999609550190877
913,913.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address of anther variable,5.0,5.0,5.0,0.9857541320000001,0.841835082,0.9974165070000001,0.9999774490000001,0.9848866139051342,0.8611871477520571,0.9973960979332771,0.9999774472781991
914,914.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A variable that contains the memory address of another variable that contains a specific value.,5.0,5.0,5.0,0.99503237,0.8948135970000001,0.999253809,0.9999945509999999,0.9947298606047426,0.9076835444751941,0.9992479142435956,0.999994550583961
915,915.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a variable with a memory address as the value,5.0,4.0,4.5,0.975907385,0.667458475,0.992269649,0.999945778,0.9744402382129358,0.7081461669260269,0.9922085808069178,0.9999457738600729
916,916.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,it is a type that points to something else. It is the memory address of something else,5.0,4.0,4.5,0.970263422,0.270575523,0.992996557,0.9999612170000001,0.968452579761788,0.35982331965781383,0.9929412312315627,0.9999612140388626
917,917.0,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,4.0,5.0,4.5,0.980048597,0.334806413,0.994671475,0.9999542459999999,0.9788336339580526,0.41619532146496485,0.9946293807414671,0.9999542425066167
918,918.0,6.2,What does the address (&) operator return?,The memory address of its operand.,This operator returns the memory address of its operand.,5.0,5.0,5.0,0.988156557,0.8144007329999999,0.998248615,0.9999831259999999,0.9874353372675124,0.8371094933492298,0.9982347794164227,0.9999831247116461
919,919.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The address operator returns the memory address of its operand.,5.0,5.0,5.0,0.989704549,0.8548108940000001,0.99873675,0.9999885270000001,0.9890775959749329,0.8725753209116265,0.9987267705831647,0.9999885261240203
920,920.0,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns memory address of its operand.,5.0,5.0,5.0,0.990854144,0.8592399359999999,1.0,0.99999117,0.9902971968506205,0.8764624531563756,0.9999999999999999,0.9999911693258171
921,921.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The address (&) operator returns the memory address of its operand.,5.0,5.0,5.0,0.9787029620000001,0.8099673390000001,0.989705154,0.999988495,0.9774060550068953,0.8332185415878607,0.9896238268205122,0.999988494121577
922,922.0,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns the memory address of its operand.,5.0,5.0,5.0,0.9943006040000001,0.881434321,0.99548797,0.9999815459999999,0.9939535328942024,0.8959412726360466,0.9954523258851037,0.9999815445910106
923,923.0,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the place in memory of that element,5.0,3.0,4.0,0.946935713,0.30945757,0.993879572,0.99992696,0.9437043037826987,0.3939480036494218,0.9938312218696047,0.9999269544232917
924,924.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The address of the where the data is stored: &b will return the address of b.,4.0,5.0,4.5,0.962478817,0.479855031,0.99190847,0.9999538859999999,0.9601939225173839,0.5434967017824529,0.9918445485666303,0.9999538824791302
925,925.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The & operator returns the address of a variable,5.0,5.0,5.0,0.9511026140000001,0.329180449,0.995880717,0.999957674,0.9481249528882556,0.4112577150769019,0.9958481755061396,0.9999576707683496
926,926.0,6.2,What does the address (&) operator return?,The memory address of its operand.,"the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",3.0,3.0,3.0,0.96463722,0.26965794,0.979865834,0.99994983,0.9624837638866368,0.3590180063493075,0.9797067782033307,0.9999498261694489
927,927.0,6.2,What does the address (&) operator return?,The memory address of its operand.,& returns the memory address of its operand.,5.0,5.0,5.0,0.984346211,0.8381464479999999,0.9920817409999999,0.999980648,0.9833929559782131,0.8579498318357756,0.9920191883721194,0.9999806465224473
928,928.0,6.2,What does the address (&) operator return?,The memory address of its operand.,the address of the variable in memory,5.0,5.0,5.0,0.9605418440000001,0.564321399,0.990684427,0.999939543,0.9581389953761013,0.6176282956236635,0.9906108358770825,0.9999395383840218
929,929.0,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns the address location in memory of the item.,5.0,4.0,4.5,0.974655449,0.66098392,0.994251352,0.9999392359999999,0.9731120641673767,0.702463797801755,0.9942059388556258,0.9999392313605818
930,930.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The address operator returns the memory address of its operand.,5.0,5.0,5.0,0.989704549,0.8548108940000001,0.99873675,0.9999885270000001,0.9890775959749329,0.8725753209116265,0.9987267705831647,0.9999885261240203
931,931.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The & operator returns the memory address of the variable it precedes.,5.0,5.0,5.0,0.972027421,0.61815089,0.995556054,0.999985439,0.970323999457517,0.6648715482693923,0.9955209477347896,0.999985437888247
932,932.0,6.2,What does the address (&) operator return?,The memory address of its operand.,"The memory address of operand, 0x000000 or something along those lines. ",4.0,5.0,4.5,0.9744994640000001,0.626061678,0.993718345,0.999962696,0.9729465802860151,0.6718144219464033,0.993668721209254,0.9999626931517863
933,933.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The object's memory address.,4.0,5.0,4.5,0.971028268,0.736517251,0.998286825,0.9998341959999999,0.9692640019159953,0.7687553449316817,0.9982732912676139,0.9998341833406277
934,934.0,6.2,What does the address (&) operator return?,The memory address of its operand.,the reference to a variable,5.0,4.0,4.5,0.939795733,0.045016252,0.9893676490000001,0.9999113079999999,0.9361295266999948,0.1618620640620772,0.9892836555999867,0.9999113012282391
935,935.0,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the memory address of its operand,5.0,5.0,5.0,0.980527222,0.722644985,0.9952328029999999,0.999977103,0.9793414053637439,0.7565804022519013,0.9951951431179508,0.9999771012517814
936,936.0,6.2,What does the address (&) operator return?,The memory address of its operand.,memory address of its operand,5.0,5.0,5.0,0.981863082,0.817086935,0.9993846890000001,0.9999830129999999,0.980758614055323,0.8394670285476113,0.9993798281688483,0.9999830117030183
937,937.0,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the address number of the specified variable,5.0,4.0,4.5,0.9545938970000001,0.22800833,0.994523908,0.9999488990000001,0.9518288414786484,0.32246438098015673,0.9944806479923246,0.9999488950983658
938,938.0,6.2,What does the address (&) operator return?,The memory address of its operand.,"It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.",4.0,5.0,4.5,0.976160705,0.562133312,0.988407095,0.999956937,0.97470898441819,0.615707929203111,0.9883155134196908,0.9999569337120785
939,939.0,6.2,What does the address (&) operator return?,The memory address of its operand.,The & is a unary operator that returns the memory address of its operand,5.0,5.0,5.0,0.9718675609999999,0.621488214,0.993369698,0.999972712,0.9701544046036883,0.6678005382702944,0.9933173199692055,0.9999727099165224
940,940.0,6.2,What does the address (&) operator return?,The memory address of its operand.,the address of the variable it is attached to,5.0,3.0,4.0,0.9699110390000001,0.245952174,0.991716075,0.999954438,0.9680787380041453,0.33821272895408694,0.9916506336854491,0.9999544345212762
941,941.0,6.2,What does the address (&) operator return?,The memory address of its operand.,the memory address of its operand,5.0,5.0,5.0,0.9879731540000001,0.8377087120000001,0.996959855,0.9999806240000001,0.9872407657363178,0.8575656544628162,0.9969358384758008,0.9999806225206148
942,942.0,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the address of what it is put in front of,5.0,4.0,4.5,0.963935077,0.23456828300000002,0.9900231070000001,0.9999044559999999,0.9617388631018755,0.32822169934163087,0.9899442915842336,0.9999044487050791
943,943.0,6.2,What does the address (&) operator return?,The memory address of its operand.,returns a pointer,4.0,3.0,3.5,0.893957377,-0.081226341,0.9874953540000001,0.999901147,0.8874997926478533,0.05106572166770247,0.9873965698521194,0.9999011394524323
944,944.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns a synonym for the object to which its pointer operand points.,5.0,5.0,5.0,0.979245305,0.642766893,0.98796643,0.999988525,0.977981424591595,0.6864756917835306,0.9878713672562475,0.9999885241238674
945,945.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns a synonym for the object to which its pointer operand points.,5.0,5.0,5.0,0.985166729,0.672287285,0.988727965,0.999988199,0.9842634403412429,0.7123841540696955,0.988638918227116,0.999988198098977
946,946.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to.,5.0,5.0,5.0,0.969689727,0.680470109,0.9904702329999999,0.9999875429999999,0.9678439489619173,0.7195657791307152,0.9903949497882563,0.9999875420488903
947,947.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).",5.0,5.0,5.0,0.9949439170000001,0.8602736590000001,0.9972173540000001,0.99999431,0.9946360211601928,0.8773696963040901,0.9971953716652772,0.9999943095655605
948,948.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns an alias/nickname for the object to which the pointer operand points.,5.0,5.0,5.0,0.9740737079999999,0.550632715,0.986656869,0.999988848,0.97249489739732,0.6056144730036512,0.9865514609919768,0.9999888471485289
949,949.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the * operator returns the value in the memory address the element points to.,4.0,4.0,4.0,0.9781473279999999,0.46950343299999997,0.9848931759999999,0.999957894,0.9768165850518573,0.5344116602835277,0.9847738351777149,0.9999578907851469
950,950.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * returns the value,4.0,4.0,4.0,0.922491133,0.052412774,0.993661128,0.999947745,0.9177711436925701,0.1683535940961563,0.9936110522066471,0.9999477410102563
951,951.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),5.0,5.0,5.0,0.974811196,0.316938937,0.997866583,0.9999680559999999,0.9732772955554618,0.40051399758230916,0.9978497294416969,0.9999680535610299
952,952.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The dereferencing operator returns the dereferenced object.,4.0,5.0,4.5,0.962034583,0.529946148,0.990112808,0.999947255,0.9597226363901739,0.5874589843858266,0.9900347012038018,0.9999472509728441
953,953.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,* returns the synonym for the object its operand points to.,5.0,5.0,5.0,0.975668013,0.6844097379999999,0.990271128,0.9999808179999999,0.974186289386771,0.7230233798755826,0.9901942718994465,0.999980816535427
954,954.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the information in the address the pointer points to.,4.0,4.0,4.0,0.978915632,0.404523075,0.9893923459999999,0.999960011,0.9776316757848496,0.4773818906725927,0.9893085477012393,0.9999600079467829
955,955.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the star operator returns the value at the memory address the pointer is pointing at.,5.0,4.0,4.5,0.9714989070000001,0.46704474100000004,0.9881493029999999,0.9999568259999999,0.9697633010052684,0.5322537983907962,0.9880556849155745,0.9999568227036034
956,956.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns the object at that memory location.,4.0,4.0,4.0,0.971813321,0.5603474979999999,0.987600224,0.999968183,0.9700968615981103,0.6141406161854144,0.9875022683036875,0.9999681805707267
957,957.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the value of the object's memory address it precedes.,4.0,3.0,3.5,0.977387667,0.515046835,0.9984234909999999,0.999974899,0.9760106636440351,0.5743826577249115,0.998411036901084,0.9999748970835028
958,958.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value of the object that the operand points to,4.0,5.0,4.5,0.9775027040000001,0.37730550799999996,0.991498212,0.999957416,0.9761327059510532,0.45349449418610066,0.9914310496122728,0.9999574127486509
959,959.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value stored in the object being pointed to.,4.0,4.0,4.0,0.973143458,0.40861126799999997,0.990422007,0.9999798679999999,0.9715079987811917,0.48096987805972025,0.9903463428127122,0.999979866462893
960,960.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the value of the variable the pointer points to.,4.0,4.0,4.0,0.974209905,0.347071111,0.985768237,0.99988105,0.9726393882662487,0.4269593880662552,0.9856558089807826,0.9998810409179977
961,961.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns synonym for the object its operand points to,5.0,5.0,5.0,0.960443616,0.522073031,0.990144342,0.999978032,0.9580347856719731,0.5805491725219102,0.9900664843159573,0.999978030322712
962,962.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,synonym for the object its operand points to,5.0,5.0,5.0,0.960668445,0.592390001,0.9870429390000001,0.999979306,0.9582733058858572,0.6422625998138779,0.9869405808660774,0.9999793044199835
963,963.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to,5.0,5.0,5.0,0.960443616,0.5260544420000001,0.990144342,0.999985386,0.9580347856719731,0.5840434430837382,0.9900664843159573,0.9999853848842003
964,964.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",4.0,5.0,4.5,0.981673837,0.41711369200000004,0.9947355040000001,0.999981325,0.9805578447689922,0.48843199887251243,0.9946939155574818,0.9999813235741372
965,965.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,It is unary operator that returns the value of the variable located at the address,4.0,4.0,4.0,0.971781075,0.180783749,0.9902490620000001,0.9999806520000001,0.9700626519418076,0.2810179030398083,0.9901720315825562,0.9999806505227528
966,966.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a reference to a = variable,1.0,3.0,2.0,0.9240933659999999,0.17628458100000002,0.9820492890000001,0.999935492,0.9194709464664645,0.2770692249718775,0.9819074820516077,0.999935487074722
967,967.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a synonym for the object to which its pointer operand points,5.0,5.0,5.0,0.975050271,0.551865995,0.988330934,0.99998777,0.973530929295479,0.606696856610491,0.9882387507633555,0.9999877690662221
968,968.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the actual data at the address pointed to,4.0,3.0,3.5,0.9664196970000001,0.13617700300000002,0.9899316579999999,0.999974521,0.9643747868208814,0.24186895825447025,0.9898521201558225,0.999974519054642
969,969.0,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,will return zero or many characters placed before the operator,1.0,3.0,2.0,0.953915596,0.145675629,0.990671247,0.999960555,0.9511092345791927,0.25020539204882447,0.990597551757776,0.999960551988318
970,970.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,2.0,4.0,3.0,0.984288395,0.658911228,0.9939967670000001,0.9999745940000001,0.9833316192081081,0.7006447073739304,0.9939493426861542,0.9999745920602158
971,971.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,5.0,4.0,4.5,0.988145948,0.6118943689999999,0.99559827,0.9999773190000001,0.9874240822205695,0.6593805358746009,0.9955634972325621,0.9999773172682734
972,972.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ).,5.0,3.0,4.0,0.931550622,0.11565396900000001,0.981880297,0.999884608,0.9273823204267074,0.22385699376610305,0.9817371550493438,0.999884599189656
973,973.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Using either the name of the array as a pointer or using a separate pointer that points to the array.,3.0,3.0,3.0,0.985222101,0.652766407,0.994947347,0.999976237,0.9843221842812291,0.6952517280688543,0.9949074320738883,0.9999762351856613
974,974.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An element b[3] can be referenced by using *( bPtr + 3) instead.,5.0,3.0,4.0,0.946856082,0.17532129600000002,0.987554668,0.999910435,0.9436198235637241,0.27622380147298464,0.9874563524205976,0.9999104281615844
975,975.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you get the memory location of the first element and the you add an offset to it to get other elements.,5.0,5.0,5.0,0.9818717240000001,0.401956201,0.99068966,0.9999090359999999,0.9807677823195968,0.47512908324976655,0.990616110216713,0.9999090290547686
976,976.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",yes *(array +offset),5.0,3.0,4.0,0.8646551370000001,0.208500639,0.979248714,0.999912283,0.8564131599088426,0.30534352850083807,0.9790847830814488,0.9999122763026819
977,977.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",3.0,4.0,3.5,0.978958309,0.316185683,0.993042016,0.9999470570000001,0.9776769516485857,0.39985290700970083,0.9929870493483725,0.9999470529577265
978,978.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.,5.0,4.0,4.5,0.9648809429999999,0.21530655,0.978769419,0.999930546,0.9627423286718222,0.3113167109865752,0.9786017017489002,0.9999305406970879
979,979.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(array + element),5.0,3.0,4.0,0.892416656,0.34547275299999997,0.986348305,0.999895025,0.8858652477161251,0.4255565951100238,0.9862404593994367,0.9998950169850089
980,980.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*f[3],2.0,3.0,2.5,0.7369448540000001,0.010253355,0.983154579,0.9997152429999999,0.7209258161216059,0.13135253675355318,0.9830215036167244,0.9997152212583962
981,981.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).,5.0,5.0,5.0,0.9846476909999999,0.506674469,0.9961416759999999,0.999936633,0.9837127949406321,0.5670346818322821,0.9961111960289085,0.999936628161839
982,982.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",2.0,5.0,3.5,0.990166545,0.8123720879999999,0.997825905,0.999979912,0.9895677257390361,0.8353290606071945,0.9978087300938102,0.9999799104662527
983,983.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.,5.0,3.0,4.0,0.9341177340000001,0.132936642,0.972483497,0.9999060740000001,0.9301057595884885,0.23902506747002333,0.9722661222497264,0.9999060668286158
984,984.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Takes the number of array elements and points to each at a time,1.0,3.0,2.0,0.9808537359999999,0.5079174639999999,0.995765935,0.999965155,0.9796878027996445,0.5681255917727527,0.995732486751797,0.9999651523395346
985,985.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),5.0,3.0,4.0,0.964249611,0.375001133,0.9944914779999999,0.9999470490000001,0.9620725510022521,0.4514720680346905,0.9944479618019523,0.9999470449571156
986,986.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",by using the *(pointer + element-index),5.0,3.0,4.0,0.920960784,0.343614608,0.992094632,0.9999539359999999,0.9161476023754042,0.4239258010590937,0.9920321812083851,0.9999539324829477
987,987.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",using the star operator.   array: b[n] can be accessed by *(bpointer +n),5.0,4.0,4.5,0.9521059390000001,0.20633438199999998,0.9926077640000001,0.9999391959999999,0.9491893764883923,0.3034423210986247,0.9925493668463187,0.9999391913575278
988,988.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element A[n] can be accessed by *(APtr + n),5.0,3.0,4.0,0.9349443909999999,0.066323936,0.98534815,0.9998876529999999,0.9309827567928022,0.18056267370572687,0.9852324033793338,0.9998876444221461
989,989.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",2.0,4.0,3.0,0.9765061740000001,0.478480101,0.9967688809999999,0.999967171,0.9750754911400557,0.5422899995797479,0.9967433558202293,0.9999671684934591
990,990.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);",5.0,5.0,5.0,0.98215729,0.471557319,0.993901795,0.999972008,0.9810707381811536,0.5362142456953706,0.9938536204267631,0.9999720058627709
991,991.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&[b3] is as bptr + 3. Array can be treated as pointer,4.0,3.0,3.5,0.959839523,0.26768913899999996,0.9846110159999999,0.999895193,0.9573939057518304,0.35729009547138063,0.9844894461713786,0.9998951849978358
992,992.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",a[i] = *(a+i),5.0,3.0,4.0,0.890972138,0.054666877,0.983684053,0.999918944,0.8843327641738808,0.1703318992136707,0.983555160353118,0.9999189378112587
993,993.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&b[3]  bPtr + 3,5.0,3.0,4.0,0.867509842,0.007838936999999999,0.9827795290000001,0.9998807259999999,0.8594417053686169,0.12923353177231725,0.9826434907983718,0.9998807168932596
994,994.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(arrayName + index),5.0,3.0,4.0,0.8809921740000001,0.09497126199999999,0.986348305,0.99988664,0.8737450590831934,0.20570489286292742,0.9862404593994367,0.9998866313448022
995,995.0,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",multi-dimensional array,0.0,2.0,1.0,0.6500259039999999,0.405374587,0.983917672,0.9997349109999999,0.6287138392655552,0.4781292170135917,0.9837906248954744,0.999734890760076
996,996.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the number of bytes of an array during program compilation.,4.0,5.0,4.5,0.96265316,0.43502661600000003,0.9949687890000001,0.999945794,0.9603788823297266,0.5041532100233989,0.9949290434613064,0.9999457898612946
997,997.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The sizeof operator returns the size of the operand.,5.0,3.0,4.0,0.973719537,0.647907138,0.9974101129999999,0.99991387,0.9721191587574138,0.690987008697078,0.9973896534219836,0.9999138634238515
998,998.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Returns size of operand in bytes.,5.0,5.0,5.0,0.986769497,0.8034564259999999,0.999569919,0.9999822079999999,0.9859638106945621,0.8275042630000626,0.9995665214479937,0.9999822066415555
999,999.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,It returns the size of an array in bytes.,4.0,5.0,4.5,0.982997298,0.7121525409999999,0.996389262,0.9999643229999999,0.9819618994095727,0.7473717477847215,0.9963607379077105,0.9999643202760101
1000,1000.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Returns the size of the array in bytes during the program compilation.,4.0,5.0,4.5,0.971041024,0.589925528,0.9939890029999999,0.99993482,0.9692775347069089,0.6400996642479894,0.9939415173521408,0.9999348150234139
1001,1001.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,it returns the size of the argument passed in,5.0,3.0,4.0,0.9659749870000001,0.301847994,0.99447756,0.99991376,0.9639029957071179,0.38726948756434726,0.9944339338525966,0.9999137534154529
1002,1002.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The byte size of the date stored ina variable.,4.0,5.0,4.5,0.964977801,0.5418422820000001,0.9981071309999999,0.999981802,0.962845084948265,0.5978995821627858,0.9980921777217372,0.9999818006105569
1003,1003.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size of the operand in bytes,5.0,5.0,5.0,0.975011706,0.670163274,0.9960427829999999,0.9999008140000001,0.9734900158365904,0.7105200237123174,0.9960115217944189,0.9999008064270073
1004,1004.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"The amount of memory required for a specific parameter such as ints, doubles.",4.0,3.0,3.5,0.966132581,0.24892257199999998,0.9971617629999999,0.9999743440000001,0.9640701865703376,0.340819687715268,0.9971393415077378,0.9999743420411279
1005,1005.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size of the operand in bytes.,5.0,5.0,5.0,0.988666952,0.8118248579999999,0.9961002840000001,0.999909064,0.9879768133429534,0.834848786232218,0.9960694770405677,0.9999090570569066
1006,1006.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the information in bits.,1.0,4.0,2.5,0.97563374,0.654696345,0.992118754,0.999918985,0.9741499292940319,0.6969455309793181,0.9920564937672555,0.9999189788143891
1007,1007.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the string.,3.0,3.0,3.0,0.969939709,0.585998654,0.990513857,0.9999403040000001,0.968109153895921,0.6366532578814504,0.9904389184089412,0.9999402994421253
1008,1008.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size in bytes of the respective object.,4.0,5.0,4.5,0.9810112120000001,0.6079403760000001,0.9968122220000001,0.999965819,0.9798548684771222,0.6559103286185368,0.9967870392052721,0.999965816390232
1009,1009.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The sizeof operator returns the total number of bytes of its operand.,5.0,5.0,5.0,0.98074913,0.616787314,0.997212615,0.99996311,0.9795768267000597,0.6636748108625746,0.9971905952281456,0.999963107183396
1010,1010.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"The size of an operand in bytes. Used with variable names, type names, and constant values",5.0,5.0,5.0,0.974460483,0.558668375,0.996691655,0.999975837,0.9729052254943404,0.6126669401272058,0.9966655197506117,0.9999758351551206
1011,1011.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size in bytes needed to store the object in memory,4.0,5.0,4.5,0.961472035,0.41848158799999996,0.9958162009999999,0.9999057259999999,0.9591258313993587,0.48963252771126886,0.9957831498429243,0.9999057188020454
1012,1012.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the list object.,4.0,2.0,3.0,0.968787849,0.514397025,0.9893222429999999,0.999930945,0.9668871500905205,0.5738123543943129,0.989237890901866,0.9999309397275521
1013,1013.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the sizeof operator returns the size in bytes of an array parameter,3.0,5.0,4.0,0.964633167,0.511540234,0.99696199,0.9999706140000001,0.9624794640746603,0.5713051023943072,0.9969379903418646,0.9999706117563371
1014,1014.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of operand in bytes,5.0,5.0,5.0,0.977939963,0.800544024,0.994898573,0.9999829090000001,0.9765965923278224,0.8249482042126607,0.994858272769256,0.999982907695078
1015,1015.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,returns the size in bytes of the specified data,4.0,5.0,4.5,0.963422418,0.468677402,0.994962226,0.999949649,0.9611949851576176,0.533686697247444,0.9949224286149475,0.9999496451556295
1016,1016.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"It returns the size of an operand in memory, which is checked at compiler-time.",5.0,3.0,4.0,0.978074372,0.46045506,0.9946139270000001,0.9999538929999999,0.9767391863144876,0.5264703893606466,0.9945713781240278,0.9999538894796648
1017,1017.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Return size of operand in bytes,5.0,5.0,5.0,0.966177225,0.632797837,0.999221666,0.999977945,0.9641175492167429,0.6777263868486685,0.9992155173204645,0.9999779433160695
1018,1018.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the total number of bytes of an object.,4.0,5.0,4.5,0.969244599,0.462290734,0.992425133,0.9998815679999999,0.9673717143935754,0.5280814618219707,0.992365293098742,0.9998815589575476
1019,1019.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,total number of bytes in the array,4.0,5.0,4.5,0.946422517,0.353161812,0.9937298240000001,0.999925855,0.9431598561372241,0.43230486915454186,0.9936802908910082,0.9999258493389235
1020,1020.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,it returns the size in bytes of a certain variable type,4.0,5.0,4.5,0.9699532390000001,0.456861436,0.994375133,0.99997254,0.968123507820432,0.5233164586176315,0.9943306977002292,0.9999725379033898
1021,1021.0,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",3.0,5.0,4.0,0.974457502,0.516663313,0.990978123,0.999961497,0.972902062963005,0.5758013536317753,0.9909068520154611,0.9999614940602412
1022,1022.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",They can be passed by value or by reference,2.0,3.0,2.5,0.926579356,0.039529849,0.9838761109999999,0.9998937640000001,0.9221083236131555,0.15704694286679627,0.983748735572068,0.9998937558887298
1023,1023.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",5.0,5.0,5.0,0.995587885,0.984490335,0.99697614,0.9999834870000001,0.9953192043131418,0.9863880001754872,0.9969522521239728,0.999983485739209
1024,1024.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",#NAME?,5.0,5.0,5.0,0.948592663,0.8834802509999999,0.991224973,0.999921673,0.9454621556096203,0.8977368754940688,0.9911556520800134,0.9999216670196217
1025,1025.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",5.0,5.0,5.0,0.9955886009999999,0.980459929,0.996432874,0.9999910670000001,0.9953199639147641,0.9828507293340656,0.9964046944335977,0.9999910663179529
1026,1026.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass-by-value or pass-by-reference.,2.0,3.0,2.5,0.6894331570000001,0.186003253,0.977174068,0.99994595,0.6705208410942306,0.2855987813200319,0.976993747802035,0.9999459458732053
1027,1027.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass a pointer to a pointer or pass a reference to pointer.,2.0,3.0,2.5,0.9403257970000001,0.37567547,0.985626303,0.999861485,0.9366918695412307,0.45206389739565106,0.985512753731189,0.9998614744241819
1028,1028.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",by address &bPtr or directly bPtr.,2.0,3.0,2.5,0.896904349,0.030364929,0.98252935,0.999959156,0.8906262238099811,0.14900338490267037,0.9823913354353996,0.9999591528815023
1029,1029.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",5.0,5.0,5.0,0.995587885,0.984490335,0.99697614,0.9999834870000001,0.9953192043131418,0.9863880001754872,0.9969522521239728,0.999983485739209
1030,1030.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",By argument and reference.,1.0,3.0,2.0,0.912768006,0.156745523,0.9856941779999999,0.999814924,0.9074559159787925,0.2599208433616269,0.9855811649298176,0.9998149098691831
1031,1031.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",5.0,5.0,5.0,0.995987952,0.983364523,0.9968195870000001,0.999986357,0.9957436338413963,0.9853999354592966,0.996794462387267,0.9999863559583376
1032,1032.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pass by value and pass by reference with reference or pointer arguments.,2.0,3.0,2.5,0.936778069,0.22871638800000002,0.9855950490000001,0.9999075940000001,0.9329280986693143,0.32308580545139737,0.9854812528309763,0.99990758694467
1033,1033.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass them with the pointer (*) or the memory address (&),2.0,3.0,2.5,0.91676116,0.062193479,0.979501235,0.999892808,0.9116922375660947,0.1769375934761308,0.9793392989457421,0.9998927998157378
1034,1034.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,5.0,5.0,5.0,0.802444339,0.148603916,0.9874685259999999,0.999676256,0.7904139656552025,0.2527753922474183,0.9873695299164019,0.999676231281683
1035,1035.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,5.0,5.0,5.0,0.9803450109999999,0.938250303,0.991224973,0.9999682529999999,0.979148098420725,0.945805608004575,0.9911556520800134,0.9999682505760713
1036,1036.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",5.0,5.0,5.0,0.9707992670000001,0.926033676,0.99697614,0.9999834870000001,0.9690210556434966,0.9350837307377133,0.9969522521239728,0.999983485739209
1037,1037.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),2.0,3.0,2.5,0.93016386,0.19426707899999998,0.98938734,0.9998482209999999,0.9259111100008007,0.2928514974851976,0.9893035021548624,0.9998482094114565
1038,1038.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass the reference or the dereference in a function,2.0,2.0,2.0,0.925670326,0.02715233,0.982893562,0.9999165259999999,0.9211439372127048,0.1461838593343083,0.9827584246357672,0.9999165196266409
1039,1039.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,5.0,5.0,5.0,0.9778133040000001,0.792563915,0.9879758129999999,0.9999613190000001,0.9764622202860915,0.8179444912177254,0.9878808243800299,0.9999613160466506
1040,1040.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",5.0,5.0,5.0,0.99409765,0.9794366959999999,0.997101949,0.9999796879999999,0.9937382197829552,0.981952692695851,0.9970790549893619,0.9999796864491498
1041,1041.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5.0,5.0,5.0,0.983448267,0.940593481,0.991224973,0.999921673,0.9824403306721545,0.9478620894646711,0.9911556520800134,0.9999216670196217
1042,1042.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",2.0,3.0,2.5,0.952845335,0.236847416,0.991421153,0.999968511,0.9499737988363319,0.3302219719455872,0.991353381861921,0.9999685085957698
1043,1043.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,5.0,5.0,5.0,0.9792624120000001,0.8627710340000001,0.990048742,0.9999132740000001,0.977999573341529,0.8795615081879536,0.9899701290954946,0.9999132673783462
1044,1044.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,5.0,5.0,5.0,0.983448267,0.965997517,0.991224973,0.999921673,0.9824403306721545,0.9701578472114645,0.9911556520800134,0.9999216670196217
1045,1045.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",2.0,3.0,2.5,0.9292866590000001,0.194533378,0.988810099,0.999913032,0.9249804908629707,0.29308521381248565,0.9887217010689306,0.999913025359869
1046,1046.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",5.0,3.0,4.0,0.938581765,0.23196952,0.988413315,0.999938615,0.9348416327583402,0.3259409046565135,0.9883217825564196,0.9999386103131677
1047,1047.0,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",2.0,3.0,2.5,0.949166596,0.15509972,0.991521935,0.999951013,0.946071038902768,0.25847641047753933,0.9914549600191246,0.9999510092597726
1048,1048.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.,5.0,5.0,5.0,0.974616826,0.366796613,0.99612067,0.999948678,0.9730710891765133,0.44427140155993344,0.9960900240858016,0.9999486740814921
1049,1049.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A function pointer is a pointer that contains the address of the  function in memory.,5.0,5.0,5.0,0.980108619,0.556563437,0.997116872,0.999957612,0.9788973110649992,0.6108195491173671,0.997094095878012,0.9999576087636158
1050,1050.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5.0,5.0,5.0,0.9438028340000001,0.439000189,0.990028145,0.999918187,0.9403806446054903,0.5076406015936673,0.9899493693834039,0.9999181807534606
1051,1051.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",5.0,5.0,5.0,0.977440596,0.591336966,0.994783311,0.9999457509999999,0.9760668158147989,0.6413384075611628,0.9947421002230116,0.9999457468580114
1052,1052.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,It contains the address of the function in memory.,5.0,5.0,5.0,0.987281263,0.72635138,0.99833646,0.999969577,0.986506741258584,0.7598333060437998,0.9983233183739703,0.9999695746771605
1053,1053.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,when it is dereferenced a function pointer calls its function with zero or more arguments.,4.0,3.0,3.5,0.96509546,0.320933729,0.9936240390000001,0.999928574,0.9629699089249113,0.4040200119290385,0.993573670211127,0.999928568546523
1054,1054.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer to a function,5.0,2.0,3.5,0.9429215190000001,0.144721553,0.9831205909999999,0.999782029,0.9394456609410202,0.24936805079454388,0.9829872471184703,0.9997820123576028
1055,1055.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A pointer to a function itself, contains the address of the function and can be used to call that function",5.0,5.0,5.0,0.9719244840000001,0.437350422,0.9911889490000001,0.999941413,0.9702147939935577,0.5061926897197173,0.9911193434977756,0.9999414085267989
1056,1056.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5.0,5.0,5.0,0.9438028340000001,0.439000189,0.990028145,0.999918187,0.9403806446054903,0.5076406015936673,0.9899493693834039,0.9999181807534606
1057,1057.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A pointer to a function that contains the addresses of the function.,5.0,5.0,5.0,0.9731521609999999,0.5595761539999999,0.996526915,0.99990974,0.9715172317601286,0.613463648991562,0.9964994783382789,0.9999097331085202
1058,1058.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of a function,5.0,5.0,5.0,0.970253885,0.425054461,0.995816644,0.9999208909999999,0.9684424619954863,0.49540118526270827,0.995783596342534,0.9999208849599148
1059,1059.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a function pointer is a pointer to a function. It can be used in substitution for calling a function.,5.0,5.0,5.0,0.964644492,0.33990743799999995,0.99318916,0.999911595,0.9624914787232255,0.4206722170913265,0.9931353557559012,0.999911588250152
1060,1060.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,5.0,5.0,5.0,0.9785526990000001,0.38752985,0.9965251820000001,0.9999629729999999,0.9772466415731351,0.46246784992974566,0.9964977316479332,0.9999629701729357
1061,1061.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",5.0,5.0,5.0,0.9672831890000001,0.323106289,0.990238545,0.999898457,0.9652908621337952,0.4059267511357682,0.9901614315004054,0.999898449247047
1062,1062.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Pointer variables that point to function addresses.,5.0,5.0,5.0,0.934309244,0.42048654,0.9958376170000001,0.9999389740000001,0.9303089318045322,0.49139216637994143,0.9958047350249478,0.9999389693405779
1063,1063.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Contains the address of the function in memory.,5.0,5.0,5.0,0.986753702,0.7182990909999999,0.9973829209999999,0.9999711720000001,0.9859470538403381,0.7527662445402195,0.9973622466107407,0.9999711697989412
1064,1064.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",5.0,3.0,4.0,0.9613804220000001,0.32677564,0.9914180029999999,0.999909002,0.959028639523068,0.40914714339879105,0.9913502069775647,0.9999089950521728
1065,1065.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,pointers that contain the addresses of functions.,5.0,5.0,5.0,0.951379657,0.496517301,0.992993923,0.9999198290000001,0.9484188667321771,0.5581202810999937,0.9929385764235009,0.9999198228788297
1066,1066.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,is a pointer that contains the address of a function,5.0,5.0,5.0,0.9687392709999999,0.41272574700000003,0.995482964,0.999910952,0.966835613878777,0.4845809352570203,0.9954472803387268,0.999910945201058
1067,1067.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of the function definition,4.0,5.0,4.5,0.976765573,0.47383868700000004,0.9970053809999999,0.999938323,0.9753506865328263,0.5382164798387675,0.9969817241218969,0.9999383182908729
1068,1068.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",5.0,5.0,5.0,0.9667739870000001,0.47705093,0.992928473,0.9999420179999999,0.964750651707426,0.5410356929650532,0.9928726093818766,0.9999420135729914
1069,1069.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Function pointer is a pointer to a function. function pointer contains address of functions,5.0,5.0,5.0,0.9469796420000001,0.397534668,0.9949260320000001,0.999923918,0.9437509078883777,0.4712485412509498,0.9948859486897444,0.9999239121910307
1070,1070.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of a function in memory.,5.0,5.0,5.0,0.981283665,0.597770751,0.996602093,0.9999409690000001,0.9801439128078504,0.6469849950465117,0.9965752502291151,0.999940964492899
1071,1071.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,it contains the address of the function in memory,5.0,5.0,5.0,0.984175205,0.641622067,0.996495083,0.999966922,0.9832115363762248,0.6854709395009315,0.9964673948719843,0.9999669194744475
1072,1072.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,it is a pointer that points to the address of a function.,5.0,5.0,5.0,0.9680449959999999,0.42141470299999995,0.994752565,0.999925505,0.9660990602246919,0.49220676518611284,0.994711111335895,0.9999254993122003
1073,1073.0,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",4.0,4.0,4.0,0.972667038,0.381365985,0.985547253,0.9999241790000001,0.9710025666514459,0.4570581567288725,0.9854330792523441,0.9999241732109584
1074,1074.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ",4.0,5.0,4.5,0.967723966,0.241565198,0.988300967,0.999891258,0.9657584807431165,0.33436251577784215,0.9882085470301797,0.999891249697393
1075,1075.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a list in which each item in the list points to the next item in the list.,4.0,5.0,4.5,0.9477376940000001,0.18097628699999999,0.990984235,0.999836301,0.944555122314342,0.2811868832996793,0.9909130122990121,0.9998362885013475
1076,1076.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ",4.0,5.0,4.5,0.970794857,0.274075002,0.992470704,0.999949557,0.9690163770916049,0.36289462439159675,0.992411224100329,0.999949553148605
1077,1077.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",4.0,5.0,4.5,0.974969924,0.387665927,0.987494093,0.9998887890000001,0.9734456894748824,0.4625872774028807,0.987395298890477,0.9998887805088814
1078,1078.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",4.0,5.0,4.5,0.965605319,0.244894967,0.986955012,0.999914468,0.9635108163600317,0.33728487516108274,0.9868519592607466,0.9999144614695096
1079,1079.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,a list of nodes where each node contains a data member and also a pointer to the next node.,4.0,5.0,4.5,0.967195213,0.205293208,0.996531043,0.999902662,0.9651975287366947,0.3025285386084621,0.9965036389486354,0.9999026545681047
1080,1080.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A list of items linked together.  Each item is linked to its successor.,4.0,5.0,4.5,0.9668314459999999,0.310387582,0.9964572140000001,0.9999239,0.9648116097376158,0.3947642252235689,0.9964292267146236,0.9999238941896563
1081,1081.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,4.0,5.0,4.5,0.974321485,0.20983451600000003,0.992061926,0.999946131,0.9727577630553781,0.3065142006907224,0.9919992168376691,0.999946126887025
1082,1082.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. ",4.0,5.0,4.5,0.97117579,0.34293592,0.9877675840000001,0.999968645,0.969420507433489,0.42333015305915955,0.987670950413485,0.9999686426060012
1083,1083.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.",4.0,5.0,4.5,0.960415006,0.228388667,0.98702459,0.9999723909999999,0.9580044334339646,0.3227981823341676,0.9869220869127272,0.9999723888920135
1084,1084.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,2.0,5.0,3.5,0.963572145,0.213682175,0.9969804879999999,0.9999457359999999,0.9613538299510571,0.30989108430702134,0.9969566344722841,0.999945731856866
1085,1085.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",5.0,5.0,5.0,0.968066335,0.2999551,0.9850802759999999,0.99994257,0.9661216986870083,0.38560819618275893,0.9849624132294781,0.9999425656151376
1086,1086.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a data structure containing one or more data elements with a pointer to the next node.,4.0,5.0,4.5,0.969640315,0.309278071,0.994618937,0.9999237190000001,0.9677915279628093,0.3937904670194236,0.994576427702004,0.9999237131758368
1087,1087.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. ",4.0,5.0,4.5,0.971108973,0.306613207,0.9953739709999999,0.999886293,0.9693496215374031,0.3914516590374104,0.995337426316301,0.9998862843183082
1088,1088.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A data type that contains a pointer to at least the next  element in a list.,4.0,5.0,4.5,0.9676493409999999,0.320462287,0.995048059,0.999917899,0.9656793113701214,0.4036062526104931,0.9950089396781062,0.9999178927314715
1089,1089.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,Each component contains a Node - a data item and a pointer to the next item in the list,4.0,5.0,4.5,0.9574286940000001,0.162947595,0.9896933659999999,0.99986205,0.9548362666184551,0.26536406879400193,0.9896119456977212,0.9998620394673204
1090,1090.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.",4.0,5.0,4.5,0.9683644770000001,0.278564513,0.990096182,0.999922008,0.9664379963781771,0.3668348270293809,0.9900179438617995,0.9999220020451994
1091,1091.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"An array based list that uses an implicit ordering scheme, often using pointers.",1.0,4.0,2.5,0.966338575,0.36417731600000003,0.9947015659999999,0.9999069970000001,0.9642887248057912,0.44197258528605865,0.9946597094542174,0.9999069898990882
1092,1092.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,a series of structures containing data items and a pointer that links the structure to the next structure.,4.0,5.0,4.5,0.9663166999999999,0.275822818,0.9971046490000001,0.999959279,0.9642655177031543,0.36442858860586447,0.9970817763188101,0.9999592758908936
1093,1093.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",4.0,5.0,4.5,0.96168071,0.205002949,0.9879535429999999,0.999923522,0.9593472138973114,0.30227379387625397,0.9878583784515812,0.9999235161607956
1094,1094.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,4.0,4.0,4.0,0.967143476,0.248268142,0.9927945420000001,0.9999460990000001,0.9651426411541066,0.340245329658846,0.9927376203543475,0.9999460948845819
1095,1095.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,4.0,5.0,4.5,0.96327585,0.172558323,0.994577747,0.9998611059999999,0.9610394917350231,0.27379888849187684,0.9945349123094219,0.9998610953952446
1096,1096.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,linear collection of self-referential nodes connected by pointers.,4.0,4.0,4.0,0.948520005,0.343479186,0.997991568,0.999966012,0.9453850730192945,0.4238069484442735,0.9979757017976544,0.9999660094049677
1097,1097.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,the items of a data structure are linked to each other using pointers,4.0,5.0,4.5,0.962578952,0.144348636,0.9959522590000001,0.9999001590000001,0.9603001553504138,0.24904076157594646,0.995920282673319,0.9999001513769972
1098,1098.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A list of objects where each object contains a link to the next item in the list,4.0,5.0,4.5,0.9577719570000001,0.160771385,0.996434623,0.9998968890000001,0.9552004330034787,0.26345412617834235,0.9964064572503403,0.999896881127328
1099,1099.0,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",4.0,5.0,4.5,0.972600639,0.357524306,0.9838115740000001,0.99996824,0.9709321242099385,0.4361335957945072,0.9836836887429572,0.9999682375750786
1100,1100.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.,5.0,5.0,5.0,0.966960073,0.44449949299999997,0.994138753,0.999919445,0.964948069622912,0.5124670453036342,0.994092450346537,0.9999194388495107
1101,1101.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",5.0,5.0,5.0,0.968367696,0.43627697200000004,0.990372218,0.9999536459999999,0.966441411402789,0.5052505803181524,0.9902961604897872,0.9999536424608059
1102,1102.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Array size is fixed,but Linked is not fixed.",5.0,5.0,5.0,0.9694099429999999,0.312909454,0.990703248,0.9999430440000001,0.9675471272017291,0.3969775368084061,0.9906298055591362,0.9999430396513281
1103,1103.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,You can insert into and delete items from a pointer-based linked list without shifting data.,5.0,4.0,4.5,0.9620057340000001,0.445567101,0.9970144409999999,0.999942687,0.9596920305979926,0.5134040274956189,0.9969908556940453,0.9999426826240706
1104,1104.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,5.0,5.0,5.0,0.9793691040000001,0.467725813,0.9959867859999999,0.9999313559999999,0.9781127624704213,0.532851538699467,0.9959550824295625,0.9999313507589326
1105,1105.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",3.0,5.0,4.0,0.9793309570000001,0.545303881,0.97565876,0.999898238,0.9780722924661112,0.6009376416554012,0.9754664691785118,0.999898230230326
1106,1106.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,You can expand when you need it.  You do not have to predetermine the size.,5.0,5.0,5.0,0.9506251809999999,0.255853295,0.9902269359999999,0.999910537,0.9476184460707398,0.3469024109887718,0.9901497307916778,0.9999105301693721
1107,1107.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists are able to grow and shrink in size as needed,5.0,5.0,5.0,0.975797653,0.32371878600000004,0.9952165079999999,0.999951833,0.9743238239598373,0.40646430685064117,0.995178719390781,0.9999518293223809
1108,1108.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions,5.0,5.0,5.0,0.9778863190000001,0.411096841,0.989167026,0.999915509,0.9765396816163325,0.483151331962162,0.989081447719287,0.9999155025489915
1109,1109.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",5.0,5.0,5.0,0.9714861509999999,0.46389421799999997,0.9827104640000001,0.9999433590000001,0.9697497682143545,0.5294887535930444,0.9825738801989862,0.999943354675379
1110,1110.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,There is no limit as to how many you create where an array can only hold a given amount of information.,3.0,3.0,3.0,0.9666460159999999,0.264164954,0.9915932470000001,0.9999512709999999,0.9646148877699847,0.3541971076085512,0.991526835369351,0.9999512672794711
1111,1111.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists have constant time insertion and deletion,4.0,3.0,3.5,0.949894786,0.37492308,0.9958889790000001,0.999834552,0.946843572848781,0.45140356510943047,0.9958565027742513,0.9998345393678089
1112,1112.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",5.0,5.0,5.0,0.978908062,0.398603886,0.988825429,0.999920025,0.9776236448012172,0.4721869364534488,0.9887371521727978,0.9999200188937946
1113,1113.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,5.0,5.0,5.0,0.978535295,0.46921074399999996,0.99701729,0.9999108240000001,0.9772281777370533,0.5341547828708539,0.9969937272005632,0.9999108171912852
1114,1114.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",5.0,5.0,5.0,0.9668989179999999,0.222669855,0.98709313,0.9999129040000001,0.9648831905206605,0.31777908824410045,0.98699116836472,0.9999128973500961
1115,1115.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"They grow as needed, while arrays are of fixed size.",5.0,5.0,5.0,0.9778344040000001,0.26847419100000003,0.990593097,0.999950855,0.9764846051942349,0.3579790934404686,0.9905187843887472,0.9999508512477092
1116,1116.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i',5.0,5.0,5.0,0.980595172,0.427239925,0.988679489,0.999933744,0.9794134932551344,0.4973192496170628,0.9885900592766228,0.9999337389412598
1117,1117.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,5.0,5.0,5.0,0.98030597,0.44507744899999996,0.994947237,0.999937132,0.9791066799752832,0.5129742862382756,0.9949073212049108,0.9999371271999385
1118,1118.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,more memory can be allocated on the fly for more items,4.0,5.0,4.5,0.94846046,0.149928048,0.994891295,0.999953196,0.9453219019597972,0.25393751177428314,0.9948509372745434,0.9999531924264479
1119,1119.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"A linked list may be increased in size as needed, while an array's size is set when it is created",5.0,5.0,5.0,0.972630978,0.353332132,0.9885088320000001,0.9999713990000001,0.9709643107373394,0.43245434986931625,0.9884180541211993,0.999971396816273
1120,1120.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Array has a fixed size, but linked list is able to grow in size as needed",5.0,5.0,5.0,0.975596488,0.36094567200000005,0.9888519840000001,0.999929168,0.9741104087917496,0.4391363449442532,0.9887639169518708,0.9999291625918757
1121,1121.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,its resizeable,5.0,5.0,5.0,0.815081835,0.042696979,0.99488365,0.999639823,0.80382103613489,0.15982656273635562,0.9948432318806059,0.9996397954999714
1122,1122.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists do not have a set size and can grow or shrink as needed.,5.0,5.0,5.0,0.973478675,0.402835757,0.995152514,0.999949312,0.9718636291960292,0.47590102230310194,0.9951142198512594,0.999949308129899
1123,1123.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,linked lists are abe to grow as needed to a new size,5.0,5.0,5.0,0.967278302,0.370385677,0.991444702,0.9999112240000001,0.965285677534454,0.44742133023590197,0.9913771168942085,0.9999112172218257
1124,1124.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",5.0,5.0,5.0,0.96564287,0.26643908,0.9870804390000001,0.9999323929999999,0.9635506540702539,0.3561929858375729,0.9869783771084137,0.9999323878381089
1125,1125.0,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,5.0,5.0,5.0,0.9766600129999999,0.39367008200000003,0.993238642,0.9999090429999999,0.9752386983383425,0.46785680171603305,0.9931852286535888,0.9999090360553031
1126,1126.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.,5.0,5.0,5.0,0.98218596,0.369691461,0.9937954809999999,0.9999458370000001,0.9811011540729293,0.4468120541444987,0.99374646656789,0.9999458328645777
1127,1127.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",4.0,5.0,4.5,0.9874574540000001,0.659862101,0.987816847,0.9999611209999999,0.9866936616069575,0.7014792375271692,0.9877206025811173,0.9999611180315328
1128,1128.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",5.0,5.0,5.0,0.982298613,0.47599741799999995,0.994953568,0.9999833929999999,0.9812206672035961,0.5401110820750614,0.9949137022185169,0.9999833917320319
1129,1129.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,5.0,5.0,5.0,0.974989772,0.450431585,0.975884066,0.9999543479999999,0.9734667461410826,0.5176733237927565,0.975693555049867,0.9999543445144047
1130,1130.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",5.0,5.0,5.0,0.9839523440000001,0.5819603210000001,0.9898839429999999,0.999981432,0.982975104005906,0.6331090299379506,0.9898040282170738,0.9999814305823068
1131,1131.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,5.0,5.0,0.9870074990000001,0.5959920879999999,0.9830734870000001,0.9999720679999999,0.9862163060930418,0.6454239580773786,0.9829397710064969,0.999972065867352
1132,1132.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You have to keep up with the head of the list.,1.0,3.0,2.0,0.96379298,0.15079089999999998,0.9852583709999999,0.999897275,0.9615881129458357,0.2546947906241216,0.9851419151435815,0.9998972671567996
1133,1133.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are easier to implement and require less memory,3.0,4.0,3.5,0.964852631,0.29164204,0.991920951,0.999978995,0.9627122925808576,0.3783122699805383,0.9918571281639795,0.9999789933962383
1134,1134.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,2.0,3.0,2.5,0.9822193379999999,0.531071186,0.989054118,0.999988405,0.9811365646636405,0.5884463698037947,0.9889676477691616,0.9999884041147052
1135,1135.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You don't have to iterate through the entire list to access elements.,5.0,4.0,4.5,0.968474925,0.461722344,0.9919526590000001,0.999987452,0.966555170232898,0.5275826164516643,0.9918890866506995,0.9999874510419425
1136,1136.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,2.0,4.0,3.0,0.9696496729999999,0.263609469,0.985761766,0.9999333020000001,0.9678014558287051,0.35370958826351573,0.985649286861205,0.9999332969075126
1137,1137.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Take up less memory and are contiguously stored,4.0,4.0,4.0,0.945142686,0.093428656,0.988675447,0.99995162,0.9418020883943825,0.20435103044221797,0.9885859853456489,0.9999516163061181
1138,1138.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays, being fixed, are less error prone.",1.0,3.0,2.0,0.9699878690000001,0.348088861,0.9933026770000001,0.99990959,0.9681602466530861,0.427852612569905,0.9932497695170023,0.9999095830970675
1139,1139.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ",5.0,5.0,5.0,0.984611034,0.475446105,0.987844212,0.9999662020000001,0.9836739056715418,0.5396272242703152,0.9877481837590247,0.9999661994194745
1140,1140.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",5.0,4.0,4.5,0.987787306,0.652920187,0.982974501,0.999976155,0.9870436003141083,0.695386692514122,0.982840003037326,0.9999761531794004
1141,1141.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array items are accessed directly with equal access time,5.0,5.0,5.0,0.953121662,0.40157329999999997,0.993986046,0.999981858,0.9502669530786312,0.47479303161068814,0.993938536992445,0.9999818566148325
1142,1142.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-bases implementations require less memory than a pointer-bases one.,3.0,4.0,3.5,0.940297127,0.290293783,0.988922593,0.999963901,0.9366614536494549,0.3771289772371168,0.9888350837485407,0.9999638982437898
1143,1143.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,5.0,5.0,5.0,0.984592855,0.620211184,0.991362022,0.9999838679999999,0.9836546196409666,0.6666797576386111,0.9912937837391054,0.9999838667682989
1144,1144.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",link lists only allow sequential access where arrays allow random access,5.0,4.0,4.5,0.936958909,0.35566601200000003,0.991816835,0.999955455,0.9331199511237519,0.4345026709742811,0.9917521896688573,0.9999554515989258
1145,1145.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",5.0,5.0,5.0,0.9795190690000001,0.488394767,0.996216715,0.999985218,0.9782718597571374,0.5509915693333244,0.9961868278216731,0.9999852168713733
1146,1146.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array based implementation requires less memory than lined lists based implementation,3.0,4.0,3.5,0.948946774,0.3936373,0.992014932,0.999960465,0.9458378305957595,0.46782803071561185,0.991951851594673,0.9999604619814463
1147,1147.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-based implementations require less memory than a pointer-based ones,3.0,4.0,3.5,0.916424155,0.25868597600000004,0.989857055,0.999968133,0.9113347102689936,0.3493885029369152,0.9897769278073688,0.9999681305669091
1148,1148.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","You can go up and down an array , but you can only go one direction while traversing a linked list.",1.0,5.0,3.0,0.967531741,0.41014459700000006,0.991378212,0.999955967,0.9655545499863465,0.4823155985558703,0.9913101016367967,0.9999559636380176
1149,1149.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",5.0,5.0,5.0,0.978466809,0.387156546,0.985044582,0.999962317,0.9771555212053424,0.46214022106203706,0.9849264372541727,0.9999623141228492
1150,1150.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",5.0,5.0,5.0,0.979913652,0.5266708729999999,0.990336788,0.9999534290000001,0.9786904713310669,0.584584451459085,0.990260450600028,0.9999534254442378
1151,1151.0,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5.0,5.0,5.0,0.9862825270000001,0.62082237,0.977202007,0.9999728170000001,0.9854471861107448,0.667216162759208,0.9770219075144253,0.9999728149245394
1152,1152.0,7.4,How are linked lists passed as arguments to a function?,By reference.,They are passed by reference because you want the function to change the pointer,4.0,5.0,4.5,0.9544895290000001,0.126496896,0.99416182,0.9999650179999999,0.9517181178723404,0.23337324833518663,0.994115699571123,0.9999650153290743
1153,1153.0,7.4,How are linked lists passed as arguments to a function?,By reference.,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,5.0,5.0,5.0,0.893633723,0.469757319,0.990698692,0.999699948,0.8871564293748573,0.5346344823875155,0.9906252135676673,0.999699925090601
1154,1154.0,7.4,How are linked lists passed as arguments to a function?,By reference.,- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.,5.0,5.0,5.0,0.884954155,0.453865439,0.981267655,0.9997617540000001,0.8779483093557301,0.5206870329892739,0.9811196733027467,0.9997617358095776
1155,1155.0,7.4,How are linked lists passed as arguments to a function?,By reference.,By using a node.,2.0,3.0,2.5,0.891263008,0.5550633070000001,0.998205318,0.999887764,0.8846413470284612,0.609502965600138,0.998191140378971,0.9998877554306211
1156,1156.0,7.4,How are linked lists passed as arguments to a function?,By reference.,Pass-by-reference,5.0,5.0,5.0,0.21631451,0.270118535,0.9806875159999999,0.9991519040000001,0.16859110393875548,0.35942224583863047,0.980534951323207,0.9991518392466586
1157,1157.0,7.4,How are linked lists passed as arguments to a function?,By reference.,you send a pointer to an object of the LinkedList class,2.0,3.0,2.5,0.8401740790000001,0.038231764,0.991603969,0.999681061,0.8304413004500293,0.15590768339264238,0.9915376420709597,0.9996810366485517
1158,1158.0,7.4,How are linked lists passed as arguments to a function?,By reference.,Passed as a pointer to the head.,5.0,3.0,4.0,0.87270546,0.30316007100000003,0.99047323,0.999705587,0.8649537163486032,0.38842102706528087,0.9903979704639438,0.9997055645211468
1159,1159.0,7.4,How are linked lists passed as arguments to a function?,By reference.,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,5.0,4.0,4.5,0.848412275,0.069024414,0.9872266479999999,0.999634571,0.8391811706266432,0.18293273818243225,0.9871257411296335,0.9996345430989737
1160,1160.0,7.4,How are linked lists passed as arguments to a function?,By reference.,You have to pass the head pointer to a function since it has access to the entire list.,5.0,3.0,4.0,0.8613362309999999,0.252003491,0.990419231,0.999692618,0.8528921454090193,0.3435236448211977,0.9903435448828793,0.9996925945309451
1161,1161.0,7.4,How are linked lists passed as arguments to a function?,By reference.,You pass the head pointer to a function as a reference argument.,5.0,5.0,5.0,0.886100233,0.5055269,0.993710346,0.9997771740000001,0.8791641790597616,0.566027522165931,0.9936606590187887,0.9997771569869167
1162,1162.0,7.4,How are linked lists passed as arguments to a function?,By reference.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
1163,1163.0,7.4,How are linked lists passed as arguments to a function?,By reference.,passes a pointer to a linked list object,2.0,3.0,2.5,0.835320175,0.031125947999999997,0.9923211059999999,0.9997662390000001,0.8252918125269757,0.14967129039865956,0.9922604443067015,0.9997662211520137
1164,1164.0,7.4,How are linked lists passed as arguments to a function?,By reference.,"The linked list object contains the head, through which the other elements are accessible.",4.0,3.0,3.5,0.8554782870000001,0.299210817,0.9863929440000001,0.999768234,0.8466774753451031,0.38495497897494774,0.986285451038414,0.9997682163043349
1165,1165.0,7.4,How are linked lists passed as arguments to a function?,By reference.,By the head of the list. It takes the head address and traverses from there on in.,5.0,3.0,4.0,0.870288312,0.457216859,0.986161009,0.999691477,0.8623893734126421,0.5236283942921691,0.9860516837993135,0.9996914534438281
1166,1166.0,7.4,How are linked lists passed as arguments to a function?,By reference.,as a pointer node.,3.0,3.0,3.0,0.876265585,0.366352141,0.993912487,0.99982022,0.8687306391497258,0.4438813123616174,0.9938643968913782,0.9998202062735402
1167,1167.0,7.4,How are linked lists passed as arguments to a function?,By reference.,A method with access to a linked list's head pointer as access to the entire list,5.0,3.0,4.0,0.845202565,0.13822400599999998,0.9878205379999999,0.999744277,0.8357760017395981,0.24366550282695307,0.9877243227392628,0.9997442574751836
1168,1168.0,7.4,How are linked lists passed as arguments to a function?,By reference.,A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,5.0,5.0,5.0,0.8708425759999999,0.332610101,0.9839966929999999,0.9997525420000001,0.8629773899399947,0.41426773640374165,0.9838702701452251,0.9997525231062282
1169,1169.0,7.4,How are linked lists passed as arguments to a function?,By reference.,the head pointer is passed to a function as a reference argument.,5.0,5.0,5.0,0.8870129590000001,0.480649591,0.991581921,0.9997951959999999,0.8801324865322739,0.5441940444123914,0.9915154198962656,0.9997951803629219
1170,1170.0,7.4,How are linked lists passed as arguments to a function?,By reference.,the pointer to the first element is passed to a function,5.0,3.0,4.0,0.8337301020000001,-0.006185502,0.9902535379999999,0.999727385,0.8236049102499069,0.11692503502484453,0.9901765429420413,0.9997273641854553
1171,1171.0,7.4,How are linked lists passed as arguments to a function?,By reference.,"linked lists are passed by reference, specificly the Head pointer",5.0,5.0,5.0,0.888303697,0.42257130200000004,0.991261713,0.9998088740000001,0.881501825469102,0.4932218499983917,0.9911926823185051,0.999808859407257
1172,1172.0,7.4,How are linked lists passed as arguments to a function?,By reference.,Pass the head pointer to a function as a reference argument,5.0,5.0,5.0,0.86474967,0.32434889699999997,0.992162985,0.9997846990000001,0.8565134496018052,0.4070173214271277,0.9921010741831161,0.9997846825614611
1173,1173.0,7.4,How are linked lists passed as arguments to a function?,By reference.,by refrenece,5.0,5.0,5.0,0.8044343,0.362799704,0.9872516309999999,0.9994828490000001,0.7925251075601202,0.44076352923602485,0.9871509214902278,0.9994828095147823
1174,1174.0,7.4,How are linked lists passed as arguments to a function?,By reference.,By passing the head pointer and going through the list as needed inside the function.,5.0,3.0,4.0,0.859484315,0.355801374,0.9898074920000001,0.999606936,0.8509274549090611,0.43462147093032427,0.9897269732697979,0.9996069059890019
1175,1175.0,7.4,How are linked lists passed as arguments to a function?,By reference.,linked lists are passed by using pointers,3.0,3.0,3.0,0.862048805,0.170020253,0.995475028,0.99977641,0.8536481124012141,0.2715713607925615,0.9954392816459484,0.999776392928584
1176,1176.0,7.4,How are linked lists passed as arguments to a function?,By reference.,the head object is passed to the function,4.0,3.0,3.5,0.826117992,-0.040677574,0.9900387540000001,0.9997524,0.8155292522818146,0.08665319627068153,0.9899600621923359,0.9997523810953862
1177,1177.0,7.4,How are linked lists passed as arguments to a function?,By reference.,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0.0,3.0,1.5,0.8534660940000001,0.237953931,0.9881329759999999,0.9996994309999999,0.8445427475976337,0.33119310072147123,0.9880392289356112,0.9996994080511273
1178,1178.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,They are passed by reference because you want the function to change the pointer,0.0,1.0,0.5,0.9544895290000001,0.126496896,0.99416182,0.9999650179999999,0.9517181178723404,0.23337324833518663,0.994115699571123,0.9999650153290743
1179,1179.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.",5.0,5.0,5.0,0.981250882,0.44760605700000006,0.993104123,0.999977476,0.9801091334503309,0.5151935096484694,0.9930496469809799,0.9999774742802604
1180,1180.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.,5.0,4.0,4.5,0.986415565,0.6919541359999999,0.9929587129999999,0.999977969,0.9855883256088285,0.7296446927312796,0.9929030882716966,0.9999779673179018
1181,1181.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points to the first node.",5.0,5.0,5.0,0.990765989,0.6810728309999999,0.995315163,0.9999797029999999,0.9902036735531146,0.7200947558531801,0.9952781537451193,0.999979701450295
1182,1182.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",5.0,5.0,5.0,0.990631223,0.784466028,0.9866314079999999,0.999968795,0.9900607008265343,0.810837410798972,0.98652579885528,0.9999687926174538
1183,1183.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,the circular linked list's last node points to the begining of the list while a standard linked list points to NULL,5.0,5.0,5.0,0.991140008,0.7491850259999999,0.9956616770000001,0.9999799229999999,0.9906004688592214,0.7798731705634389,0.995627405134904,0.9999799214670925
1184,1184.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,The last item in the list points to the head,5.0,5.0,5.0,0.987855673,0.7138658170000001,0.9988389590000001,0.999975803,0.9871161305991811,0.7488753980964042,0.9988297870133768,0.9999758011525245
1185,1185.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points back to the first node, there is no NULL",5.0,5.0,5.0,0.98338902,0.545530379,0.992278769,0.9999696690000001,0.9823774757597012,0.6011364267830136,0.9922177728530538,0.999969666684185
1186,1186.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",2.0,3.0,2.5,0.981156707,0.494954526,0.990763585,0.999947557,0.9800092235581794,0.5567487174314197,0.9906906192091053,0.9999475529959022
1187,1187.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,A circular linked list has the last node point back to the head of the linked list.,5.0,5.0,5.0,0.993766666,0.846547127,0.996453209,0.999975927,0.9933870801413958,0.8653226565275913,0.9964251900759419,0.9999759251619923
1188,1188.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,Basic linked list points to a NULL at the end and circular points to the head at the end.,5.0,5.0,5.0,0.981433213,0.6447253820000001,0.997014052,0.9999742309999999,0.9803025677008843,0.688194552372996,0.9969904636210251,0.9999742290325001
1189,1189.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,in a circular linked list the the last item points to the first item.,5.0,5.0,5.0,0.9911490079999999,0.73947978,0.996574957,0.9999868590000001,0.990610016924306,0.7713553974942686,0.9965478998602607,0.9999868579966661
1190,1190.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",5.0,5.0,5.0,0.9898456929999999,0.711553335,0.994168835,0.999955225,0.9892273350969698,0.7468458568665846,0.9941227699881893,0.9999552215813649
1191,1191.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,5.0,5.0,5.0,0.98040396,0.556344628,0.995533033,0.999926367,0.9792106371861344,0.6106275122120179,0.9954977448735941,0.9999263613780153
1192,1192.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",5.0,5.0,5.0,0.9903761740000001,0.7905434370000001,0.988515138,0.999963171,0.989790120331888,0.8161712262128764,0.9884244099373105,0.9999631681880533
1193,1193.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",5.0,5.0,5.0,0.9879806640000001,0.539451063,0.99501831,0.9999507740000001,0.987248733066183,0.5958009376976493,0.9949789556670859,0.9999507702415248
1194,1194.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",5.0,5.0,5.0,0.988635659,0.708401263,0.990646945,0.9999684440000001,0.9879436147206535,0.7440794525947417,0.9905730577769425,0.9999684415906546
1195,1195.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,No node in a circular linked list contains NULL.,3.0,4.0,3.5,0.972037613,0.562503815,0.998199105,0.999961551,0.9703348121107778,0.6160330997835833,0.9981848782975408,0.9999615480643639
1196,1196.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,in a circular linked list the last element points to the head of the list,5.0,5.0,5.0,0.9976909159999999,0.943678439,0.9976005729999999,0.99999414,0.9975503017424086,0.9505695913839345,0.9975816180170601,0.9999941395525808
1197,1197.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",5.0,5.0,5.0,0.995289683,0.773391128,0.994609009,0.999980612,0.9950028429682058,0.8011175659888812,0.994566421272833,0.9999806105196986
1198,1198.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",3.0,3.0,3.0,0.9757406120000001,0.487140864,0.990659691,0.999960944,0.9742633093842259,0.549891086027208,0.9905859044677376,0.9999609410180187
1199,1199.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked lists, the last element points to the first",5.0,5.0,5.0,0.990531266,0.810531378,0.994272258,0.999978336,0.989954656833014,0.8337135683191935,0.9942270100087532,0.9999783343459226
1200,1200.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",5.0,5.0,5.0,0.9893211129999999,0.838975847,0.994639391,0.999959341,0.988670810210059,0.8586777507845377,0.9945970432844239,0.9999593378956274
1201,1201.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ",5.0,5.0,5.0,0.9844241140000001,0.570659876,0.9850464409999999,0.999976898,0.9834756029686913,0.623191236397154,0.9849283109398927,0.9999768962361294
1202,1202.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last object is linked back to the first object.",5.0,5.0,5.0,0.984417677,0.624864101,0.993220827,0.9999744779999999,0.9834687739803634,0.6707633729447748,0.9931672729187296,0.9999744760513588
1203,1203.0,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",2.0,5.0,3.5,0.9757562879999999,0.5333482620000001,0.986696107,0.999915953,0.9742799399918112,0.5904448370893488,0.9865910089641579,0.9999159465828916
1204,1204.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",they can traverse in both directions,3.0,4.0,3.5,0.955540359,0.16586662800000002,0.98096569,0.999976468,0.9528329393426829,0.2679259472539008,0.980815322840958,0.9999764662032983
1205,1205.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",In a doubly linked list you can delete a node without having to traverse the list.,5.0,4.0,4.5,0.978220403,0.393837541,0.9908931000000001,0.999967147,0.9768941100358655,0.46800377148479416,0.990821157351137,0.9999671444916266
1206,1206.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,5.0,4.0,4.5,0.972860932,0.326725632,0.991797503,0.999957702,0.9712082680438412,0.4091032540635137,0.9917327049500081,0.9999576987704873
1207,1207.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.,3.0,4.0,3.5,0.974846661,0.25669387,0.992066362,0.999977522,0.9733149202363767,0.347640138512383,0.9920036878811626,0.9999775202837727
1208,1208.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",3.0,4.0,3.5,0.981982768,0.299384743,0.994854859,0.999981527,0.9808855884684053,0.38510762448221547,0.9948142134375898,0.9999815255895602
1209,1209.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",you can traverse the list from front to back and back to front,3.0,4.0,3.5,0.963712573,0.156127185,0.9859281609999999,0.999955026,0.9615028094714717,0.25937816131482,0.9858169963476995,0.999955022566171
1210,1210.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list in reverse.,3.0,4.0,3.5,0.9697671529999999,0.333753705,0.986402815,0.9999699259999999,0.9679260899049458,0.415271416202584,0.9862954000172967,0.9999699237038072
1211,1211.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists can be traversed in both directions,3.0,4.0,3.5,0.96876049,0.254032642,0.988131839,0.99997172,0.9668581250335588,0.3453045216522517,0.9880380829535437,0.9999717178407818
1212,1212.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",4.0,3.0,3.5,0.9829695820000001,0.33420071,0.988831907,0.999979658,0.981932495612696,0.41566372847893274,0.9887436813476739,0.9999796564468594
1213,1213.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse forwards and backwards through nodes.,3.0,4.0,3.5,0.9560417529999999,0.129757702,0.988042425,0.999947499,0.9533648662921428,0.2362350825978719,0.9879479626012168,0.9999474949914738
1214,1214.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can point both forwards and backwards,3.0,4.0,3.5,0.939997315,-0.008430859,0.985670334,0.9999639570000001,0.9363433842617648,0.11495440580171375,0.9855571325670907,0.9999639542480657
1215,1215.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,4.0,4.0,4.0,0.9805779459999999,0.26355415600000004,0.9924711829999999,0.999986059,0.9793952182585619,0.35366104301471163,0.9924117068843309,0.9999860579355849
1216,1216.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists allow backward movement through the nodes.,3.0,4.0,3.5,0.9614356159999999,0.235794246,0.990497587,0.999950476,0.9590871946235446,0.3292976612106241,0.9904225198792662,0.9999504722187719
1217,1217.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ",3.0,4.0,3.5,0.969089985,0.118337438,0.990955475,0.999976724,0.9672076850007947,0.22621213035719548,0.9908840251008896,0.9999767222228443
1218,1218.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",ability to backtrack through a list.,3.0,3.0,3.0,0.946924567,0.322361499,0.983273815,0.99997218,0.9436924790345391,0.40527308896129194,0.9831416815567566,0.9999721778759033
1219,1219.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can move forwards and backwards in the double-linked list. Basic only moves forwards.,3.0,4.0,3.5,0.966984928,0.18980978399999998,0.9922012090000001,0.9999742859999999,0.9649744381959879,0.28893956910003893,0.9921396001449044,0.9999742840366993
1220,1220.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,4.0,5.0,4.5,0.97052449,0.30984598399999996,0.9922580879999999,0.999986081,0.9687295457901841,0.3942888937524535,0.9921969284773803,0.9999860799372645
1221,1221.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",each node points to both its predecessor and its successor.,4.0,3.0,3.5,0.9510552290000001,0.067981049,0.989480295,0.999971814,0.9480746823255839,0.1820170327692655,0.9893971914803656,0.9999718118479587
1222,1222.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,3.0,5.0,4.0,0.978057563,0.190749928,0.992953172,0.999960035,0.9767213537115975,0.28976468298631675,0.992897503498929,0.9999600319486152
1223,1223.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",3.0,4.0,3.5,0.977091968,0.283264846,0.991786924,0.999968518,0.9756969577220886,0.3709600568116587,0.99172204237807,0.9999685155963044
1224,1224.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",4.0,4.0,4.0,0.9805427790000001,0.288958848,0.9933373320000001,0.9999900829999999,0.9793579097246912,0.37595737649746597,0.99328469828442,0.9999900822428228
1225,1225.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","given a node in the list, one can navigate easily in either direction",4.0,4.0,4.0,0.976897419,0.311737239,0.992909927,0.9999641890000001,0.9754905614427345,0.3959487466717854,0.9928539168722669,0.9999641862657792
1226,1226.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list both forward and backwards.,3.0,4.0,3.5,0.9729711409999999,0.23497442899999998,0.989807752,0.9999834479999999,0.9713251883443892,0.32857815186853756,0.9897272353237447,0.9999834467362313
1227,1227.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list allows you to back up from a node rather than having to go through the entire list again,4.0,4.0,4.0,0.978104889,0.247821271,0.991807381,0.999940298,0.9767715616813979,0.33985313498709907,0.9917426609841893,0.9999402934416671
1228,1228.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Gives faster times for some operations such as insertion and deletion,5.0,5.0,5.0,0.970102012,0.362652481,0.990352905,0.999950351,0.9682813405189723,0.4406343195174291,0.9902766949210341,0.999950347209228
1229,1229.0,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",0.0,4.0,2.0,0.979460955,0.275911421,0.987951357,0.999981276,0.9782102068399885,0.36450635069940107,0.987856175182628,0.9999812745703959
1230,1230.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,they take up twice as much memory for each node,5.0,5.0,5.0,0.9282367229999999,0.046298984,0.9862474659999999,0.9999410740000001,0.9238666178337596,0.16298784903286134,0.9861388237919445,0.999941069500916
1231,1231.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",4.0,3.0,3.5,0.9603738190000001,0.233166158,0.976288968,0.9999211859999999,0.9579607383054483,0.32699112954828297,0.976101655692919,0.9999211799824385
1232,1232.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",4.0,4.0,4.0,0.962605715,0.18264645300000001,0.980940273,0.9999298090000001,0.9603285481132877,0.2826526982801387,0.9807897050518523,0.999929803640817
1233,1233.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,3.0,3.0,3.0,0.947331488,0.122299798,0.980721217,0.999888707,0.9441241799448037,0.22968968087970237,0.9805689185542198,0.9998886985026205
1234,1234.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Need more memory to store ""previous"" pointers.",5.0,5.0,5.0,0.9410641790000001,0.4107638,0.991846234,0.999957825,0.9374752161405042,0.48285903976671124,0.9917818209149492,0.9999578217798785
1235,1235.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,a node in a doubly linked list takes up more memory than a node in a singly linked list.,5.0,5.0,5.0,0.937422335,0.088014439,0.9830881770000001,0.999934135,0.9336115979693074,0.19959926302145972,0.9829545770544947,0.9999341299711132
1236,1236.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,3.0,3.0,3.0,0.946638465,0.106842861,0.988233458,0.999888214,0.9433889545326615,0.21612395758835426,0.9881405047228762,0.9998882054649794
1237,1237.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",5.0,5.0,5.0,0.951220512,0.312450945,0.970568662,0.999937629,0.9482500304190744,0.39657512808922757,0.9703361604445527,0.9999376242378851
1238,1238.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Double-linked lists require more space per node, and their elementary operations are more expensive",5.0,5.0,5.0,0.93151325,0.285022736,0.9753912640000001,0.9999451890000001,0.9273426726168906,0.37250286243457276,0.9751968600147789,0.9999451848151021
1239,1239.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,More difficult to delete and create nodes.,3.0,3.0,3.0,0.945446193,0.221235022,0.989684783,0.999929622,0.942124077793238,0.31651981239615623,0.9896032948937753,0.9999296166265393
1240,1240.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,5.0,5.0,5.0,0.963108003,0.251377493,0.989257185,0.999921207,0.9608614235038795,0.3429742400038695,0.9891723189569617,0.9999212009840419
1241,1241.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,nodes take up more memory,5.0,5.0,5.0,0.8851898909999999,0.100065291,0.98625,0.999912386,0.8781984007636007,0.2101756484758993,0.9861413778100268,0.999912379310546
1242,1242.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",5.0,5.0,5.0,0.9493236540000001,0.445515275,0.9737096909999999,0.99993143,0.9462376611256671,0.5133585425994006,0.9735020029317344,0.9999314247645826
1243,1243.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,its a little more confusing. The special cases at the end and beginning become more difficult to do.,3.0,3.0,3.0,0.9555065629999999,0.224198192,0.990093158,0.9999176340000001,0.9527970852973933,0.31912042753000996,0.9900148959728174,0.9999176277112384
1244,1244.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,increased actions to add and remove elements to the linked list.,3.0,3.0,3.0,0.96141094,0.192037657,0.989698348,0.9999411890000001,0.9590610159508746,0.29089485355557276,0.9896169670545031,0.9999411845096963
1245,1245.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",3.0,3.0,3.0,0.9418942929999999,0.16181156,0.974649698,0.9999149409999999,0.9383558808627066,0.2643670318998691,0.9744494357949294,0.9999149345056237
1246,1246.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,The main disadvanate is that if hard to remove all items in the list.,1.0,3.0,2.0,0.957976699,0.122347631,0.9882079420000001,0.9999515390000001,0.9554176429969894,0.22973166133431605,0.9881147871516909,0.9999515352999336
1247,1247.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",5.0,5.0,5.0,0.9604033829999999,0.54044205,0.9778250709999999,0.999954695,0.9579921026383555,0.59667067375385,0.9776498935926923,0.9999546915408987
1248,1248.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"in a doubly linked list there are twice as many pointers for each element , therefore more memory is used",5.0,5.0,5.0,0.943868756,0.08291228099999999,0.9810547490000001,0.999932605,0.9404505809995483,0.1951213730218603,0.9809050853888575,0.9999325998542955
1249,1249.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,3.0,4.0,3.5,0.937545121,0.09474609,0.983665743,0.999924328,0.9337418611603634,0.20550727149428502,0.98353670570786,0.9999243222223347
1250,1250.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Double linked lists require more space per node, and their elementary operation are more expensive",5.0,5.0,5.0,0.94212842,0.27339714800000003,0.976299118,0.9999639140000001,0.9386042652887193,0.3622997083486619,0.9761118858758447,0.9999639112447826
1251,1251.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",5.0,5.0,5.0,0.9500561359999999,0.416375101,0.976429792,0.9999300729999999,0.9470147484378293,0.4877837772273391,0.9762435921737395,0.9999300676609736
1252,1252.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,It takes up twice the storage needed.,5.0,5.0,5.0,0.94592154,0.322072417,0.989062898,0.999906027,0.9426283715814463,0.40501937721875786,0.9889764971293672,0.9999060198250272
1253,1253.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",5.0,5.0,5.0,0.959931135,0.260045588,0.9794223040000001,0.9999331379999999,0.957491096567225,0.35058176135387037,0.979259744406973,0.9999331328949909
1254,1254.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"increased memory requirements, slightly more complicated when modifying elements in the list",5.0,5.0,5.0,0.933498204,0.17553684100000003,0.978756505,0.999856772,0.9294485026149328,0.27641297374086893,0.9785886857309394,0.9998567610643376
1255,1255.0,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
1256,1256.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,5.0,5.0,5.0,0.9842002390000001,0.510236919,0.995034027,0.9999821179999999,0.9832380948497064,0.5701612528300977,0.9949947968281739,0.9999821166346837
1257,1257.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,5.0,5.0,5.0,0.988453567,0.48014375600000003,0.9924753409999999,0.9999800090000001,0.9877504340242726,0.5437501002052643,0.9924158977316812,0.9999800074736588
1258,1258.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order.,0.0,4.0,2.0,0.9676348570000001,0.176926225,0.9818966309999999,0.9999655409999999,0.9656639453507116,0.277632361442936,0.9817536180846055,0.9999655383690061
1259,1259.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.",5.0,5.0,5.0,0.98444134,0.479745001,0.99359732,0.9999877420000001,0.9834938779652636,0.5434001343620288,0.9935467401364874,0.9999877410640844
1260,1260.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list in which only the top (or last item added) can be modified.,4.0,5.0,4.5,0.9820139999999999,0.575042009,0.9898864209999999,0.999962208,0.980918722376042,0.6270371991324544,0.9898065257927674,0.9999622051145268
1261,1261.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,5.0,5.0,5.0,0.9847177859999999,0.427201867,0.990691311,0.9999764959999999,0.9837871584542011,0.49728584815485705,0.9906177742592756,0.999976494205436
1262,1262.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that stores data using LIFO.,5.0,5.0,5.0,0.959547103,0.351642609,0.991104302,0.9999748509999999,0.9570836785082633,0.43097154628977336,0.9910340278037745,0.999974849079838
1263,1263.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",5.0,5.0,5.0,0.9783179759999999,0.23654221,0.9939354340000001,0.999977938,0.9769976248530345,0.3299541090343999,0.9938875251679885,0.9999779363155349
1264,1264.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.,5.0,5.0,5.0,0.982734799,0.317230642,0.991469972,0.9999600000000001,0.9816834152388283,0.40077001139104135,0.991402586522044,0.9999599969459431
1265,1265.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an ADT that stores a set of elements in a particular order.,1.0,4.0,2.5,0.97746712,0.267535389,0.9909999140000001,0.99997331,0.9760949550234999,0.35715515735550135,0.9909288151599079,0.9999733079621805
1266,1266.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a data type that stores a set of elements in a certain order, last in, first out.",5.0,5.0,5.0,0.981259942,0.380057007,0.9913332090000001,0.999959844,0.9801187451691831,0.45590933705376724,0.9912647431222938,0.9999598409340321
1267,1267.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a data structure that moves elements in last in first out,5.0,5.0,5.0,0.968283653,0.43743938200000004,0.9916589570000001,0.999972868,0.9663522505101307,0.5062707651329766,0.9915930644649221,0.9999728659284332
1268,1268.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a last in first out order.,5.0,5.0,5.0,0.972918093,0.246463805,0.984652218,0.999945009,0.9712689099269871,0.33866175999906534,0.9845309736587585,0.9999450048013586
1269,1269.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list that can be added to or removed from only from the top.,5.0,5.0,5.0,0.98110795,0.42468312399999997,0.990525491,0.9999714209999999,0.9799574974460306,0.4950752827252366,0.9904506443151635,0.9999714188179526
1270,1270.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",5.0,5.0,5.0,0.987089813,0.352137715,0.992777582,0.999974954,0.9863036326963075,0.43140607422993943,0.9927205263738136,0.9999749520877023
1271,1271.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).,5.0,5.0,5.0,0.975702882,0.231470376,0.991019725,0.999967093,0.9742232817735981,0.32550283278066017,0.9909487826627591,0.9999670904875037
1272,1272.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",5.0,5.0,5.0,0.97876823,0.312345892,0.992060135,0.99995804,0.9774752975748904,0.3964829287143498,0.9919974116891351,0.9999580367962942
1273,1273.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,5.0,5.0,5.0,0.983061194,0.381859481,0.993785699,0.999980036,0.9820296864280904,0.45749127165852427,0.9937366072920891,0.99998003447572
1274,1274.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An abstract data type that stores a set of elements in a particular order.,1.0,4.0,2.5,0.97950244,0.30340012899999996,0.990234541,0.999965518,0.9782542181155489,0.3886317130764792,0.9901573958696237,0.9999655153672501
1275,1275.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a collection of data to be executed in the order of last in first out,5.0,5.0,5.0,0.9740194679999999,0.19103699899999999,0.9885311059999999,0.9999695590000001,0.9724373543917422,0.2900166297821774,0.9884405040812472,0.9999695566757864
1276,1276.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",5.0,5.0,5.0,0.9876783490000001,0.478691965,0.994196552,0.9999676279999999,0.9869280082555032,0.5424759412316675,0.994150705946825,0.9999676255283515
1277,1277.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of element in a particular order,0.0,4.0,2.0,0.9627521040000001,0.102219537,0.980294129,0.999959667,0.960483851635477,0.21206631446861787,0.980138456646302,0.999959663920518
1278,1278.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",is a list of element where the first one to be removed is the last one inserted,5.0,5.0,5.0,0.980508685,0.431541503,0.98590717,0.9999757090000001,0.9793217395323577,0.5010945135561051,0.9857958395230895,0.9999757071453476
1279,1279.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that puts elements in a list and only allows the user  access to the last element.,4.0,5.0,4.5,0.982781351,0.452323139,0.993948953,0.999979682,0.9817328020750313,0.5193334391283267,0.9939011509653256,0.9999796804486917
1280,1280.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a finite ordered list with zero or more elements,0.0,4.0,2.0,0.961302042,0.138580442,0.985236507,0.999974501,0.9589454864851403,0.24397832755717452,0.9851198784224499,0.9999744990531151
1281,1281.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A storage container that holds objects in a certain order, which has a LIFO priority",5.0,5.0,5.0,0.9736314420000001,0.25305306899999996,0.995272295,0.999966448,0.9720256991136753,0.3444448030507153,0.9952349470966803,0.999966445438257
1282,1282.0,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",5.0,5.0,5.0,0.984079719,0.366680861,0.987689502,0.9999731279999999,0.9831102356492594,0.444169812247483,0.9875922515816422,0.9999731259482844
1283,1283.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop are two main functions defined in a stack,5.0,5.0,5.0,0.9449837209999999,0.403257608,0.9874813029999999,0.999945832,0.9416334430425815,0.47627125826486966,0.9873824078520907,0.9999458278641958
1284,1284.0,8.2,What are the two main functions defined by a stack?,push and pop,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,5.0,5.0,5.0,0.928722203,0.293622971,0.977479537,0.9998756320000001,0.9243816616823574,0.3800508267078675,0.9773016299447077,0.9998756225043256
1285,1285.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop.,5.0,5.0,5.0,0.9702087640000001,0.704518795,0.99207813,0.999929796,0.9683945933016318,0.7406720189890077,0.9920155488459576,0.9999297906398245
1286,1286.0,8.2,What are the two main functions defined by a stack?,push and pop,Pop function and Push function,5.0,5.0,5.0,0.922804475,0.37565428,0.979757326,0.9999023690000001,0.9181035670047709,0.45204530007093247,0.979597413012306,0.9999023615457338
1287,1287.0,8.2,What are the two main functions defined by a stack?,push and pop,push and pop.,5.0,5.0,5.0,0.9702087640000001,0.806218505,0.99785766,0.999981123,0.9683945933016318,0.8299283913653943,0.9978407359518205,0.9999811215587141
1288,1288.0,8.2,What are the two main functions defined by a stack?,push and pop,push (insert an item) pop (remove an item),5.0,5.0,5.0,0.9011164309999999,0.344581336,0.976896324,0.9998757340000001,0.8950948052631599,0.42477424629413596,0.9767138096811964,0.9998757245121135
1289,1289.0,8.2,What are the two main functions defined by a stack?,push and pop,Adding a new item and removing the item,5.0,5.0,5.0,0.887893498,0.034022931,0.9860721640000001,0.999916921,0.8810666469413543,0.1522138167580372,0.9859621369419704,0.9999169146567997
1290,1290.0,8.2,What are the two main functions defined by a stack?,push and pop,Push (insert) and pop (retrieve).,5.0,5.0,5.0,0.915936112,0.388111889,0.9666960290000001,0.9998847740000001,0.9108169473436389,0.4629786742941571,0.9664329344352858,0.9998847652023304
1291,1291.0,8.2,What are the two main functions defined by a stack?,push and pop,push and pop.,5.0,5.0,5.0,0.9702087640000001,0.806218505,0.99785766,0.999981123,0.9683945933016318,0.8299283913653943,0.9978407359518205,0.9999811215587141
1292,1292.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop.,5.0,5.0,5.0,0.9702087640000001,0.55587095,0.986553114,0.9999202709999999,0.9683945933016318,0.6102117904763856,0.9864468863486807,0.9999202649125769
1293,1293.0,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5.0,5.0,5.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
1294,1294.0,8.2,What are the two main functions defined by a stack?,push and pop,push (add an element) pop (remove an element),5.0,5.0,5.0,0.900315344,0.375348061,0.976896324,0.999874011,0.8942449351726482,0.4517765481040613,0.9767138096811964,0.9998740013805598
1295,1295.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop.,5.0,5.0,5.0,0.9702087640000001,0.704518795,0.99207813,0.999929796,0.9683945933016318,0.7406720189890077,0.9920155488459576,0.9999297906398245
1296,1296.0,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5.0,5.0,5.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
1297,1297.0,8.2,What are the two main functions defined by a stack?,push and pop,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),5.0,5.0,5.0,0.920646906,0.245146275,0.9694523290000001,0.9998146440000001,0.9158146104228826,0.33750543469295524,0.9692110086419929,0.9998146298478047
1298,1298.0,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5.0,5.0,5.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
1299,1299.0,8.2,What are the two main functions defined by a stack?,push and pop,"push and pop, push puts an object into the list, and pop takes the last object off.",5.0,5.0,5.0,0.957039475,0.648952663,0.978127155,0.9999437440000001,0.954423345691316,0.6919046098262142,0.9779543639945568,0.9999437397047742
1300,1300.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop are the two main functions of a stack,5.0,5.0,5.0,0.94817847,0.36727148299999995,0.983882928,0.9999272920000001,0.9450227398627673,0.444688169449934,0.9837556064249748,0.9999272864486405
1301,1301.0,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop,5.0,5.0,5.0,1.0,0.67974478,0.986679455,0.999918139,1.0,0.7189291968305357,0.986574225416761,0.9999181327497958
1302,1302.0,8.2,What are the two main functions defined by a stack?,push and pop,"push, which adds an element to the stack... and pop which takes an element off the stack",5.0,5.0,5.0,0.929041624,0.339086115,0.9820615640000001,0.9999345409999999,0.9247205341820751,0.4199513860139391,0.9819198540215991,0.9999345360021118
1303,1303.0,8.2,What are the two main functions defined by a stack?,push and pop,"Push and Pop, which add and remove data from the stack, respectively.",5.0,5.0,5.0,0.9459416270000001,0.30994099399999997,0.9692100090000001,0.999931749,0.9426496818018195,0.3943722789257198,0.9689667743635147,0.9999317437889387
1304,1304.0,8.2,What are the two main functions defined by a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1305,1305.0,8.2,What are the two main functions defined by a stack?,push and pop,pop - to remove item push - to insert an element,5.0,5.0,5.0,0.909514189,0.442895383,0.983920435,0.99991136,0.904003954146559,0.5110592041259878,0.9837934097226098,0.9999113532322095
1306,1306.0,8.2,What are the two main functions defined by a stack?,push and pop,Pop and push,5.0,5.0,5.0,1.0,0.852522016,0.9889923420000001,0.999935595,1.0,0.8705664956446505,0.9889053837513865,0.9999355900825863
1307,1307.0,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5.0,5.0,5.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
1308,1308.0,8.2,What are the two main functions defined by a stack?,push and pop,push - adds an item to the top of the stack pop - removes the top item from the stack,5.0,5.0,5.0,0.9092429879999999,0.327764839,0.977321778,0.9998473529999999,0.9037162380577735,0.4100153102234393,0.9771426246808481,0.9998473413451835
1309,1309.0,8.2,What are the two main functions defined by a stack?,push and pop,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,5.0,5.0,5.0,0.939970911,0.386900157,0.9752586329999999,0.999887607,0.9363153723605981,0.4619152022094051,0.975063181256984,0.999887598418634
1310,1310.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,5.0,5.0,5.0,0.988786101,0.58976084,0.9890869309999999,0.9999142240000001,0.988103218054819,0.639955126437076,0.9890007199851556,0.99991421745088
1311,1311.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,5.0,5.0,5.0,0.9806731340000001,0.493814617,0.990281758,0.999979277,0.9794962028384837,0.5557482805355899,0.9902049858742741,0.9999792754177695
1312,1312.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","If you use a dynamically allocated array, you must provide a destructor and copy constructor.",2.0,4.0,3.0,0.9558479790000001,0.226313502,0.987596118,0.99995252,0.9531592922072822,0.3209769214870871,0.9874981298671266,0.9999525163748343
1313,1313.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.",5.0,5.0,5.0,0.981820107,0.44618800299999994,0.992503246,0.999961999,0.980713022044543,0.5139489598274932,0.9924440231754784,0.9999619960985694
1314,1314.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use a pointer that always points to the end of the array list for push/pop modifications.,5.0,4.0,4.5,0.9735127090000001,0.39904755399999997,0.9912718009999999,0.9999451779999999,0.9718997357345958,0.47257632002415395,0.9912028500116433,0.9999451738142621
1315,1315.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,5.0,4.0,4.5,0.98382622,0.587134838,0.989657772,0.999949882,0.9828412995435996,0.6376504255448794,0.9895760705123955,0.9999498781734192
1316,1316.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You predetermine the size of the stack as you would an array.  This type can not grow.,1.0,4.0,2.5,0.980834723,0.419825405,0.990726393,0.999967917,0.9796676319817048,0.49081192370519766,0.990653133399906,0.9999679145504171
1317,1317.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.",5.0,5.0,5.0,0.980919302,0.386816472,0.984978164,0.9999762959999999,0.9797573615146837,0.461841756380284,0.9848594945655463,0.9999762941901659
1318,1318.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ",5.0,4.0,4.5,0.976585805,0.539727211,0.9898108409999999,0.9999692059999999,0.97515997135903,0.5960432979631701,0.9897303487262133,0.9999692036488342
1319,1319.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",5.0,3.0,4.0,0.973627508,0.407592744,0.983535767,0.999946015,0.9720215255483369,0.4800759742578482,0.9834057029240226,0.9999460108781683
1320,1320.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",5.0,4.0,4.5,0.982049704,0.441497475,0.990507193,0.999935074,0.9809566006111297,0.5098323353670118,0.990432201764703,0.9999350690428072
1321,1321.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",treat the beginning of the array as the beginning of the stack,4.0,4.0,4.0,0.9844000940000001,0.45771867,0.992304793,0.999958967,0.9834501202438759,0.5240688068506569,0.9922440024373355,0.999958963867072
1322,1322.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use an index value called top to keep track of the last element in the array.,5.0,4.0,4.5,0.9818150999999999,0.50842166,0.9908600559999999,0.999916721,0.9807077101376673,0.5685680975176235,0.9907878523102899,0.9999167146415294
1323,1323.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create an array and implement pointers that point to the next list item down and stack them up.,1.0,3.0,2.0,0.96711874,0.40185260799999994,0.9887792329999999,0.999957262,0.965116398827669,0.47503816523846054,0.9886905912338385,0.9999572587368927
1324,1324.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",3.0,4.0,3.5,0.9840439559999999,0.31608665,0.9890922129999999,0.9999661679999999,0.9830722948213004,0.39976599106544153,0.9890060437118762,0.9999661654168784
1325,1325.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",5.0,4.0,4.5,0.9718179109999999,0.420554221,0.985315437,0.9999633720000001,0.9701017311113036,0.49145156635796305,0.9851994319533193,0.9999633692034001
1326,1326.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",4.0,4.0,4.0,0.98487252,0.548030794,0.9947572790000001,0.9999004429999999,0.9839513151545163,0.6033309067115749,0.9947158625755318,0.9999004353986808
1327,1327.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,5.0,4.0,4.5,0.974716485,0.5087854270000001,0.98750599,0.999962336,0.9731768170229897,0.5688873562727393,0.9874072898743456,0.9999623331242998
1328,1328.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",4.0,4.0,4.0,0.956265569,0.318823814,0.985020384,0.999955087,0.9536023118182568,0.40216825287365354,0.984902048094918,0.9999550835708283
1329,1329.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",define an array and keep track of a pointer to the last element as items are added,5.0,3.0,4.0,0.978074551,0.448838711,0.98883452,0.9998810659999999,0.976739376214893,0.5162753438487364,0.9887463149898399,0.9998810569192191
1330,1330.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",5.0,4.0,4.5,0.984538913,0.588828981,0.988418798,0.9999071509999999,0.9835973927824326,0.6391372838502457,0.9883273088709991,0.9999071439108462
1331,1331.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size, bottom stack element stored at element 0",4.0,4.0,4.0,0.950594842,0.39025563,0.9878343740000001,0.999916732,0.9475862595433389,0.46486012061268184,0.9877382680408353,0.9999167256423693
1332,1332.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",you store the stack in the array but you have to keep in mind the first element,3.0,3.0,3.0,0.9766622779999999,0.414536715,0.990625567,0.9999344179999999,0.9752411012680555,0.4861703245892978,0.9905515108951115,0.9999344129927207
1333,1333.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,5.0,3.0,4.0,0.9897913340000001,0.514868677,0.9921106009999999,0.999967956,0.9891696658447537,0.5742262980185777,0.9920482763602215,0.9999679535533949
1334,1334.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","using arrays, you are pushing one int at a time into the stack until you get to the end of your array",4.0,4.0,4.0,0.9852262140000001,0.400517196,0.986879935,0.999967899,0.9843265477469731,0.47386614586153325,0.9867762891677898,0.999967896549043
1335,1335.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",5.0,3.0,4.0,0.984529614,0.433275819,0.983116225,0.999962061,0.9835875275094077,0.502616629545564,0.9829828466279625,0.9999620581033032
1336,1336.0,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",2.0,4.0,3.0,0.989044011,0.534288228,0.9893871790000001,0.999969991,0.9883768337732664,0.5912697947545883,0.9893033398829955,0.99996998870877
1337,1337.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,2.0,4.0,3.0,0.987176776,0.574019611,0.9920274859999999,0.999960362,0.9863958914056377,0.6261398953288853,0.9919645047687073,0.9999603589735823
1338,1338.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,5.0,5.0,5.0,0.9862281079999999,0.594988167,0.99309876,0.9999626420000001,0.9853894532047611,0.6445428705441648,0.9930442416143758,0.9999626391476636
1339,1339.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack,3.0,5.0,4.0,0.9818639159999999,0.5007073879999999,0.972937789,0.999878149,0.9807594988426873,0.5617976953773938,0.9727240030636848,0.9998781396965022
1340,1340.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.,4.0,4.0,4.0,0.985044658,0.510932565,0.993679423,0.999938662,0.9841339356909129,0.5707717839556844,0.9936294917334084,0.9999386573167562
1341,1341.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",5.0,4.0,4.5,0.991225183,0.548906446,0.997574506,0.9999770440000001,0.9906908306862878,0.6040994194338248,0.9975553450930873,0.9999770422472768
1342,1342.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,5.0,4.0,4.5,0.990713477,0.556976259,0.994067765,0.999879622,0.9901479637760329,0.6111818608108535,0.9940209015558447,0.9998796128089678
1343,1343.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You dynamicly create space as the stack grows.  The stack can be as long as you need.,1.0,4.0,2.5,0.9701115490000001,0.261612773,0.9868272790000001,0.999975398,0.968291458285274,0.35195719544254855,0.986723217196151,0.9999753961216024
1344,1344.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",5.0,5.0,5.0,0.990814984,0.701550901,0.995564763,0.999983125,0.9902556521585402,0.7380672578541171,0.9955297255341097,0.9999831237115696
1345,1345.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,4.0,4.0,4.0,0.986189663,0.622506321,0.99111453,0.999940162,0.9853486670534071,0.6686940760936669,0.9910443366028843,0.9999401574312833
1346,1346.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",4.0,3.0,3.5,0.982516646,0.338913769,0.989815165,0.999974583,0.9814519775674448,0.4198001271877971,0.9897347068849297,0.9999745810593758
1347,1347.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","make a list, make the bottom the head, add on the end and make the end top",3.0,4.0,3.5,0.98032409,0.49660635,0.985680642,0.999894215,0.9791259034129873,0.558198434623772,0.985567521998184,0.9998942069231641
1348,1348.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use the add function with a list as the beginning of the stack and remove for pop,5.0,4.0,4.5,0.986878157,0.6282751560000001,0.992768083,0.999960196,0.9860790876670193,0.6737570726837057,0.9927109523336549,0.9999601929609078
1349,1349.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Use head as the top and push and pop nodes from the head.,5.0,4.0,4.5,0.9853724840000001,0.5135478379999999,0.988316117,0.999978774,0.984481725022524,0.5730670685809198,0.9882238167120836,0.9999787723793646
1350,1350.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create a node based list that points to the next list item down.,0.0,3.0,1.5,0.963079453,0.45366227600000003,0.988854318,0.9998973459999999,0.9608311349196381,0.5205087277376551,0.9887662693899938,0.9998973381622204
1351,1351.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have the head of the list be the last item added, and a push just adds a new head.",5.0,4.0,4.5,0.989481032,0.5569236879999999,0.9965006829999999,0.9999660220000001,0.9888404676567593,0.6111357220681548,0.9964730391108397,0.9999660194057313
1352,1352.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",5.0,4.0,4.5,0.989292264,0.605684221,0.98879076,0.9999064320000001,0.9886402044178779,0.6539302225708513,0.9887022092947828,0.9999064248559497
1353,1353.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,3.0,4.0,3.5,0.989574015,0.627450407,0.994140565,0.999925187,0.988939112960735,0.6730332347901555,0.9940942766609667,0.9999251812879207
1354,1354.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.",1.0,4.0,2.5,0.981785357,0.561923623,0.9866364940000001,0.999917312,0.9806761559043544,0.615523896431855,0.9865309250336408,0.9999173056866532
1355,1355.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,5.0,4.0,4.5,0.982050955,0.47677522899999997,0.991868878,0.999961731,0.9809579277921763,0.5407937250074204,0.9918046437979214,0.9999617280781071
1356,1356.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use a linked list and keep track of a pointer that points to the first item,4.0,4.0,4.0,0.977455139,0.495037615,0.99117481,0.99991875,0.9760822444270798,0.5568216401833566,0.991105092802565,0.9999187437964465
1357,1357.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",5.0,4.0,4.5,0.984683454,0.396971464,0.9851444359999999,0.999973212,0.9837507357685911,0.47075424735426247,0.9850270800803659,0.999973209954698
1358,1358.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",using pointer,0.0,3.0,1.5,0.83268708,0.141201019,0.974546778,0.999613997,0.8224983722564734,0.24627826721829055,0.9743457027479627,0.9996139675281194
1359,1359.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",the top is the first pointer.,3.0,3.0,3.0,0.9634184240000001,0.398708344,0.984362482,0.999932484,0.9611907479385124,0.4722786136287887,0.9842389488035705,0.9999324788450571
1360,1360.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",2.0,3.0,2.5,0.98449868,0.440282732,0.9894193720000001,0.9999700779999999,0.9835547097488151,0.5087662206893042,0.9893357872011163,0.9999700757154125
1361,1361.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",1.0,4.0,2.5,0.9862300159999999,0.505703449,0.988848376,0.999971226,0.9853914773945591,0.5661824697393969,0.9887602804494081,0.9999712238030641
1362,1362.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",5.0,5.0,5.0,0.987924516,0.6584355239999999,0.97822386,0.999907208,0.9871891658708072,0.7002272075269304,0.9780518329442935,0.9999072009151982
1363,1363.0,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",0.0,4.0,2.0,0.979792953,0.37522020899999997,0.991579102,0.999961453,0.9785624222302143,0.4516643392715969,0.9915125786267417,0.9999614500568815
1364,1364.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are converted to post fix expressions.  It still follow the order of precedence for the operators.,5.0,5.0,5.0,0.97766161,0.548555136,0.984979866,0.9999822190000001,0.9763012887099829,0.6037910935184457,0.9848612100109985,0.9999822176423955
1365,1365.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted to postfix expressions and then evaluated.,5.0,5.0,5.0,0.9756502509999999,0.7216932770000001,0.987179357,0.9999771040000001,0.9741674457498779,0.7557451392640169,0.9870780765403983,0.9999771022518579
1366,1366.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",5.0,5.0,5.0,0.969921053,0.512072265,0.994091292,0.9999605309999999,0.9680893618178963,0.5717720374234413,0.9940446144143366,0.9999605279864855
1367,1367.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By using parentheses to have order in the expression.,2.0,3.0,2.5,0.967561007,0.400465101,0.989625309,0.999975665,0.9655855981722101,0.47382042487846504,0.9895433510613297,0.9999756631419882
1368,1368.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",In postfix notation.,3.0,5.0,4.0,0.9013473390000001,0.5196115379999999,0.98583879,0.9996817459999999,0.8953397746645607,0.5783888523419424,0.985726919335064,0.9996817217008523
1369,1369.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers usually convert infix expressions to post fix expression and evaluate them using a stack.,5.0,5.0,5.0,0.967926562,0.460345089,0.9890457140000001,0.999968263,0.9659734140535525,0.5263738737213531,0.9889591773792791,0.9999682605768349
1370,1370.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they are converted to postfix,5.0,5.0,5.0,0.960300088,0.586008787,0.9828722809999999,0.99994717,0.957882517373585,0.6366621510712275,0.9827369755202162,0.999947165966354
1371,1371.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Infix expressions are interpreted as postfix expressions by implementing stacks.,5.0,5.0,5.0,0.96613729,0.5700333120000001,0.99088237,0.9997902359999999,0.9640751823301692,0.6226413348320302,0.9908103425863297,0.9997902199842189
1372,1372.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted into an equivalent postfix expression so it can be read by the computer.,5.0,5.0,5.0,0.9843628409999999,0.616636038,0.989660768,0.999967997,0.9834105986806976,0.6635420440435974,0.9895790901801832,0.9999679945565253
1373,1373.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","The computer translates the infix expression to a postfix expression, then solves.",5.0,5.0,5.0,0.9745194909999999,0.539713979,0.991189098,0.999961357,0.9729678268526207,0.5960316849475648,0.9911194936748451,0.9999613540495519
1374,1374.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",in postfix format,3.0,5.0,4.0,0.7828869820000001,0.399881661,0.982530523,0.99991846,0.7696656414859677,0.4733083709316123,0.9823925177018599,0.9999184537743045
1375,1375.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they use parenthisis and a stack to determine which evaluations need to be made first,3.0,3.0,3.0,0.9653630259999999,0.173115253,0.983122121,0.999971135,0.9632537686562985,0.27428767603578996,0.9829887892051576,0.9999711327961162
1376,1376.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.,4.0,5.0,4.5,0.968928039,0.400189161,0.98796122,0.9999621190000001,0.9670358771176584,0.4735782471633709,0.9878661160983123,0.9999621161077318
1377,1377.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by being passed to the function by a leading term,0.0,3.0,1.5,0.966804862,0.14920951400000002,0.987629425,0.9999718059999999,0.9647834068751475,0.25330689308059073,0.9875316999856197,0.9999718038473479
1378,1378.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",1.0,4.0,2.5,0.9579578040000001,0.266803145,0.9728028129999999,0.999967478,0.9553975973647919,0.3565125061312808,0.9725879607808691,0.9999674755168989
1379,1379.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The infix expression is converted to postfix form,5.0,5.0,5.0,0.9617744090000001,0.6551920179999999,0.9880438559999999,0.999966458,0.9594466188029096,0.6973805565449261,0.9879494049058243,0.9999664554390205
1380,1380.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by converting them to postfix expressions and putting the operations in a stack,5.0,5.0,5.0,0.9751811029999999,0.49054685200000003,0.987882083,0.9999602240000001,0.9736697284567208,0.5528803387324273,0.9877863539321852,0.9999602209630457
1381,1381.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,5.0,5.0,5.0,0.973391771,0.699608445,0.9871680270000001,0.999938397,0.9717714330795701,0.7363624685674933,0.9870666570357137,0.9999383922965229
1382,1382.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,5.0,5.0,5.0,0.985042691,0.621697485,0.9904231729999999,0.9999412879999999,0.9841318489082438,0.6679842041854045,0.9903475180238738,0.9999412835172549
1383,1383.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are pointers evaluated by reference to the memory location,0.0,3.0,1.5,0.944421828,0.35660976200000005,0.9913576359999999,0.999966687,0.9410373329387252,0.4353309496530523,0.9912893630906017,0.999966684456505
1384,1384.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers convert infix expressions to postfix form before evaluation,5.0,5.0,5.0,0.9324168559999999,0.618083894,0.9892363829999999,0.999809402,0.9283013047167835,0.6648127494790739,0.9891513526254128,0.9998093874475704
1385,1385.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert infix expressions to postfix expression and evaluate the postfix expression,5.0,5.0,5.0,0.9429335590000001,0.611030877,0.988487655,0.999933435,0.9394584341303116,0.6586226953311419,0.9883967098272272,0.9999334299176673
1386,1386.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",4.0,4.0,4.0,0.967471302,0.121129751,0.993052961,0.999956545,0.9654904304857175,0.22866279348022134,0.9929980808116355,0.9999565416821486
1387,1387.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,5.0,5.0,5.0,0.980791509,0.5775811670000001,0.989212317,0.999962294,0.979621786416752,0.6292656817109247,0.9891270965089312,0.9999622911210931
1388,1388.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)",5.0,5.0,5.0,0.9560365679999999,0.5498514179999999,0.994434083,0.999959998,0.9533593655457577,0.6049287705963527,0.9943901133931817,0.9999599949457904
1389,1389.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","they are transformed into post-fix expressions, then evaluated with a stack.",5.0,5.0,5.0,0.9802990559999999,0.5823618770000001,0.993395184,0.999986838,0.9790993449395056,0.6334614540684222,0.993343007303397,0.9999868369950625
1390,1390.0,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",5.0,5.0,5.0,0.9812735920000001,0.42643249,0.982421984,0.999960242,0.9801332264012284,0.4966106072912417,0.9822831212659415,0.9999602389644201
1391,1391.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.,2.0,4.0,3.0,0.9780298470000001,0.42827487,0.986344436,0.999942245,0.9766919499147209,0.49822756524853384,0.9862365598351273,0.9999422405903232
1392,1392.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,2.0,4.0,3.0,0.9797494409999999,0.430392861,0.992903437,0.9999793659999999,0.9785162605182174,0.5000864121752934,0.9928473756025932,0.9999793644245646
1393,1393.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,2.0,4.0,3.0,0.979147375,0.362207592,0.9918736229999999,0.9999583059999999,0.9778775310345109,0.4402438643406134,0.9918094262824516,0.9999583028166036
1394,1394.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.",5.0,5.0,5.0,0.989481628,0.584810197,0.988284015,0.999932873,0.988841099950847,0.6356102130139153,0.9881914611128441,0.9999328678747578
1395,1395.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",5.0,5.0,5.0,0.984851897,0.448420614,0.9933167909999999,0.99995279,0.9839294362938225,0.5159084025711118,0.9932639950147178,0.9999527863954493
1396,1396.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",4.0,5.0,4.5,0.987061262,0.449356288,0.994973485,0.9999481790000001,0.9862733430511701,0.5167295933785084,0.9949337765587466,0.9999481750433928
1397,1397.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",3.0,4.0,3.5,0.9835522179999999,0.357960045,0.995076972,0.9999489009999999,0.9825506118847804,0.43651602050784133,0.9950380810848974,0.9999488970985183
1398,1398.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).",5.0,5.0,5.0,0.9923629759999999,0.698747635,0.989241398,0.999953145,0.9918979108659607,0.735606981871363,0.989156407242888,0.9999531414225539
1399,1399.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Basically pop the stack until you find the given element.,3.0,4.0,3.5,0.984530389,0.6061825160000001,0.9890626809999999,0.999975662,0.9835883497039011,0.6543675493250112,0.9889762784151115,0.999975660141759
1400,1400.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Iterate through the stack, checking the number against the current element.",0.0,3.0,1.5,0.977766275,0.522463501,0.992596668,0.99990529,0.9764123274024388,0.5808918670656981,0.9925381831901862,0.9999052827687562
1401,1401.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop and push,2.0,4.0,3.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
1402,1402.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop all elements off stack until you find that element and then push the popped elements back on the stack,5.0,5.0,5.0,0.991221488,0.823363781,0.993165253,0.999986962,0.9906869106751224,0.8449758791030871,0.9931112598954871,0.9999869610045301
1403,1403.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",5.0,5.0,5.0,0.9921216970000001,0.623413742,0.993389854,0.999973433,0.9916419389108941,0.6694904707606542,0.9933376351974864,0.9999734309715717
1404,1404.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,2.0,4.0,3.0,0.972358763,0.297350615,0.9940334390000001,0.999983342,0.9706755188998877,0.3833223796056152,0.9939863043874598,0.9999833407281381
1405,1405.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",5.0,5.0,5.0,0.9901284579999999,0.5877032879999999,0.9930417090000001,0.9999833459999999,0.989527319388493,0.6381493235739628,0.9929867399231352,0.9999833447284433
1406,1406.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",if top item != given element pop the stack. Repeat until item is found or stack is empty,3.0,4.0,3.5,0.97477901,0.514901519,0.9890847909999999,0.999873157,0.9732431495529263,0.5742551216777758,0.988998563079593,0.9998731473153558
1407,1407.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",could traverse through the list/array to find the element.,1.0,3.0,2.0,0.965422511,0.40518012600000003,0.9878046079999999,0.9999698229999999,0.9633168760620285,0.47795854903992013,0.9877082668955183,0.999969820695943
1408,1408.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you need the pop opertation to go throught the stack and find the element.,3.0,4.0,3.5,0.982663631,0.51285547,0.988859875,0.9999781590000001,0.9816079133837219,0.572459414379846,0.9887718702891581,0.9999781573324086
1409,1409.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","createStack, push, isEmpty, pop, and a boolean return value.",2.0,4.0,3.0,0.953377247,0.137007445,0.97804242,0.999916213,0.9505381022135984,0.24259779258830455,0.9778689596053737,0.9999162066027429
1410,1410.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would have to traverse the stack popping each element to search it,3.0,4.0,3.5,0.9777681229999999,0.370738238,0.98930431,0.999978093,0.9764142879384694,0.44773075408678015,0.9892198162348309,0.9999780913273694
1411,1411.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Pop each element off the stack (and into another stack for storage) until the desired element is found.,4.0,4.0,4.0,0.987621427,0.6926293370000001,0.988180397,0.999928402,0.98686761992653,0.7302372803786281,0.9880870245518201,0.9999283965333904
1412,1412.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop operation,1.0,4.0,2.5,0.894748986,0.055888303,0.966026175,0.999729836,0.8883396075649345,0.17140387920148187,0.9657577887255807,0.9997298153725926
1413,1413.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",to pop elements then push them back,4.0,5.0,4.5,0.9702307579999999,0.560602188,0.9853271579999999,0.9999758990000001,0.9684179266509068,0.614364143917013,0.9852112455468238,0.9999758971598544
1414,1414.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,4.0,5.0,4.5,0.9765834809999999,0.37415781600000003,0.993372823,0.9999394159999999,0.9751575058364457,0.45073193400497363,0.9933204696560668,0.9999394113743251
1415,1415.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,4.0,5.0,4.5,0.980755389,0.404589981,0.9930804190000001,0.9999772729999999,0.9795834668488783,0.4774406104747456,0.9930257557242242,0.9999772712647611
1416,1416.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0.0,3.0,1.5,0.974658072,0.29069075,0.990744834,0.999975033,0.973114846897901,0.3774773738487997,0.9906717200800373,0.999975031093734
1417,1417.0,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",StackPush() StackPop() StackIsEmpty(),2.0,4.0,3.0,0.771680832,0.038206879,0.981318,0.999616787,0.7577770804248247,0.15588584316491128,0.981170416017958,0.9996167577411399
1418,1418.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure in c++ which is a collection of data that is kept in order.  First in first out.,5.0,5.0,5.0,0.9761331679999999,0.45670300700000005,0.993347967,0.9999769479999999,0.9746797705217187,0.5231774139947981,0.9932954172987466,0.9999769462399469
1419,1419.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,4.0,4.0,4.0,0.979401648,0.167127401,0.9891642270000001,0.999965577,0.9781472882737678,0.2690324599899754,0.9890786266077591,0.9999655743717549
1420,1420.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,5.0,5.0,5.0,0.977742553,0.298904717,0.9922188820000001,0.9999656029999999,0.9763871608246675,0.38468633144798414,0.9921574127579927,0.9999656003737399
1421,1421.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.",5.0,5.0,5.0,0.9838768840000001,0.463778079,0.994489855,0.9999759340000001,0.9828950487846504,0.5293868246314828,0.9944463259805839,0.9999759321625267
1422,1422.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,5.0,5.0,5.0,0.9805760379999999,0.41937589700000005,0.9918587609999999,0.999983675,0.9793931940687639,0.4904174146802048,0.991794446875689,0.9999836737535629
1423,1423.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",5.0,5.0,5.0,0.982900322,0.35437777600000003,0.9925681820000001,0.999977848,0.9818590179473876,0.43337205543836,0.9925094721566078,0.9999778463086632
1424,1424.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a data structure that stores elements in a First in First out order.,5.0,5.0,5.0,0.9779473540000001,0.351654112,0.989649807,0.9999577070000001,0.9766044334110495,0.43098164185495685,0.9895680425905232,0.9999577037708692
1425,1425.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A waiting list of items that operation in a FIFO (first in first out) order.,5.0,5.0,5.0,0.9710471629999999,0.32382592600000004,0.99351656,0.999977916,0.9692840475481928,0.40655833787330986,0.993465342148992,0.9999779143138551
1426,1426.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",5.0,5.0,5.0,0.98384285,0.329319686,0.9939454240000001,0.999972201,0.982858942246084,0.41137991591228845,0.9938975940869469,0.9999721988775067
1427,1427.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).,5.0,5.0,5.0,0.981231988,0.35016802,0.990380198,0.999979548,0.9800890888790295,0.42967737873623635,0.9903042035301565,0.9999795464384608
1428,1428.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",Like a linked list but first in first out,4.0,5.0,4.5,0.950736404,0.067118548,0.9831399259999999,0.99990894,0.9477364421199541,0.18126006197327202,0.9830067348610187,0.999908933047439
1429,1429.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a FIFO data structure.,5.0,5.0,5.0,0.9607161879999999,0.314620942,0.985456537,0.9999332679999999,0.9583239562493397,0.3984796178885362,0.9853416466144833,0.9999332629049166
1430,1430.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a first in first out data structure.,5.0,5.0,5.0,0.9703072309999999,0.297185183,0.98898537,0.9999447309999999,0.9684990565599325,0.38317718882586793,0.9888983566740113,0.9999447267801328
1431,1431.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued",5.0,5.0,5.0,0.976994515,0.23943652199999998,0.993081703,0.9999636999999999,0.9755935702124541,0.33249429120055796,0.9930270498675616,0.999963697228443
1432,1432.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A first in, first out Abstract Data type that can be used to store values.",5.0,5.0,5.0,0.9847148659999999,0.38817036200000005,0.9913449409999999,0.999920618,0.9837840606375292,0.46302999290521285,0.9912765678026961,0.999920611939071
1433,1433.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Stores a set of elements in a particular order with a First In, First Out principle",5.0,5.0,5.0,0.9698527459999999,0.09179467699999999,0.98874167,0.999962982,0.9680168951865908,0.20291697484777038,0.9886527314938152,0.999962979173623
1434,1434.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",object that stores elements in order that follows first in first out.  the first element added is the first one to come off.,5.0,5.0,5.0,0.978209972,0.367552251,0.991999472,0.999971895,0.9768830438284324,0.4449345844412784,0.9919362694638326,0.9999718928541433
1435,1435.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.",5.0,5.0,5.0,0.983190954,0.44949886200000005,0.990592829,0.9999773559999999,0.9821673483086912,0.5168547229195386,0.990518514271602,0.9999773542710982
1436,1436.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a finite ordered list with zero or more elements, based upon First In First Out",5.0,5.0,5.0,0.972290874,0.079008013,0.989435064,0.9999579690000001,0.9706034957231606,0.1916948067271756,0.9893516031647094,0.9999579657908734
1437,1437.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a data structure that performs operations in the order of first in first out FIFO,5.0,5.0,5.0,0.966639638,0.196468785,0.992447042,0.999975475,0.9646081213745281,0.29478381657046665,0.9923873751753646,0.9999754731274814
1438,1438.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",5.0,5.0,5.0,0.9798424840000001,0.463541955,0.993577178,0.999953816,0.9786149694759605,0.5291795912807583,0.9935264390188038,0.9999538124737858
1439,1439.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Queue is a buffer, which store element in a particular order",2.0,5.0,3.5,0.970498443,0.20495291100000002,0.9859925490000001,0.9999041959999999,0.9687019126289325,0.3022298782115882,0.985881892999741,0.9999041886852277
1440,1440.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","stores a set of elements where the first element in, is the first element to be removed",5.0,5.0,5.0,0.97662878,0.39591127600000003,0.991516858,0.999975185,0.9752055633698098,0.46982377729769126,0.9914498429118622,0.9999751831053395
1441,1441.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure that removes nodes from the head and adds nodes at the tail.,5.0,5.0,5.0,0.975800514,0.369522691,0.993224964,0.999958127,0.9743268591836383,0.4466639337814617,0.9931714426001842,0.9999581238029368
1442,1442.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of things that follows the first in first out behavior,5.0,5.0,5.0,0.974002123,0.161680996,0.988556388,0.999952622,0.9724189531485314,0.26425244289068756,0.9884659858038805,0.9999526183826221
1443,1443.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a queue is a storage container that holds its objects in a first in, first out priority",5.0,5.0,5.0,0.9748901729999999,0.147807375,0.992133989,0.9999420170000001,0.9733610819483733,0.25207631100019484,0.992071849120642,0.9999420125729154
1444,1444.0,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",5.0,5.0,5.0,0.9842028620000001,0.29070571100000003,0.990722984,0.9999714670000001,0.9832408775802304,0.3774905043148269,0.9906496974695028,0.9999714648214649
1445,1445.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue which adds data to the queue and dequeue which deletes data from the queue,5.0,5.0,5.0,0.8184304240000001,0.624561429,0.983872098,0.99992399,0.8073735412142591,0.6704977339892665,0.9837446908701881,0.9999239841965281
1446,1446.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.",5.0,5.0,5.0,0.78579402,0.43638283,0.9743493440000001,0.999876323,0.772749706822418,0.5053434861982873,0.9741467090597115,0.9998763135570844
1447,1447.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,5.0,5.0,5.0,0.784596741,0.44395199399999996,0.9783372109999999,0.9999151079999999,0.7714795181761189,0.5119865348418079,0.9781660793940286,0.9999151015183745
1448,1448.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions are enqueue and dequeue.,5.0,5.0,5.0,0.847714961,0.654105187,0.9865501059999999,0.999977958,0.8384413929092478,0.6964267033584598,0.9864438545860954,0.999977956317062
1449,1449.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5.0,5.0,5.0,1.0,0.791285157,1.0,1.0,1.0,0.8168221940132665,0.9999999999999999,1.0000000000000002
1450,1450.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5.0,5.0,5.0,1.0,0.791285157,1.0,1.0,1.0,0.8168221940132665,0.9999999999999999,1.0000000000000002
1451,1451.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue - insert into queue dequeue - remove element,5.0,5.0,5.0,0.821023762,0.6241499779999999,0.9785125159999999,0.999857533,0.8101248034376973,0.6701366255488329,0.9783427692677021,0.9998575221224411
1452,1452.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"Remove the item added first, add items to the back.",5.0,5.0,5.0,0.7474962470000001,-0.031791557000000005,0.983223911,0.999731157,0.732119748021555,0.09445197605377925,0.9830913833253552,0.9997311364734529
1453,1453.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions of a queue are enqueue and dequeue.,5.0,5.0,5.0,0.8289487959999999,0.6948558090000001,0.9868012079999999,0.9999514629999999,0.818532441263412,0.7321913352517208,0.9866969402405787,0.9999514592941307
1454,1454.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue.,5.0,5.0,5.0,0.944518447,0.861480951,0.998638349,0.999984876,0.9411398356609952,0.8784292716393494,0.9986275922353746,0.999984874845261
1455,1455.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1456,1456.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5.0,5.0,5.0,1.0,0.791285157,1.0,1.0,1.0,0.8168221940132665,0.9999999999999999,1.0000000000000002
1457,1457.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1458,1458.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1459,1459.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enque ( Data ),  Deque ( )",5.0,5.0,5.0,0.77980125,0.19461897,0.978626058,0.99986897,0.7663920003781542,0.29316033331306673,0.9784572082262982,0.9998689599956724
1460,1460.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1461,1461.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1462,1462.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"The two functions are, Enqueue and Dequeue",5.0,5.0,5.0,0.8727372290000001,0.635673344,0.9890869040000001,0.99995972,0.8649874199574565,0.6802500648764908,0.9890006927718613,0.9999597169245645
1463,1463.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue, dequeue",5.0,5.0,5.0,0.953791976,0.952721655,0.9906937720000001,0.999979787,0.950978086600772,0.9585063362849384,0.9906202547006727,0.9999797854567086
1464,1464.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",5.0,5.0,5.0,0.793593109,0.554314077,0.977727184,0.9999148640000001,0.7810237300862319,0.6088454066761689,0.9775512333053972,0.999914857499745
1465,1465.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"Enqueue and dequeue, which add and remove elements from the queue",5.0,5.0,5.0,0.849514544,0.706270278,0.985846325,0.999908267,0.8403505635325301,0.742209201532192,0.9857345138600241,0.9999082599960545
1466,1466.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5.0,5.0,5.0,1.0,0.791285157,1.0,1.0,1.0,0.8168221940132665,0.9999999999999999,1.0000000000000002
1467,1467.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,dequeue and enqueue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1468,1468.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1469,1469.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1470,1470.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue dequeue,5.0,5.0,5.0,0.923069537,0.95816648,0.99455103,0.999773197,0.9183847702522725,0.9632849667031006,0.9945079842505818,0.999773179683267
1471,1471.0,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,rear and front,2.0,3.0,2.5,0.754489243,0.020799778,0.9856369190000001,0.99987335,0.7395385903488777,0.14060856568939664,0.9855234535954195,0.9998733403300916
1472,1472.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.,5.0,4.0,4.5,0.989369154,0.568076789,0.994111269,0.999950428,0.9887217767205858,0.6209241996951556,0.9940647492285538,0.999950424215107
1473,1473.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,2.0,4.0,3.0,0.985423029,0.399920225,0.9898286409999999,0.999922813,0.9845353480169363,0.47334221648283686,0.9897482893425756,0.9999228071066624
1474,1474.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,2.0,4.0,3.0,0.984420359,0.516616941,0.9914651809999999,0.999969253,0.9834716193037587,0.5757606554183798,0.9913977576741232,0.9999692506524226
1475,1475.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ",1.0,4.0,2.5,0.973005652,0.31510716699999997,0.9924189590000001,0.999932576,0.971361800930405,0.3989063514520705,0.9923590703254038,0.9999325708520813
1476,1476.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,4.0,4.0,4.0,0.990402818,0.587620974,0.990867257,0.9999757309999999,0.9898183868481234,0.6380770809978946,0.9907951101967183,0.9999757291470271
1477,1477.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",5.0,4.0,4.5,0.979130387,0.35542234799999994,0.988922008,0.9999749529999999,0.9778595085312152,0.43428882017058923,0.9888344941271603,0.9999749510876258
1478,1478.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,3.0,5.0,4.0,0.982580125,0.24871496899999998,0.989008771,0.999901223,0.9815193221922804,0.34063748571415653,0.9889219425371288,0.999901215458235
1479,1479.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.,4.0,4.0,4.0,0.9803082940000001,0.41806182299999994,0.9931156440000001,0.999958366,0.9791091454978673,0.48926412251964563,0.9930612589945255,0.9999583628211847
1480,1480.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare two variables, “front” and “rear”, to be used to denote which elements in the array can be accessed. Increment “rear” whenever data is enqueued to the end and increment “front” whenever data is dequeued.",5.0,4.0,4.5,0.963808656,0.21827755899999998,0.990879829,0.999977115,0.9616047435534212,0.31392420598963466,0.9908077815129491,0.9999771132526977
1481,1481.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",It is an array of fixed size. A queue of maximum N elements.,1.0,4.0,2.5,0.9739720820000001,0.406414777,0.9896692420000001,0.999947025,0.9723870827681746,0.47904213589981265,0.9895876311230515,0.9999470209552831
1482,1482.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",4.0,4.0,4.0,0.985926628,0.34051349799999997,0.9932841059999999,0.999895117,0.9850696142423421,0.4212041233970813,0.9932310518098976,0.9998951089920332
1483,1483.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.,3.0,4.0,3.5,0.986783683,0.5420448179999999,0.9960321,0.999968964,0.9859788605669277,0.5980773371301855,0.9960007544009021,0.9999689616303572
1484,1484.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add in data from the first element to the last, take out data from the first element to the last.",2.0,4.0,3.0,0.9720919729999999,0.192056552,0.994919668,0.999813237,0.9703924824238899,0.2909114366820738,0.994879534415445,0.9998132227403782
1485,1485.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,3.0,4.0,3.5,0.976862013,0.301680952,0.988127414,0.999920757,0.9754529993546908,0.3871228837740857,0.988033622996948,0.9999207509496839
1486,1486.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",4.0,4.0,4.0,0.9874084590000001,0.41865918,0.9932296420000001,0.9999594690000001,0.9866416830015319,0.489788390669807,0.9931761575554282,0.9999594659054004
1487,1487.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,4.0,4.0,4.0,0.97185415,0.541240752,0.9960226670000001,0.999973717,0.9701401769258158,0.5973716515946891,0.99599124688213,0.9999737149932556
1488,1488.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",3.0,4.0,3.5,0.9812415240000001,0.354646146,0.9900679459999999,0.9999346790000001,0.9800992055844351,0.43360758937109833,0.98998948480317,0.9999346740126486
1489,1489.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",2.0,4.0,3.0,0.981484294,0.441617638,0.991750122,0.999971116,0.9803567593356175,0.5099377959772128,0.9916849496497911,0.9999711137946655
1490,1490.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",fixed size array with max N elements.  Need to keep track of front and rear of array.,4.0,4.0,4.0,0.986752987,0.572593153,0.9909085940000001,0.999975087,0.9859462952996119,0.624887969768554,0.9908367737505706,0.9999750850978569
1491,1491.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",5.0,5.0,5.0,0.981449425,0.447915316,0.993776801,0.9999669640000001,0.9803197669487904,0.5154649296600382,0.9937276389997077,0.9999669614776544
1492,1492.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",5.0,5.0,5.0,0.992999375,0.620883584,0.99596293,0.9998894629999999,0.9925730640961736,0.6672698869987231,0.9959310379720382,0.9998894545603421
1493,1493.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",0.0,4.0,2.0,0.982928693,0.290751457,0.9942905590000001,0.999944097,0.9818891166312234,0.3775306531216497,0.9942454555829133,0.9999440927317261
1494,1494.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",remove the element then shift the elements one space back,2.0,4.0,3.0,0.960342765,0.109236233,0.9914373479999999,0.999941011,0.9579277932373211,0.21822449162593624,0.9913697047991112,0.9999410064961057
1495,1495.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,5.0,5.0,5.0,0.979329824,0.345398217,0.992820631,0.999976008,0.9780710904708065,0.42549117886673815,0.9927639154521158,0.9999760061681765
1496,1496.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",an array is a type of queue with a fixed length,0.0,3.0,1.5,0.9685865640000001,0.289977461,0.985881335,0.999870058,0.9666736076148985,0.3768513584098572,0.9857698004318692,0.9998700480787427
1497,1497.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",5.0,5.0,5.0,0.986837387,0.503214002,0.992851668,0.999844521,0.9860358349321852,0.5639976158352581,0.992795197638073,0.9998445091289563
1498,1498.0,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,5.0,5.0,5.0,0.813733041,0.18750628800000002,0.982959969,0.999900606,0.8023901058128879,0.2869179143997107,0.982825356237496,0.9999005984111261
1499,1499.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.,5.0,5.0,5.0,0.988069952,0.475130349,0.981495398,0.999807236,0.9873434583589935,0.5393501021908512,0.9813492154259038,0.9998072212821932
1500,1500.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,0.0,4.0,2.0,0.980130673,0.20294179,0.987292383,0.999858425,0.9789207080680415,0.3004648253430011,0.9871919954226995,0.9998584141905466
1501,1501.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",5.0,5.0,5.0,0.989504814,0.495486528,0.991672398,0.9999360620000001,0.9888656978882977,0.5572156270088117,0.9916066116460751,0.9999360571182424
1502,1502.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",You can use list to represent the items in a queue.,0.0,3.0,1.5,0.975413203,0.423335522,0.978533868,0.999780662,0.9739159624462972,0.49389256484013,0.9783642899441386,0.9997806452532304
1503,1503.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,3.0,4.0,3.5,0.9816609620000001,0.493991941,0.987057746,0.999824314,0.9805441857314403,0.5559039082849244,0.9869555048383513,0.999824300586123
1504,1504.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,5.0,5.0,5.0,0.9840909240000001,0.665550828,0.991142981,0.999840642,0.98312212299029,0.7064719276288381,0.9910730123599698,0.9998406298327891
1505,1505.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you use the first element in the list as the remove point for the queue and insert items at the end of the list.,5.0,5.0,5.0,0.9875457879999999,0.607838571,0.9854354009999999,0.999872758,0.9867873748048688,0.6558209798387834,0.9853203436444027,0.9998727482848916
1506,1506.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.",5.0,4.0,4.5,0.9830597040000001,0.298329413,0.987409155,0.99990851,0.982028105692871,0.3841814180312829,0.9873096898976355,0.9999085030146079
1507,1507.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,5.0,4.0,4.5,0.9761879440000001,0.430956274,0.984208484,0.9998198290000001,0.9747378821676174,0.5005808895000536,0.9840837342508425,0.9998198152436869
1508,1508.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Check if list is empty and add elements to the list.,1.0,4.0,2.5,0.97148782,0.400372326,0.9824836790000001,0.999738081,0.9697515388499798,0.47373900124463936,0.9823453036438333,0.99973806100211
1509,1509.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","make a linked list and add on to the front and delete from the back, keep track of both to do so.",5.0,4.0,4.5,0.983798921,0.5031476020000001,0.988439567,0.9998419270000001,0.982812338140405,0.563939340122124,0.9883482419418547,0.9998419149309007
1510,1510.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,5.0,4.0,4.5,0.989570141,0.73819077,0.987269255,0.99989989,0.9889350030491639,0.7702241026601252,0.9871686847162261,0.9998998823564585
1511,1511.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",throw in data at the head and take it out at the tail,4.0,5.0,4.5,0.9757633809999999,0.328531712,0.979480288,0.999814798,0.9742874649279942,0.41068835346076416,0.9793181864687229,0.9998147838595627
1512,1512.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",2.0,4.0,3.0,0.9798595309999999,0.33287411899999997,0.99026515,0.999798367,0.9786330545721271,0.4144994508198601,0.9901882466744684,0.9997983516050324
1513,1513.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",5.0,4.0,4.5,0.9855570790000001,0.43683770299999997,0.991121512,0.999898275,0.9846775611418943,0.5057427037955838,0.9910513737592573,0.9998982672331509
1514,1514.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",5.0,4.0,4.5,0.979161084,0.451539785,0.988763182,0.999817231,0.9778920748594273,0.5186459314026259,0.9886744134342189,0.9998172170453258
1515,1515.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element",4.0,4.0,4.0,0.9793140290000001,0.395050347,0.988627712,0.999829801,0.9780543336165828,0.4690681861616533,0.9885378732489043,0.9998297880050632
1516,1516.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.",2.0,4.0,3.0,0.9792615179999999,0.36404261,0.9886753909999999,0.9997498020000001,0.9779986249003971,0.4418543610659764,0.9885859289032602,0.9997497828970253
1517,1517.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,3.0,4.0,3.5,0.964934945,0.32335546600000004,0.982239245,0.9998298879999999,0.9627996191841235,0.4061454404034135,0.9820989386651872,0.9998298750117057
1518,1518.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","a queue can be implemented in a list by keeping track of two pointers, a head and a tail",5.0,4.0,4.5,0.976828933,0.47115466,0.98137111,0.9997821929999999,0.9754179049110234,0.5358608535210496,0.981223945576104,0.9997821763701243
1519,1519.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",5.0,5.0,5.0,0.984987319,0.561345458,0.98740374,0.9998244609999999,0.9840731049682576,0.6150164720691406,0.987304232120242,0.9998244475973465
1520,1520.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)",3.0,5.0,4.0,0.965138912,0.252584696,0.9801867209999999,0.999873061,0.9630160069831408,0.3440337372286098,0.9800302001450523,0.999873051308026
1521,1521.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",remove the first element and reference the second element as the new head of the list.,3.0,4.0,3.5,0.9768877029999999,0.362454295,0.986747988,0.999768975,0.9754802537760274,0.44046038231135654,0.9866432998134551,0.9997689573609112
1522,1522.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,5.0,5.0,5.0,0.988476336,0.527887046,0.9855822559999999,0.999855103,0.9877745895680412,0.5856518211709761,0.9854683587688906,0.9998550919369071
1523,1523.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you would have your list and add a back pointer so that your program knows where the end is,4.0,4.0,4.0,0.966291845,0.298115879,0.984300818,0.999768027,0.9642391491300786,0.38399401071007205,0.9841767976705725,0.99976800928853
1524,1524.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",4.0,5.0,4.5,0.9863104220000001,0.552159429,0.990940041,0.999829293,0.9854767798080271,0.606954387869645,0.9908684691754438,0.9998292799662767
1525,1525.0,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   },3.0,4.0,3.5,0.885942578,0.085201256,0.958639227,0.99972927,0.8789969234818785,0.19713028342052558,0.9583124853460188,0.9997292493293777
1526,1526.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push.,5.0,5.0,5.0,0.874519229,0.43882393799999997,0.949310408,0.999734633,0.8668779368442514,0.5074859155587935,0.9489099705824084,0.9997346127388504
1527,1527.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"push, which inserts something at the top of the stack.",5.0,5.0,5.0,0.8341085909999999,0.337653756,0.9460803259999999,0.999747147,0.8240064477616722,0.41869428146289694,0.945654371594726,0.9997471276943122
1528,1528.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,The stack operation corresponding to enqueue in queues is the push operation.,5.0,5.0,5.0,0.8467758890000001,0.291209072,0.9413693590000001,0.999749375,0.8374451350675441,0.37793227722505196,0.9409061889181857,0.9997493558644233
1529,1529.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.",5.0,5.0,5.0,0.814186215,0.12225451300000001,0.931346971,0.9997621390000001,0.8028708763514156,0.22964993666781558,0.9308046261012168,0.999762120838973
1530,1530.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,The stack operation is almost the opposite of the enqueue operation.,0.0,5.0,2.5,0.811025918,0.033965752,0.9345323879999999,0.9997084999999999,0.7995181295243745,0.1521636338212706,0.9340152072445271,0.9997084777435584
1531,1531.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push = enqueue pop = dequeue,5.0,4.0,4.5,0.81407547,0.34297025200000003,0.9486556840000001,0.999513002,0.8027533874105469,0.42336028441131807,0.9482500743966116,0.9995129648170069
1532,1532.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1533,1533.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.,5.0,5.0,5.0,0.840489268,0.073715433,0.924982952,0.99969676,0.8307756832373647,0.18704979356723822,0.9243903326517033,0.9996967368471927
1534,1534.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",5.0,5.0,5.0,0.8297785520000001,0.16779817600000002,0.9352701459999999,0.9997533820000001,0.8194127261848034,0.269621163174879,0.9347587933819548,0.9997533631703635
1535,1535.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push operation.,5.0,5.0,5.0,0.88122642,0.41463795299999995,0.945237329,0.9997457890000001,0.8739935697558443,0.4862591757436092,0.9448047150907056,0.9997457695906271
1536,1536.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1537,1537.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1538,1538.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1539,1539.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1540,1540.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"that would be the push operation, if it put the item at the end of the list.",5.0,5.0,5.0,0.831012607,0.304187775,0.938749207,0.999731904,0.8207219303468313,0.389322987660023,0.9382653382528545,0.9997318835304874
1541,1541.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1542,1542.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1543,1543.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,the Push method in the stack operations.,5.0,5.0,5.0,0.8552779559999999,0.30489435800000003,0.943333412,0.9996715890000001,0.8464649449643799,0.38994311760299755,0.9428857575355007,0.9996715639253511
1544,1544.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1545,1545.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,enqueue corresponds with push dequeue corresponds with pop,5.0,4.0,4.5,0.840909421,0.35999637799999995,0.9482155440000001,0.9995596659999999,0.8312214219250962,0.4383032005944937,0.947806457380561,0.9995596323798699
1546,1546.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",5.0,5.0,5.0,0.838946581,0.192397863,0.9358028909999999,0.999749462,0.8291390525838636,0.2912109870122779,0.93529574695858,0.9997494428710658
1547,1547.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,FIFO: First in First out,0.0,3.0,1.5,0.7432646159999999,0.013736907,0.940404738,0.9995817640000001,0.7276304271101156,0.1344098632150004,0.939933947609421,0.9995817320670839
1548,1548.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1549,1549.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push,5.0,5.0,5.0,1.0,0.654492259,0.9643222029999999,0.999948829,1.0,0.6967664156601809,0.9640403556950139,0.9999488250930212
1550,1550.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1551,1551.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1552,1552.0,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
1553,1553.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).,3.0,5.0,4.0,0.982897103,0.451646328,0.9932750640000001,0.999984251,0.9818556029227756,0.5187394384704642,0.9932219383799455,0.9999842497975414
1554,1554.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,5.0,5.0,5.0,0.995324194,0.838155329,0.980885625,0.999979207,0.9950394555542217,0.8579576262124073,0.9807346253438205,0.9999792054124249
1555,1555.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,4.0,5.0,4.5,0.989591241,0.7012603279999999,0.9790843290000001,0.999985323,0.9889573879573073,0.7378122375409764,0.9789190994735435,0.9999853218793903
1556,1556.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A connected, undirected graph without cycles.",4.0,5.0,4.5,0.972482562,0.20240487199999999,0.9873392240000001,0.9999582229999999,0.970806856778714,0.29999360125648616,0.9872392064570269,0.9999582198102664
1557,1557.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",5.0,5.0,5.0,0.987085462,0.585660338,0.992929995,0.999973915,0.9862990167372871,0.6363563361018615,0.9928741434053657,0.999973913008373
1558,1558.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a tree is a series of nodes where each node has links to other nodes.,1.0,5.0,3.0,0.9873934390000001,0.629551351,0.981637593,0.999983168,0.9866257483418015,0.6748771204807434,0.981492533737344,0.9999831667148528
1559,1559.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","an infinite set of nodes that have a root and descendants, and each addition is a leaf.",2.0,5.0,3.5,0.989662409,0.580034614,0.9881382559999999,0.999985204,0.9890328898124137,0.6314189403489063,0.9880445506465322,0.9999852028703043
1560,1560.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A set of one or more nodes that are hierarchically organized, with one special “root” node.",3.0,5.0,4.0,0.990547299,0.66821146,0.986194734,0.9999873659999999,0.9899716661805147,0.7088070214117853,0.9860856752199213,0.999987365035376
1561,1561.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that there is a specially designated node called the root.,2.0,5.0,3.5,0.988134801,0.7011398670000001,0.979179549,0.999981288,0.987412256411514,0.7377065153921833,0.9790150716920837,0.9999812865713121
1562,1562.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,5.0,5.0,5.0,0.98463881,0.42845016700000005,0.979213625,0.999970721,0.9837033731221858,0.4983814140088545,0.9790494168855197,0.9999707187645065
1563,1563.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a data structure where nodes are linked to each other in a hierarchical manner.,2.0,5.0,3.5,0.9834046959999999,0.467168301,0.981633346,0.999975003,0.9823941063672867,0.5323622403654177,0.981488253186912,0.9999750010914433
1564,1564.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a grouping of data in a parent to child structure,2.0,4.0,3.0,0.9695450659999999,0.060317043,0.9809759779999999,0.999976302,0.9676904786682243,0.175290746397054,0.9808256921140553,0.999976300190624
1565,1565.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,1.0,5.0,3.0,0.988977313,0.37752568700000005,0.981399178,0.9999536920000001,0.988306074123819,0.4536877334668564,0.9812522353075679,0.9999536884643182
1566,1566.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",4.0,5.0,4.5,0.9913195370000001,0.655079603,0.9927534240000001,0.999986855,0.9907909304788449,0.6972818959381193,0.9926961775305508,0.9999868539963604
1567,1567.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",5.0,5.0,5.0,0.989342272,0.496387243,0.99454519,0.999985335,0.9886932577110736,0.5580061361798309,0.9945020981157754,0.9999853338803063
1568,1568.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",5.0,5.0,5.0,0.991633415,0.752719879,0.986951263,0.9999798240000001,0.9911239224313666,0.7829755211568064,0.9868481806444128,0.9999798224595337
1569,1569.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A finite set of nodes that starts with the root and terminates with leaves.,3.0,5.0,4.0,0.9844637509999999,0.480138511,0.983542932,0.9999150109999999,0.9835176537082209,0.5437454969505144,0.9834129245260583,0.9999150045109684
1570,1570.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",1.0,4.0,2.5,0.9653907420000001,0.277154267,0.987558513,0.999960979,0.9632831724531754,0.36559712987057574,0.9874602277953117,0.999960976020691
1571,1571.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",4.0,5.0,4.5,0.99167794,0.570284128,0.99428718,0.9999781729999999,0.9911711588311334,0.6228614625619318,0.9942420498895038,0.9999781713334773
1572,1572.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",4.0,5.0,4.5,0.9889211659999999,0.365428418,0.9966887329999999,0.9999872870000001,0.9882465079893392,0.4430706103049386,0.9966625746674088,0.9999872860293445
1573,1573.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A nonlinear, two-dimensional data structure.",0.0,4.0,2.0,0.9249694940000001,0.23737134,0.986761801,0.9998855959999999,0.9204004272627575,0.330681791896312,0.9866572219333323,0.9998855872650911
1574,1574.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,3.0,5.0,4.0,0.9893472790000001,0.6072056889999999,0.983018075,0.9999809129999999,0.9886985696179491,0.6552655333044489,0.9828839212630212,0.9999809115426802
1575,1575.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",5.0,5.0,5.0,0.9876738190000001,0.601706624,0.9951901009999999,0.999956478,0.9869232023960772,0.6504392993519434,0.9951521037808776,0.9999564746770332
1576,1576.0,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A type of data structure in which each element is attached to one or more elements directly beneath it.,3.0,5.0,4.0,0.985435665,0.299907088,0.979708615,0.999979445,0.9845487535003155,0.38556605862946075,0.9795483172053607,0.9999794434305965
1577,1577.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"Each level of a generation in the tree, some people do not count the root as a generation",4.0,4.0,4.0,0.9756181840000001,0.196815491,0.99449747,0.999943281,0.9741334259939809,0.29508810180236283,0.9944540011375277,0.9999432766694233
1578,1578.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",4.0,5.0,4.5,0.975581467,0.32415545,0.990726813,0.999960648,0.9740944730711232,0.40684754338678625,0.9906535567178202,0.9999606449954187
1579,1579.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longest path from the root to a leaf.,5.0,5.0,5.0,0.991885483,0.687649787,0.997294815,0.999987865,0.9913913403946777,0.7258669968343895,0.9972734445913466,0.9999878640734755
1580,1580.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root of the tree to a leaf.,5.0,5.0,5.0,0.992545426,0.6969624759999999,0.998994713,0.999989685,0.9920914713631526,0.7340402437119812,0.9989867714381458,0.9999896842124351
1581,1581.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,5.0,5.0,5.0,0.9873802070000001,0.515061557,0.994060374,0.999960104,0.9866117105643344,0.5743955784334771,0.994013452168455,0.9999601009538835
1582,1582.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the height of a tree is the length from the root to the furthest leaf,5.0,5.0,5.0,0.986884832,0.6112704870000001,0.995261417,0.999919452,0.986086169148624,0.6588329881568059,0.9952239831627033,0.9999194458500452
1583,1583.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height is the number of generations (levels) from the root.,4.0,5.0,4.5,0.9798145890000001,0.404103935,0.9944774609999999,0.999953862,0.9785853757786782,0.4770140340098958,0.9944338340705167,0.9999538584772979
1584,1584.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of levels between the root and the leaf farthest away from it.,5.0,5.0,5.0,0.9853521590000001,0.55508697,0.9974467909999999,0.999960489,0.984460162308874,0.6095237333441123,0.9974266211706878,0.9999604859832788
1585,1585.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is the depth of its furthest leaf,4.0,5.0,4.5,0.971795917,0.408635765,0.9945416359999999,0.999970837,0.9700783977620286,0.4809913777606939,0.9944985160399015,0.9999708347733635
1586,1586.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of nodes from root to leaf,3.0,4.0,3.5,0.982829452,0.378507793,0.994800459,0.9999395729999999,0.9817838322393253,0.45454967514642536,0.9947593836887071,0.9999395683863123
1587,1587.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the distance from the deepest leaf to the root,5.0,5.0,5.0,0.979221404,0.522793949,0.996010686,0.999970928,0.9779560681134181,0.5811818835243392,0.9959791712346785,0.9999709257803114
1588,1588.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of generations or levels of a tree,4.0,5.0,4.5,0.9730126259999999,0.150738865,0.9925188090000001,0.999960196,0.9713691996199496,0.2546491222998304,0.9924597091199981,0.9999601929609078
1589,1589.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",2.0,4.0,3.0,0.962375283,0.205346718,0.990290419,0.9999641920000001,0.9600840836984403,0.3025755014610195,0.9902137152944042,0.9999641892660082
1590,1590.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",3.0,4.0,3.5,0.9745157959999999,0.291169941,0.9902505909999999,0.999887537,0.9729639068414555,0.37789793404838545,0.9901735726613435,0.9998875284132893
1591,1591.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to the leaf.,5.0,5.0,5.0,0.992068052,0.732083142,0.998936959,0.9999900409999999,0.9915850271385078,0.7648637656532208,0.9989285611933488,0.9999900402396161
1592,1592.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longes path from the root to a leaf.,5.0,5.0,5.0,0.990781307,0.638237596,0.997294815,0.999987865,0.9902199243598888,0.6825005711107651,0.9972734445913466,0.9999878640734755
1593,1593.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is equal to the number of levels.  levels between the root node and the terminal nodes.,4.0,5.0,4.5,0.977152467,0.313311756,0.9968594390000001,0.999928137,0.975761140876485,0.39733061566300426,0.9968346292099225,0.9999281315131575
1594,1594.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of generations or levels the tree has,4.0,5.0,4.5,0.970631838,0.135643929,0.993571275,0.999961342,0.9688434308669314,0.24140110784026383,0.99352048938631,0.9999613390484065
1595,1595.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",4.0,5.0,4.5,0.975580931,0.329317272,0.993857677,0.9999710490000001,0.9740939044308026,0.41137779727416335,0.9938091539035795,0.9999710467895501
1596,1596.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is the number of generations in the tree,4.0,5.0,4.5,0.974352777,0.14941838400000002,0.994341154,0.999968923,0.9727909606167819,0.2534902070595417,0.9942964502730732,0.9999689206272268
1597,1597.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to a leaf.,5.0,5.0,5.0,0.992465794,0.724135995,0.998791394,0.999987685,0.992006990083282,0.7578889816350374,0.9987818462595973,0.9999876840597323
1598,1598.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of distinct levels of separation,3.0,5.0,4.0,0.965456963,0.218498647,0.994066001,0.9999552070000001,0.9633534260551733,0.3141182430508608,0.9940191236206052,0.9999552035799907
1599,1599.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the height of a tree is how many levels of nodes that it has,4.0,5.0,4.5,0.9661077259999999,0.23148948,0.993527365,0.9999512559999999,0.9640438179972615,0.3255195993352342,0.9934762325062839,0.9999512522783259
1600,1600.0,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0.0,3.0,1.5,0.969861567,0.260163844,0.994741323,0.99994882,0.96802625335127,0.3506855482926113,0.9946997805263925,0.9999488160923339
1601,1601.0,10.3,What is a leaf?,A node that has no children.,A leaf is a child of a parent node that has no children nodes of its own.,5.0,5.0,5.0,0.978199899,0.717536032,0.992794792,0.9999530190000001,0.9768723574218101,0.7520965486458148,0.9927378723292964,0.9999530154129338
1602,1602.0,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children.,5.0,5.0,5.0,0.978360772,0.7717177270000001,0.9923642579999999,0.999946653,0.9770430269634092,0.799648911822699,0.9923039371986827,0.9999466489268803
1603,1603.0,10.3,What is a leaf?,A node that has no children.,A node with no children.,5.0,5.0,5.0,0.982779622,0.895027041,0.996068453,0.9999827859999999,0.981730967785639,0.9078708728082394,0.9960373945821729,0.9999827846856865
1604,1604.0,10.3,What is a leaf?,A node that has no children.,A tree node with no children.,5.0,5.0,5.0,0.978984773,0.8006540540000001,0.993986983,0.999982935,0.9777050272035195,0.8250447716330849,0.9939394813945536,0.999982933697063
1605,1605.0,10.3,What is a leaf?,A node that has no children.,And end point of the tree... a node that does not have any children.,5.0,5.0,5.0,0.96479708,0.6740638609999999,0.994044382,0.999960452,0.9626533587404658,0.7139433593910376,0.9939973338349234,0.9999604489804538
1606,1606.0,10.3,What is a leaf?,A node that has no children.,a node with no children.,5.0,5.0,5.0,0.982779622,0.8534740209999999,0.994214533,0.999975429,0.981730967785639,0.8714020192934807,0.9941688289930503,0.9999754271239693
1607,1607.0,10.3,What is a leaf?,A node that has no children.,A new item to the tree--a child,2.0,4.0,3.0,0.9351238609999999,0.238131553,0.9918037270000001,0.999952773,0.9311731558195546,0.3313489900093978,0.9917389781183361,0.9999527693941511
1608,1608.0,10.3,What is a leaf?,A node that has no children.,"A leaf is a node with children, it is a terminating node.",0.0,4.0,2.0,0.962892592,0.663677454,0.992536628,0.9999705959999999,0.9606328948096587,0.7048277679026773,0.9924776688864564,0.9999705937549627
1609,1609.0,10.3,What is a leaf?,A node that has no children.,The node with degree 0.,3.0,5.0,4.0,0.939364195,0.537806332,0.9953418690000001,0.9999658579999999,0.9356717097099311,0.5943574456503762,0.9953050707170618,0.9999658553932095
1610,1610.0,10.3,What is a leaf?,A node that has no children.,the node with degree 0,3.0,5.0,4.0,0.9144724609999999,0.324948311,0.9932865809999999,0.99994372,0.9092641656759204,0.40754339489569136,0.9932335463618917,0.9999437157029417
1611,1611.0,10.3,What is a leaf?,A node that has no children.,a leaf is a node with no children,5.0,5.0,5.0,0.9656658770000001,0.562754035,0.9920366,0.9999140590000001,0.9635750621072989,0.6162527044363008,0.9919736907674449,0.999914052438282
1612,1612.0,10.3,What is a leaf?,A node that has no children.,the last child on any branch,4.0,5.0,4.5,0.901593506,0.15046478800000002,0.9932501509999999,0.999933222,0.8956009322798646,0.2544085796397598,0.9931968285723366,0.9999332169014045
1613,1613.0,10.3,What is a leaf?,A node that has no children.,The last value in the tree. A value with no children attatched.,5.0,5.0,5.0,0.96836108,0.47066003100000003,0.995390368,0.9999505470000001,0.9664343925140555,0.5354267442181603,0.99535395284925,0.999950543224193
1614,1614.0,10.3,What is a leaf?,A node that has no children.,a node with no children.,5.0,5.0,5.0,0.982779622,0.8534740209999999,0.994214533,0.999975429,0.981730967785639,0.8714020192934807,0.9941688289930503,0.9999754271239693
1615,1615.0,10.3,What is a leaf?,A node that has no children.,A node with no children.,5.0,5.0,5.0,0.982779622,0.895027041,0.996068453,0.9999827859999999,0.981730967785639,0.9078708728082394,0.9960373945821729,0.9999827846856865
1616,1616.0,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children,5.0,5.0,5.0,0.9656658770000001,0.621994197,0.991443466,0.99993286,0.9635750621072989,0.6682446123690714,0.991375871130061,0.9999328548737653
1617,1617.0,10.3,What is a leaf?,A node that has no children.,a node with degree 0.  last node in the tree and furtherest away from the root.,3.0,5.0,4.0,0.9439498190000001,0.41582390700000005,0.993624712,0.999940122,0.9405365804217674,0.4873000238625004,0.9935743485276894,0.9999401174282293
1618,1618.0,10.3,What is a leaf?,A node that has no children.,an endpoint on a tree that contains no pointers or pointers that are set to null,4.0,5.0,4.5,0.954118967,0.21743243899999998,0.9953779209999999,0.999937615,0.9513249900841223,0.31318248956367106,0.9953414075204937,0.9999376102368162
1619,1619.0,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children.,5.0,5.0,5.0,0.978360772,0.7717177270000001,0.9923642579999999,0.999946653,0.9770430269634092,0.799648911822699,0.9923039371986827,0.9999466489268803
1620,1620.0,10.3,What is a leaf?,A node that has no children.,an element in a tree that has no children,5.0,5.0,5.0,0.970517278,0.47227451200000004,0.995224295,0.9999326070000001,0.9687218946073628,0.5368436874653986,0.9951865679064896,0.9999326018544484
1621,1621.0,10.3,What is a leaf?,A node that has no children.,A node with no children.,5.0,5.0,5.0,0.982779622,0.895027041,0.996068453,0.9999827859999999,0.981730967785639,0.9078708728082394,0.9960373945821729,0.9999827846856865
1622,1622.0,10.3,What is a leaf?,A node that has no children.,a leaf is a node that has no children nodes,5.0,5.0,5.0,0.9795700909999999,0.6866337659999999,0.996115009,0.999951099,0.9783259887989992,0.7249752897811615,0.9960843183650584,0.999951095266339
1623,1623.0,10.3,What is a leaf?,A node that has no children.,a leaf is a node with no children,5.0,5.0,5.0,0.9656658770000001,0.562754035,0.9920366,0.9999140590000001,0.9635750621072989,0.6162527044363008,0.9919736907674449,0.999914052438282
1624,1624.0,10.3,What is a leaf?,A node that has no children.,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",5.0,5.0,5.0,0.9634191990000001,0.341202021,0.989012415,0.999915505,0.9611915701330058,0.4218084030482004,0.9889256153239843,0.9999154985486861
1625,1625.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.",4.0,5.0,4.5,0.9722977279999999,0.495114505,0.985406277,0.9999571970000001,0.9706107671051707,0.5568891224059904,0.9852909895707548,0.9999571937319299
1626,1626.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",5.0,5.0,5.0,0.976371944,0.48581928,0.988986725,0.9999646209999999,0.974933087053796,0.5487312027430702,0.9888997223782343,0.9999646182987628
1627,1627.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.975423336,0.460507751,0.9878911290000001,0.9999651340000001,0.9739267125066866,0.5265166334208989,0.9877954713937366,0.9999651313379313
1628,1628.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",5.0,5.0,5.0,0.97847575,0.467431903,0.976766384,0.9999543909999999,0.9771650066775559,0.5325935896806827,0.9765828431817516,0.9999543875176876
1629,1629.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A tree in which each parent has a maximum of 2 children.,5.0,5.0,5.0,0.9862926009999999,0.6997044090000001,0.9973212859999999,0.999949146,0.9854578735782629,0.7364466910153128,0.9973001247068368,0.9999491421172245
1630,1630.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each node has at most 2 children.,5.0,5.0,5.0,0.974440277,0.6146059629999999,0.9941321870000001,0.999937484,0.9728837890273287,0.6617603562673786,0.9940858324764791,0.9999374792268142
1631,1631.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree with up to two children or a right subtree and/or a left subtree,5.0,5.0,5.0,0.956677377,0.293088108,0.995734692,0.999958412,0.9540391973278624,0.37958140618446234,0.9957009969384821,0.999958408824697
1632,1632.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",5.0,5.0,5.0,0.985542238,0.6865431670000001,0.993088192,0.9999669109999999,0.9846618163825691,0.7248957759056459,0.9930335901293356,0.9999669084736075
1633,1633.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a binary tree is a tree data structure in which each node has at most two children.,5.0,5.0,5.0,0.978856921,0.622073352,0.993920336,0.999948849,0.9775693895127169,0.6683140824605343,0.993872307896874,0.9999488450945483
1634,1634.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"a tree with only 2 joints, left and right",4.0,5.0,4.5,0.9530362490000001,0.160286486,0.992751231,0.999948739,0.950176338758288,0.26302855637377814,0.9926939672062988,0.9999487350861495
1635,1635.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,4.0,5.0,4.5,0.97646898,0.532673955,0.9906346659999999,0.999950722,0.9750360321697482,0.5898530340577767,0.9905606817753518,0.9999507182375543
1636,1636.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each parent can have at max two children.,5.0,5.0,5.0,0.972958267,0.500756264,0.996335344,0.99994336,0.9713115303677335,0.5618405912170797,0.9963063939665294,0.9999433556754552
1637,1637.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,1.0,3.0,2.0,0.9669517879999999,0.20576512800000002,0.9950867379999999,0.999940932,0.9649392800985532,0.30294271744193046,0.9950479242343014,0.9999409274900738
1638,1638.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each node can have at most 2 children.,5.0,5.0,5.0,0.975239277,0.586305916,0.993854542,0.99994589,0.9737314450276369,0.636922925233394,0.9938059941377201,0.9999458858686242
1639,1639.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.9748772379999999,0.443392426,0.9827735999999999,0.9999699870000001,0.9733473592570543,0.5114954320670024,0.9826375149604832,0.9999699847084648
1640,1640.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5.0,5.0,5.0,0.9768612390000001,0.49336791,0.9882654190000001,0.9999664770000001,0.9754521782210936,0.5553562297978333,0.9881727182082446,0.9999664744404712
1641,1641.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree that has a maximum of 2 children per node,5.0,5.0,5.0,0.9834266309999999,0.772487283,0.99607557,0.999973443,0.9824173771236906,0.8003243097849988,0.9960445678050184,0.9999734409723352
1642,1642.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree with elements that can contain at most two pointers,5.0,5.0,5.0,0.9625946879999999,0.217920825,0.9961639170000001,0.999951325,0.9603168496117664,0.3136111197208212,0.9961336127282633,0.9999513212835943
1643,1643.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary tree can have only two children for each node.,5.0,5.0,5.0,0.9800502059999999,0.607055545,0.993044116,0.999964764,0.9788353409399104,0.655133759981063,0.9929891659379432,0.9999647613096813
1644,1644.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where every parent has only two children,4.0,5.0,4.5,0.9553986790000001,0.36573126899999997,0.99535523,0.9999581359999999,0.9526826315803254,0.44333640635913146,0.9953185372662311,0.9999581328036239
1645,1645.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A tree where every node has no more than two children,5.0,5.0,5.0,0.9580717679999999,0.517606735,0.994821363,0.99997556,0.9555185013302725,0.576629344442566,0.9947804528260352,0.9999755581339712
1646,1646.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"a binary tree is a special search tree where each node has either 2, 1, or 0 children",4.0,5.0,4.5,0.971319377,0.436696112,0.9904253690000001,0.999915392,0.9695728383247484,0.5056184369808492,0.9903497313718251,0.9999153855400584
1647,1647.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a binary tree is a special type of tree where each node can only have at maximum 2 children,5.0,5.0,5.0,0.979722917,0.591922939,0.9930337220000001,0.99993119,0.9784881213095165,0.6418526845860483,0.9929786898274674,0.9999311847462583
1648,1648.0,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary tree is a special type of inverted tree in which each element has only two branches below it.,4.0,5.0,4.5,0.979229331,0.493172735,0.993010686,0.9999686390000001,0.9779644778369656,0.5551849351847162,0.9929554718477752,0.999968636605543
1649,1649.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.",5.0,5.0,5.0,0.9843956229999999,0.37920349799999997,0.990699771,0.999962792,0.983445376977321,0.45516025805314275,0.9906263010915467,0.9999627891591162
1650,1650.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.,5.0,5.0,5.0,0.9813343290000001,0.47664389,0.9959678209999999,0.9999811409999999,0.9801976620489015,0.5406784558223702,0.9959359676099385,0.9999811395600885
1651,1651.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",5.0,5.0,5.0,0.9821827409999999,0.429952264,0.9950062279999999,0.9999822859999999,0.9810977390483173,0.4996997238563206,0.9949667782217549,0.9999822846475109
1652,1652.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",5.0,5.0,5.0,0.974412143,0.455088735,0.994399703,0.9999688959999999,0.9728539417758737,0.5217606541756327,0.9943554617982079,0.9999688936251653
1653,1653.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",5.0,5.0,5.0,0.984388292,0.394077539,0.9912635479999999,0.9999794540000001,0.9834375995478613,0.4682144048372156,0.99119453181463,0.9999794524312838
1654,1654.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,4.0,5.0,4.5,0.98653394,0.511526406,0.99493633,0.9999809209999999,0.985713909187097,0.5712929663015177,0.9948963280418398,0.999980919543291
1655,1655.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,5.0,3.0,4.0,0.9903120999999999,0.5584515329999999,0.995923998,0.9999848109999999,0.9897221444738606,0.6124766295520936,0.9958917984171943,0.9999848098402982
1656,1656.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",3.0,4.0,3.5,0.9770629409999999,0.23737961100000002,0.984858681,0.9999258440000001,0.9756661630903978,0.33068905090871165,0.9847390676742644,0.9999258383380837
1657,1657.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",5.0,5.0,5.0,0.983076453,0.319799215,0.9828847270000001,0.999969118,0.9820458746419938,0.40302430993490085,0.9827495198410728,0.9999691156421152
1658,1658.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary tree with the data organized in a specific arangment,2.0,3.0,2.5,0.966840148,0.252275258,0.9918229129999999,0.9999487290000001,0.9648208416556567,0.3437621601183564,0.991758315683815,0.9999487250853861
1659,1659.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",4.0,5.0,4.5,0.990377367,0.5518000129999999,0.995066503,0.999989943,0.9897913859809597,0.6066389477535026,0.995027529381937,0.9999899422321338
1660,1660.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a binary tree in which the data is in order from left to right.,4.0,4.0,4.0,0.979982913,0.425709337,0.9912425290000001,0.9999481029999999,0.9787639500572711,0.4959759347493721,0.9911733467688257,0.9999480990375899
1661,1661.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,3.0,4.0,3.5,0.983468115,0.269955039,0.994185997,0.9999677440000001,0.982461387338355,0.3592787541820855,0.9941400675644821,0.9999677415372085
1662,1662.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",5.0,5.0,5.0,0.990681052,0.601495624,0.994959512,0.999975497,0.9901135642193246,0.6502541159864116,0.9949196931749021,0.999975495129161
1663,1663.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",5.0,5.0,5.0,0.981216192,0.432608813,0.9954589770000001,0.99998354,0.9800723309639094,0.5020312342094978,0.9954231038463289,0.9999835387432555
1664,1664.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,1.0,4.0,2.5,0.981166542,0.39439201399999996,0.9927014740000001,0.999961932,0.980019657471525,0.4684904026517921,0.9926438171361677,0.9999619290934539
1665,1665.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values,5.0,5.0,5.0,0.982877672,0.509319902,0.983649405,0.999972857,0.9818349886502575,0.569356436269387,0.9835202386409989,0.9999728549275934
1666,1666.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",5.0,4.0,4.5,0.982586741,0.38145306700000003,0.992509777,0.9999630420000001,0.9815263410810138,0.45713458392241396,0.9924506057690438,0.9999630391782041
1667,1667.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",5.0,5.0,5.0,0.9868842959999999,0.574317336,0.993982472,0.9999771009999999,0.9860856005083032,0.6264011925682359,0.9939349347585756,0.9999770992516287
1668,1668.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",5.0,5.0,5.0,0.9910321240000001,0.636916935,0.9951889709999999,0.999986837,0.9904860151421535,0.6813414978941457,0.9951509648541087,0.9999868359949863
1669,1669.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,5.0,5.0,5.0,0.9830368159999999,0.520282745,0.994177949,0.999954558,0.982003823902464,0.5789779346700399,0.9941319559869267,0.9999545545304384
1670,1670.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",1.0,4.0,2.5,0.985405564,0.566244185,0.992164678,0.999962657,0.9845168194661911,0.6193158216079175,0.9921027805574701,0.9999626541488086
1671,1671.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",5.0,5.0,5.0,0.98944962,0.573275089,0.989782561,0.9999067070000001,0.9888071427878209,0.6254864683636125,0.9897018453199928,0.9999066998769462
1672,1672.0,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",2.0,3.0,2.5,0.957481623,0.084531963,0.984635437,0.999927515,0.9548924187892187,0.19654288090741212,0.9845140600922879,0.9999275094656667
1673,1673.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",5.0,5.0,5.0,0.9713488220000001,0.449874371,0.988185238,0.999979961,0.9696040764110176,0.5171842869972992,0.9880919037947308,0.9999799594699937
1674,1674.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,2.0,3.0,2.5,0.962008297,0.151777431,0.988916151,0.9999476340000001,0.9596947496747494,0.2555606158884891,0.9888285908580572,0.9999476300017812
1675,1675.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.,2.0,4.0,3.0,0.964476705,0.246698663,0.985924762,0.999967956,0.9623134741458492,0.3388678822495966,0.9858135704962943,0.9999679535533949
1676,1676.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Its used to visit nodes of a binary search tree in a search key order.,3.0,4.0,3.5,0.9551966190000001,0.082755193,0.9866316509999999,0.999918883,0.95246826691021,0.19498350532269126,0.9865260437749304,0.9999188768066012
1677,1677.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",(Left side of tree) (Root) (Right side of tree),5.0,5.0,5.0,0.905272484,0.241505832,0.985311576,0.999743734,0.8995039457676014,0.3343104134286565,0.9851955404522084,0.9997437144337248
1678,1678.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,5.0,5.0,5.0,0.977112889,0.46836805299999995,0.984370512,0.999968235,0.9757191527298263,0.5334151982477097,0.9842470422389294,0.9999682325746969
1679,1679.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","The in order is to go from left,root,right",5.0,5.0,5.0,0.968787611,0.380412161,0.988375972,0.999894685,0.9668868975972438,0.45622103664145497,0.9882841445543513,0.9998946769590493
1680,1680.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it’s parent, and it’s right side sibling, then it goes up a level and repeats until it gets to the root.",4.0,5.0,4.5,0.977446079,0.36826714899999996,0.9891589190000001,0.999971625,0.9760726327082279,0.44556201201308887,0.9890732766756439,0.9999716228335284
1681,1681.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",traverse the left subtree. visit the root. traverse the right subtree.,5.0,5.0,5.0,0.979626775,0.7350804209999999,0.987559552,0.999944135,0.9783861246346957,0.767494316424112,0.9874612750031995,0.9999441307346276
1682,1682.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",postorder,0.0,3.0,1.5,0.53332305,0.088748075,0.958659519,0.9996219820000001,0.5049042342014926,0.200243135929305,0.9583329376486718,0.9996219531377857
1683,1683.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",in order starts with the root then does right child then left child recursively,0.0,3.0,1.5,0.959309876,0.464344472,0.9820393159999999,0.99996007,0.9568320053042769,0.5298839173421638,0.9818974302669456,0.9999600669512875
1684,1684.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Left Child -&gt; Parent -&gt; Right Child,5.0,5.0,5.0,0.8758689759999999,0.21617589899999998,0.988576276,0.99972938,0.8683098782002562,0.3120796919043088,0.988486030915016,0.9997293593377764
1685,1685.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",it goes from lowest to highest inside of the tree,1.0,3.0,2.0,0.951436818,0.055413343,0.9876567490000001,0.999968425,0.948479508615323,0.17098703232331586,0.9875592398396358,0.9999684225892037
1686,1686.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.",3.0,5.0,4.0,0.983807504,0.483276993,0.996403121,0.999980628,0.9828214438118077,0.546499974009383,0.9963747063909781,0.9999806265209202
1687,1687.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",It travels left to right,3.0,4.0,3.5,0.9429659840000001,0.204962239,0.985675324,0.999933693,0.9394928336870199,0.302238064896108,0.9855621619870708,0.9999336879373658
1688,1688.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },5.0,5.0,5.0,0.8674507140000001,0.17136308600000003,0.981886232,0.999895945,0.8593789767028018,0.27274989318254866,0.9817431369346309,0.9998959370552521
1689,1689.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.",5.0,5.0,5.0,0.9902384879999999,0.795258105,0.9881834690000001,0.9999754470000001,0.9896440497886356,0.8203090370546087,0.9880901208199924,0.9999754451253436
1690,1690.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",5.0,5.0,5.0,0.985881865,0.559803426,0.9932057959999999,0.99998117,0.9850221253492983,0.613663113417397,0.9931521231769013,0.9999811685623027
1691,1691.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",5.0,5.0,5.0,0.9786201720000001,0.2975173,0.989708672,0.9999807190000001,0.9773182234170761,0.383468670076154,0.9896273726119933,0.9999807175278682
1692,1692.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",left middle right,5.0,5.0,5.0,0.866878927,0.291264355,0.9653057709999999,0.999781997,0.858772370092729,0.3779807961444676,0.9650316936812064,0.9997819803551595
1693,1693.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",5.0,5.0,5.0,0.98550427,0.6404821279999999,0.9939288000000001,0.9999794890000001,0.9846215362786648,0.6844704762757131,0.9938808387607444,0.9999794874339561
1694,1694.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",5.0,5.0,5.0,0.9792364240000001,0.467173547,0.9867064520000001,0.999944627,0.9779720027731487,0.5323668444978138,0.9866014356875438,0.9999446227721923
1695,1695.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",4.0,4.0,4.0,0.9772634509999999,0.36146575200000003,0.98959242,0.999966778,0.9758788833715264,0.4395927912226694,0.9895102022449511,0.999966775463453
1696,1696.0,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",0.0,4.0,2.0,0.96750772,0.180069402,0.990321287,0.9999587320000001,0.965529066200635,0.28039095905109923,0.9902448271452958,0.9999587288491295
1697,1697.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,This is on the runtime order of log(n) where n is the number of nodes in the binary tree.,5.0,5.0,5.0,0.9845338459999999,0.624701321,0.9927824829999999,0.999951494,0.9835920172217898,0.6706205096829678,0.992725466090712,0.9999514902964978
1698,1698.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.,5.0,5.0,5.0,0.973156273,0.485417724,0.9899409640000001,0.999939508,0.9715215941649762,0.5483787786125984,0.9898614996713209,0.9999395033813495
1699,1699.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,n-1/2 is the algorithm to compare and find an element.,0.0,4.0,2.0,0.942276835,0.249893263,0.986502593,0.999938386,0.9387617181864487,0.34167161106252636,0.9863959662431054,0.9999383812956831
1700,1700.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,At most its equivalent to the height of the tree.,5.0,5.0,5.0,0.972940087,0.508151293,0.987225027,0.9999597570000001,0.9712922432762621,0.5683308109252596,0.9871241073240649,0.9999597539273896
1701,1701.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,Log(n),5.0,5.0,5.0,0.882902086,0.391663462,0.981725154,0.999812433,0.8757712773145582,0.4660956991333619,0.9815807864513497,0.9998124186789916
1702,1702.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n),5.0,5.0,5.0,0.846743763,0.101559386,0.983574952,0.999868965,0.8374110527187757,0.21148693539781577,0.9834451974775146,0.9998689549952906
1703,1703.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,Depends on what half of the tree and the levels you have.,3.0,4.0,3.5,0.976945043,0.44985315200000003,0.9851439479999999,0.999927958,0.975541085559579,0.5171656642208385,0.9850265882252657,0.9999279524994905
1704,1704.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n) in balanced trees,5.0,5.0,5.0,0.94920212,0.457603514,0.983860463,0.999919681,0.946108726176554,0.5239677406153906,0.9837329639560659,0.9999196748675296
1705,1705.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,n-1,2.0,3.0,2.5,0.341632783,-0.058362662999999995,0.95848009,0.9995353929999999,0.3015407735967093,0.07113194366048689,0.9581520911962409,0.9995353575265916
1706,1706.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log(n),5.0,5.0,5.0,0.8182926770000001,0.097049795,0.974396625,0.9998137990000001,0.8072274059563437,0.2075291096226862,0.9741943635699488,0.9998137847832878
1707,1707.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(nlog(n)),0.0,5.0,2.5,0.8857782479999999,0.29851484300000003,0.981970435,0.9998032309999999,0.8788225864223909,0.38434415998138044,0.9818280051211227,0.9998032159764056
1708,1708.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,nLog(n),0.0,4.0,2.0,0.868108749,0.271643668,0.981725154,0.9997677759999999,0.8600770834814786,0.3607607731458521,0.9815807864513497,0.9997677582693657
1709,1709.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,logn,5.0,5.0,5.0,0.655468345,0.17762593899999998,0.95848009,0.9995353929999999,0.6344877038087006,0.2782464628335985,0.9581520911962409,0.9995353575265916
1710,1710.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,"at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",4.0,5.0,4.5,0.9718015790000001,0.463482857,0.990596079,0.9999533140000001,0.9700844045558632,0.5291277241407764,0.9905217899459378,0.9999533104354573
1711,1711.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(n),2.0,4.0,3.0,0.880203903,0.271219492,0.981725154,0.999882754,0.8729087854373624,0.3603884966564784,0.9815807864513497,0.9998827450481005
1712,1712.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,It takes at most 3 comparisons to find and element in a binary search tree,0.0,3.0,1.5,0.958040655,0.18274965899999998,0.984531644,0.999927445,0.9554854936692743,0.2827432766423334,0.9844094471487996,0.9999274394603223
1713,1713.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log (n)   where n equals the number of nodes.,5.0,5.0,5.0,0.9677251579999999,0.494594663,0.984941327,0.999954845,0.965759745331292,0.5564328850073894,0.9848223665607746,0.9999548415523513
1714,1714.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,5.0,5.0,5.0,0.9761856790000001,0.3039051,0.9874070859999999,0.9999626,0.9747354792379044,0.3890748989972186,0.9873076045529582,0.9999625971444567
1715,1715.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.,5.0,5.0,5.0,0.976973832,0.494624734,0.990999588,0.9999524240000001,0.9755716276979931,0.5564592767087396,0.9909284865845744,0.9999524203675046
1716,1716.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n),5.0,5.0,5.0,0.846743763,0.101559386,0.983574952,0.999868965,0.8374110527187757,0.21148693539781577,0.9834451974775146,0.9998689549952906
1717,1717.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log n comparisons,5.0,5.0,5.0,0.866511762,0.194862247,0.970171875,0.999888214,0.8583828461686325,0.2933738444676473,0.9699362389083424,0.9998882054649794
1718,1718.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,(n^k)-1   where k is the height of the tree,0.0,3.0,1.5,0.967802465,0.543941796,0.988720429,0.999957115,0.9658417600276825,0.5997422128191902,0.9886313226942561,0.999957111725669
1719,1719.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,"it takes h comparisons, where h is the height of the tree",5.0,5.0,5.0,0.9679254290000001,0.358440638,0.988263875,0.999954298,0.9659722120582481,0.4369378111675146,0.98817116201096,0.9999542945105871
1720,1720.0,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,2 way key comparison,0.0,2.0,1.0,0.81172508,-0.067635864,0.976749382,0.99991783,0.8002598677778006,0.06299335327928443,0.9765657068694262,0.9999178237262032
1721,1721.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.",1.5,3.75,2.625,0.91769135,0.312934667,0.985514751,0.999857984,0.9126790725284561,0.39699966490411775,0.9854003204931864,0.9998579731568756
1722,1722.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"access specifiers and functions, oftentimes a constructor.",3.0,3.0,3.0,0.9327504040000001,0.380342931,0.993007802,0.999775657,0.9286551644959962,0.4561602771893423,0.9929525650647647,0.9997756398710915
1723,1723.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",5.0,5.0,5.0,0.933039367,0.43562278200000004,0.9878959620000001,0.9999135990000001,0.9289617242216746,0.5046764328968381,0.9878003425734488,0.9999135924031604
1724,1724.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",2.5,5.0,3.75,0.950646997,0.542394221,0.992172993,0.9998948590000001,0.9476415905805053,0.5983839893741048,0.9921111612442707,0.9998948509723345
1725,1725.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,Member functions and data members.,5.0,5.0,5.0,0.990693688,0.9472655059999999,1.0,0.999912934,0.9901269697027038,0.9537177674002775,0.9999999999999999,0.9999129273523866
1726,1726.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,the functions and variables used when the object is defined for the class.,5.0,3.0,4.0,0.926079691,0.369098574,0.993825148,0.999896468,0.921578230953088,0.4462917090732186,0.9937763679311272,0.999896460095184
1727,1727.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Data members, functions and function definitions, variables.",5.0,5.0,5.0,0.9609018559999999,0.744115174,0.991737104,0.99988224,0.9585209307102476,0.7754236338046304,0.9916718288102515,0.9998822310088559
1728,1728.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,return type and input parameters,1.5,2.5,2.0,0.907266259,0.186681971,0.9874754109999999,0.999922833,0.9016191339303228,0.28619445564935453,0.9873764693064948,0.9999228271081894
1729,1729.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,Constructor Data members Methods,5.0,4.0,4.5,0.893799424,0.544315875,0.9976073540000001,0.9998984040000001,0.8873322209229263,0.6000705218627674,0.9975884525855746,0.9998983962430004
1730,1730.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Function members and member attributes, or in other words, the class variables and functions.",5.0,5.0,5.0,0.957925916,0.731483102,0.9921927070000001,0.999923393,0.9553637675093001,0.7643371427780845,0.9921310309808421,0.9999233871509462
1731,1731.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",4.0,4.0,4.0,0.935171187,0.5170005560000001,0.988283659,0.999876627,0.9312233637893553,0.5760973336969036,0.9881911023005169,0.9998766175802952
1732,1732.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,The variables and function prototypes.,5.0,3.0,4.0,0.937252581,0.569228053,1.0,0.999846511,0.9334315066092619,0.6219346022645191,0.9999999999999999,0.9998464992808956
1733,1733.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,public and private variables and initiations of functions included in the class.,4.5,2.5,3.5,0.944793999,0.398980558,0.9942242570000001,0.999819613,0.9414321677088013,0.4725175212338356,0.9941786298106631,0.9998195992271949
1734,1734.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,The return value and the accepted value.,1.5,1.25,1.375,0.91093421,0.156080157,0.99897538,0.9999184729999999,0.9055104489165383,0.25933688736546345,0.998967285711397,0.999918466775297
1735,1735.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",5.0,2.5,3.75,0.9368274809999999,0.334066868,0.984925866,0.9999085809999999,0.932980519668422,0.41554626254523835,0.9848067834220342,0.9999085740200288
1736,1736.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Parameters and their type, Class name, and return type, and the code to be executed in the class.",2.0,3.75,2.875,0.92238611,0.257242441,0.9812102690000001,0.999936477,0.9176597251993031,0.34812158981102376,0.9810618339650745,0.9999364721499283
1737,1737.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"data members, class variables, and functions",5.0,5.0,5.0,0.95989424,0.6880886559999999,0.9925214509999999,0.999920556,0.9574519548048577,0.7262521685805867,0.9924623719912579,0.9999205499343371
1738,1738.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Constructor, functions, and variables native to the class.",5.0,3.0,4.0,0.931339026,0.454173476,0.987601024,0.999862345,0.9271578390511864,0.520957380517086,0.987503074623524,0.9998623344898442
1739,1739.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,functions and data members,5.0,5.0,5.0,0.954523563,0.827792823,0.997114233,0.99992056,0.9517542244109065,0.8488630113478365,0.9970914360304514,0.9999205539346425
1740,1740.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,data members and function definitions,5.0,5.0,5.0,0.9671106340000001,0.739955545,0.9996644240000001,0.999914768,0.965107799203716,0.7717729508776918,0.9996617730181802,0.9999147614924151
1741,1741.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,member functions and data members,5.0,5.0,5.0,0.96356231,0.8774701359999999,0.9996644240000001,0.9999076509999999,0.9613433960377118,0.8924621204090748,0.9996617730181802,0.9999076439490219
1742,1742.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"constructor, and function definitions.",3.5,2.5,3.0,0.922762513,0.5137832760000001,0.9909381420000001,0.999889907,0.9180590496817611,0.5732736998662948,0.9908665551737319,0.9998898985942423
1743,1743.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,class name data of class definition of functions and methods,5.0,3.75,4.375,0.929688513,0.302371115,0.985558693,0.999914235,0.9254068162125925,0.3877286027651075,0.9854446096260061,0.9999142284517197
1744,1744.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries",3.0,2.5,2.75,0.931545615,0.268547475,0.97993522,0.999891647,0.9273770085198318,0.358043410870609,0.9797767123385506,0.9998916387270937
1745,1745.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Class name, {}, semicoln at the end of the defination, private and bublic followed by "": """,2.5,2.5,2.5,0.908931017,0.116572425,0.978054869,0.9998462709999999,0.9033852692341539,0.22466307325981374,0.9778815069499296,0.9998462592625712
1746,1746.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"a constructor, private and public variables, and function prototypes",5.0,2.5,3.75,0.931890786,0.374849021,0.985363056,0.999858618,0.9277431990946533,0.45133856750342133,0.9852474271336876,0.9998586072052823
1747,1747.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Data variables and Functions, Data members",5.0,5.0,5.0,0.950257063,0.69291079,0.9980255309999999,0.999872552,0.9472279111126403,0.7304842965576758,0.9980099330984132,0.9998725422691632
1748,1748.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,class definitions include the name of the class and type of parameters,1.5,3.75,2.625,0.9157776240000001,0.16039782800000002,0.9879937540000001,0.9998582159999999,0.9106488080392875,0.2631262752661244,0.9878989071102636,0.999858205174589
1749,1749.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,"class variables, class function prototypes",5.0,3.75,4.375,0.906693935,0.315265864,0.98721899,0.999874649,0.9010119576190332,0.3990456312841076,0.9871180226329986,0.9998746394292721
1750,1750.0,11.1,What are the elements typically included in a class definition?,Function members and data members.,input  & return type elements,1.5,3.0,2.25,0.870978534,0.17369277800000002,0.9909375579999999,0.999860355,0.8631216272547506,0.27479453870488385,0.9908659665602512,0.9998603443379048
1751,1751.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public and private specifiers.,5.0,5.0,5.0,0.986044467,0.8406403659999999,0.991221798,0.999937016,0.9851946291802898,0.8601386096964417,0.9911524519981624,0.9999370111910816
1752,1752.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Public, Private, Restricted",4.5,4.75,4.625,0.9390546679999999,0.685988009,0.978815393,0.999900855,0.9353433337164299,0.7244085435509448,0.9786480389341047,0.9999008474301377
1753,1753.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,The access specifiers are public and private.,5.0,5.0,5.0,0.966428101,0.739093065,0.9896643390000001,0.999931276,0.9643837025918782,0.7710159985122702,0.9895826893903534,0.9999312707528244
1754,1754.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private protected,5.0,4.75,4.875,0.896733642,0.630900085,0.9857390909999999,0.9998106179999999,0.8904451214159328,0.6760608318614416,0.9856264327333389,0.9998106035404137
1755,1755.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public or Private.,5.0,5.0,5.0,0.976034939,0.9326405529999999,0.991371324,0.9999184409999999,0.9745755597566947,0.9408822317733307,0.9913031592230044,0.9999184347728538
1756,1756.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,5.0,5.0,5.0,0.896419227,0.226376325,0.9771871520000001,0.999631423,0.8901115597621945,0.3210320578594701,0.9770069351629611,0.9996313948586194
1757,1757.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public and Private,5.0,5.0,5.0,0.955198526,0.82237637,0.9919989770000001,0.999941209,0.9524702900391118,0.8441092815099914,0.9919357705534337,0.9999412045112234
1758,1758.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private and protected,5.0,4.75,4.875,0.946354806,0.686886728,0.990722551,0.999881921,0.9430880218000064,0.7251973009399847,0.9906492610488912,0.9998819119844997
1759,1759.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public Private,5.0,5.0,5.0,0.8800944690000001,0.7731271390000001,0.986667623,0.9998272090000001,0.8727926873313078,0.8008858770245049,0.986562299946379,0.9998271958071604
1760,1760.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Private, public, protected",5.0,4.75,4.875,0.940419197,0.74443692,0.989014246,0.99984799,0.9367909572388886,0.7757060129853244,0.98892746078851,0.9998479783938194
1761,1761.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,The access-specifiers that can be used in a C++ class definition is private and public.,5.0,5.0,5.0,0.923360825,0.53619206,0.984378614,0.9998992609999999,0.9186937965614311,0.5929406858312106,0.9842552082430738,0.9998992533084334
1762,1762.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private.,5.0,5.0,5.0,1.0,0.93765986,0.989996414,0.9999542240000001,1.0,0.9452874079008085,0.9899173877149887,0.9999542205049371
1763,1763.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"static, long, unsigned",0.0,1.25,0.625,0.878334284,0.065815829,0.9851114990000001,0.999727754,0.8709253138933823,0.1801167354862467,0.9849938828847973,0.999727733213629
1764,1764.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Private, Public, Protected, or Friend.",5.0,4.75,4.875,0.950142264,0.722705185,0.976095237,0.9999198090000001,0.9471061212988989,0.7566332365580862,0.9759063942576109,0.9999198028773028
1765,1765.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"A C++ class definition may include access-specifiers public, private, and static.",4.0,5.0,4.5,0.9357591270000001,0.5599274639999999,0.982902776,0.9998717559999999,0.9318471070544632,0.6137719749069412,0.9827677114244842,0.9998717462083874
1766,1766.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"local, global, local-variable, function specific",1.5,2.5,2.0,0.870485306,0.212761581,0.977419754,0.999877279,0.8625983635830109,0.3090831284055594,0.9772413746712253,0.9998772696300764
1767,1767.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public, private",5.0,5.0,5.0,0.948486209,0.763932347,0.984733355,0.9998035409999999,0.9453492189740049,0.7928161020106388,0.9846127516244769,0.9998035260000746
1768,1768.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Public, protected, and private.",5.0,4.75,4.875,0.9710806609999999,0.805903316,0.977568287,0.9998915559999999,0.9693195854464385,0.8296517669113723,0.9773910810515702,0.9998915477201457
1769,1769.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"private, public",5.0,5.0,5.0,0.948486209,0.763932407,0.992271207,0.999733306,0.9453492189740049,0.7928161546694157,0.9922101511147993,0.999733285637532
1770,1770.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,5.0,5.0,5.0,0.915446878,0.222416222,0.972147415,0.999827184,0.9102979208910047,0.317556488184622,0.97192738527061,0.9998271708052516
1771,1771.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public , private, protected",5.0,5.0,5.0,0.940419197,0.6698649529999999,0.981399872,0.999820003,0.9367909572388886,0.7102582033957826,0.9812529347900261,0.9998199892569719
1772,1772.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5.0,5.0,5.0,0.955198526,0.78288126,0.988644603,0.9999214959999999,0.9524702900391118,0.8094465450557149,0.9885548976843523,0.9999214900061074
1773,1773.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public, private, protected",5.0,4.75,4.875,0.940419197,0.6698649529999999,0.981399872,0.999820003,0.9367909572388886,0.7102582033957826,0.9812529347900261,0.9998199892569719
1774,1774.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",5.0,4.75,4.875,0.9375025029999999,0.42869553,0.974143192,0.999926284,0.9336966478894984,0.4985967559335796,0.9739389285010418,0.9999262783716781
1775,1775.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,data member or data functions are access specifiers,0.0,1.25,0.625,0.8201290370000001,0.02304237,0.9852568270000001,0.99989288,0.8091755931562509,0.14257676822055732,0.9851403589462973,0.999892871821235
1776,1776.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public or private,5.0,5.0,5.0,0.913397372,0.7310602070000001,0.986839832,0.9998936740000001,0.9081236079265897,0.7639659905535983,0.9867358693622854,0.9998936658818581
1777,1777.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5.0,5.0,5.0,0.955198526,0.78288126,0.988644603,0.9999214959999999,0.9524702900391118,0.8094465450557149,0.9885548976843523,0.9999214900061074
1778,1778.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5.0,5.0,5.0,0.955198526,0.78288126,0.988644603,0.9999214959999999,0.9524702900391118,0.8094465450557149,0.9885548976843523,0.9999214900061074
1779,1779.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited",5.0,4.75,4.875,0.9106437559999999,0.261085153,0.964556627,0.9998564,0.9052023073947442,0.351494131711165,0.9642766315967058,0.9998563890359349
1780,1780.0,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private protected,5.0,5.0,5.0,0.896733642,0.630900085,0.9857390909999999,0.9998106179999999,0.8904451214159328,0.6760608318614416,0.9856264327333389,0.9998106035404137
1781,1781.0,11.3,How are objects initialized when they are created?,By using constructors.,ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown,0.0,2.5,1.25,0.880932987,0.246250019,0.979861671,0.999914825,0.8736822678245072,0.33847413151099137,0.9797025823164814,0.9999148184967671
1782,1782.0,11.3,How are objects initialized when they are created?,By using constructors.,They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,3.0,3.75,3.375,0.902228653,0.248461083,0.989728673,0.9997671229999999,0.8962747572681345,0.3404146636101687,0.9896475316158058,0.9997671052195083
1783,1783.0,11.3,How are objects initialized when they are created?,By using constructors.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
1784,1784.0,11.3,How are objects initialized when they are created?,By using constructors.,Objects are initialized by a value given.  When an object is defined for a certain task.,2.0,2.5,2.25,0.923875868,0.338646799,0.992937095,0.999866087,0.9192402036820403,0.41956582195985376,0.9928812994939148,0.9998660767755512
1785,1785.0,11.3,How are objects initialized when they are created?,By using constructors.,"They are initialized with a "" . "" (dot) between the constructor and the object being created.",0.0,4.5,2.25,0.9166460040000001,0.387848139,0.987499782,0.999903987,0.9115700690124385,0.46274719508724227,0.9874010328324143,0.9999039796692704
1786,1786.0,11.3,How are objects initialized when they are created?,By using constructors.,objectname classname();  to call a function from the class:  objectname.funciton();,0.0,2.5,1.25,0.8835386040000001,0.16437749599999998,0.983458002,0.99995193,0.8764465567914096,0.26661901609048255,0.9833273235964151,0.999951926329787
1787,1787.0,11.3,How are objects initialized when they are created?,By using constructors.,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",5.0,5.0,5.0,0.9112460609999999,0.440699309,0.9724604579999999,0.999934202,0.9058412904326236,0.5091318279445799,0.9722429012463346,0.9999341969762289
1788,1788.0,11.3,How are objects initialized when they are created?,By using constructors.,classname objectname(input parameters);,3.0,2.5,2.75,0.852446795,0.17768845,0.9951806879999999,0.999932459,0.8434613772428675,0.27830132538034147,0.9951426164201013,0.9999324538431483
1789,1789.0,11.3,How are objects initialized when they are created?,By using constructors.,When the class is called by the Constructor,2.0,5.0,3.5,0.904744983,0.408785254,0.9846582229999999,0.999899558,0.8989443220031226,0.481122576225765,0.9845370260970312,0.9998995503311099
1790,1790.0,11.3,How are objects initialized when they are created?,By using constructors.,"Constructors; default when not provided by user, or programmer specified constructors.",5.0,5.0,5.0,0.931455672,0.6472611429999999,0.986046911,0.99991083,0.9272815883400625,0.6904200535870457,0.9859366844484312,0.9999108231917432
1791,1791.0,11.3,How are objects initialized when they are created?,By using constructors.,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,1.0,3.75,2.375,0.8973405959999999,0.22900962800000002,0.9895444659999999,0.99987644,0.8910890365598764,0.32334316644717265,0.9894618694181512,0.9998764305660175
1792,1792.0,11.3,How are objects initialized when they are created?,By using constructors.,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",1.0,3.75,2.375,0.8367756009999999,0.11310599,0.965631672,0.99977029,0.8268358683241026,0.221620769469778,0.9653601692325036,0.9997702724613133
1793,1793.0,11.3,How are objects initialized when they are created?,By using constructors.,"variables are set to a given value, or 0 if none is given.",1.0,1.25,1.125,0.9067600370000001,0.21275448800000002,0.987410531,0.99986712,0.9010820849743929,0.3090769032604802,0.9873110767677542,0.9998671098544222
1794,1794.0,11.3,How are objects initialized when they are created?,By using constructors.,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",5.0,5.0,5.0,0.9233322740000001,0.44308868100000004,0.9814232490000001,0.999941077,0.9186635069162937,0.5112288513970333,0.9812764964635488,0.999941072501145
1795,1795.0,11.3,How are objects initialized when they are created?,By using constructors.,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",2.0,3.0,2.5,0.8998206259999999,0.230752945,0.991834283,0.9999442759999999,0.8937200907656889,0.32487318213081695,0.9917697755044914,0.9999442717453929
1796,1796.0,11.3,How are objects initialized when they are created?,By using constructors.,"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.",5.0,5.0,5.0,0.9107580190000001,0.436686277,0.9717081940000001,0.999935661,0.9053235285681651,0.5056098053296644,0.9714846945144717,0.9999356560876255
1797,1797.0,11.3,How are objects initialized when they are created?,By using constructors.,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,3.0,3.75,3.375,0.9079258440000001,0.286148846,0.985263634,0.9999193559999999,0.9023188850979865,0.3734911886893553,0.9851472197202061,0.9999193498427154
1798,1798.0,11.3,How are objects initialized when they are created?,By using constructors.,They are initialized with a constructor.,5.0,5.0,5.0,0.935382187,0.569301844,0.993742735,0.9999277329999999,0.9314472128707884,0.6219993646613245,0.9936933038852694,0.9999277274823114
1799,1799.0,11.3,How are objects initialized when they are created?,By using constructors.,"The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.",1.0,3.75,2.375,0.893797815,0.22292763,0.990610167,0.999956517,0.8873305139410683,0.31800532351447947,0.9905359892382587,0.9999565136800109
1800,1800.0,11.3,How are objects initialized when they are created?,By using constructors.,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",4.0,5.0,4.5,0.92544359,0.555116773,0.9866014679999999,0.9999135090000001,0.9209033938699189,0.6095498898362589,0.9864956223353988,0.9999135023962887
1801,1801.0,11.3,How are objects initialized when they are created?,By using constructors.,initialized using the same name as the class,1.0,4.0,2.5,0.861937642,0.18546259399999998,0.99349813,0.999786472,0.853530180005767,0.28512427395877543,0.9934467665557584,0.9997864556968322
1802,1802.0,11.3,How are objects initialized when they are created?,By using constructors.,they are initialized to a value dependent on the compiler,1.0,1.25,1.125,0.8927764890000001,0.056680985,0.989472373,0.999875252,0.886246993149866,0.17209957361170253,0.9893892068981847,0.9998752424753121
1803,1803.0,11.3,How are objects initialized when they are created?,By using constructors.,memory is allocated in accordance with their type and initialization input.,1.0,2.5,1.75,0.9092624779999999,0.24797536399999998,0.990743217,0.999940941,0.9037369149231627,0.33998837413565314,0.9906700903060679,0.9999409364907611
1804,1804.0,11.3,How are objects initialized when they are created?,By using constructors.,Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,1.0,1.25,1.125,0.8903939129999999,0.22334104800000001,0.988046875,0.999875483,0.8837193275145839,0.31836815828514997,0.9879524477553073,0.9998754734929491
1805,1805.0,11.3,How are objects initialized when they are created?,By using constructors.,using constructor,5.0,5.0,5.0,0.861801803,0.691962779,0.996899284,0.99987571,0.8533860689376495,0.7296522782280963,0.9968747889772797,0.999875700510281
1806,1806.0,11.3,How are objects initialized when they are created?,By using constructors.,by giving them a value,2.0,1.25,1.625,0.88768816,0.13072899,0.990264083,0.9998142,0.8808488046537557,0.2370875298999607,0.9901871712453864,0.9998141858139046
1807,1807.0,11.3,How are objects initialized when they are created?,By using constructors.,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",5.0,5.0,5.0,0.914966106,0.45922064799999995,0.9805438040000001,0.9999188790000001,0.9097878717413423,0.5253870122582155,0.980390104027777,0.9999188728062959
1808,1808.0,11.3,How are objects initialized when they are created?,By using constructors.,"objects are initialized by giving the object a type, name, and initial value",1.0,3.75,2.375,0.903911293,0.08396694800000001,0.9899432429999999,0.99980266,0.898059863516393,0.19604699759330785,0.9898637966749549,0.999802644932809
1809,1809.0,11.3,How are objects initialized when they are created?,By using constructors.,they are initialized to 0,1.0,1.25,1.125,0.862380803,-0.022495422999999997,0.987775397,0.99982221,0.8540003277914398,0.10261069349717009,0.9876788251345882,0.9998221964254795
1810,1810.0,11.3,How are objects initialized when they are created?,By using constructors.,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",1.0,3.75,2.375,0.931410015,0.45047962700000005,0.984749488,0.9999290540000001,0.9272331510058871,0.5177154876754433,0.9846290120718798,0.9999290485831717
1811,1811.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Name of the function, parameters it must receive in order to perform and a return type.",5.0,5.0,5.0,0.980182111,0.56069088,0.994979125,0.999974838,0.9789752784426897,0.6144419841210688,0.9949394611135939,0.9999748360788455
1812,1812.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,3.5,4.0,3.75,0.974594891,0.37294814,0.990101275,0.9999604329999999,0.9730478184201092,0.44967026636097757,0.9900230770954587,0.9999604299790031
1813,1813.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","A function signature is the return type of a function, its name, and the number and type of its parameters.",5.0,5.0,5.0,0.986424744,0.720500052,0.99031149,0.999952649,0.9855980635743189,0.7546979097790083,0.9902349527509979,0.9999526453846835
1814,1814.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",function prototype that contains functions and data members.,1.0,5.0,3.0,0.93425405,0.452427805,0.98945082,0.9999710999999999,0.9302503767040553,0.5194252988540934,0.9893674836338893,0.9999710977934436
1815,1815.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is a declaration of the function that includes the parameter types and the number of parameters.,5.0,5.0,5.0,0.988497317,0.70800513,0.990338453,0.999975665,0.9877968482295463,0.7437317879400581,0.9902621287531876,0.9999756631419882
1816,1816.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the declaration of the function.,2.0,3.0,2.5,0.9808623790000001,0.513827622,0.994423339,0.99997441,0.9796969721248145,0.5733126199683226,0.9943792845177776,0.9999744080461671
1817,1817.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Includes the name, accepted parameters, and return type.",5.0,5.0,5.0,0.9834341409999999,0.618044019,0.995539932,0.999973494,0.9824253444535558,0.6647777533335735,0.9955046983742842,0.9999734919762292
1818,1818.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",its return type and its input parameters,5.0,5.0,5.0,0.936868846,0.385563463,0.987604617,0.999939923,0.933024403636448,0.4607420576899439,0.9875066960074897,0.9999399184130354
1819,1819.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",Contains the function name and its paramaters.  The return type is not included,5.0,5.0,5.0,0.9757214190000001,0.63503176,0.995106314,0.999970943,0.9742429476049845,0.6796869810642092,0.995067654880701,0.9999709407814567
1820,1820.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Return type, function name, and the parameter types",5.0,5.0,5.0,0.97527194,0.623106003,0.987556709,0.999931172,0.9737660970776221,0.6692203847714341,0.9874584095440805,0.9999311667448839
1821,1821.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",The function signature tells what the function parameters and includes all the function calls,2.5,5.0,3.75,0.9708092209999999,0.501946628,0.990468955,0.999964547,0.9690316158034802,0.5628853097560751,0.9903936616923176,0.999964544293113
1822,1822.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The function's name, as well as what it returns and what it accepts.",5.0,5.0,5.0,0.965910852,0.36992719799999996,0.99259829,0.99997332,0.9638349551344272,0.4470189478461119,0.9925398180036548,0.9999733179629441
1823,1823.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the body of the function that holds all the actual code,1.0,2.5,1.75,0.9727574590000001,0.320233852,0.9913226509999999,0.999965045,0.971098493939561,0.403405767482032,0.9912541017162514,0.999965042331136
1824,1824.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is the return type and accepted pass value type it takes,3.0,4.0,3.5,0.9638010859999999,0.308528513,0.9885298020000001,0.999971397,0.9615967125697886,0.3931326202274741,0.9884391897799137,0.9999713948161203
1825,1825.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature specifies the name and input variables of a function.,5.0,5.0,5.0,0.977020025,0.5287001729999999,0.992223805,0.999967495,0.9756206336724889,0.586365459059435,0.9921623746486866,0.999967492518197
1826,1826.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.,5.0,5.0,5.0,0.987071157,0.674182355,0.991919654,0.9999734779999999,0.9862838406182828,0.7140473552095937,0.9918558209179447,0.9999734759750075
1827,1827.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the name of the function and what it accepts/ returns,5.0,5.0,5.0,0.9686936740000001,0.417319059,0.99363758,0.999948697,0.966787240198369,0.488612238456537,0.9935873181822595,0.9999486930829428
1828,1828.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",5.0,4.0,4.5,0.983075142,0.621712983,0.993021143,0.9999717159999999,0.9820444838071798,0.6679978059474851,0.9929660114559381,0.9999717138404761
1829,1829.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The order, number, and type of data items included inside the function parameters.",4.5,5.0,4.75,0.9869259,0.700816929,0.9791604740000001,0.999974756,0.9861297380305021,0.737423090057121,0.978995846003482,0.9999747540725846
1830,1830.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",5.0,5.0,5.0,0.9766354559999999,0.571427703,0.989596888,0.999974957,0.9752126459123105,0.623865116909032,0.989514705541238,0.9999749550879312
1831,1831.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","is the name of the fuction, return type, and parameters that are being used",5.0,5.0,5.0,0.980837524,0.53291738,0.996594415,0.9999773940000001,0.9796706035517384,0.590066675104007,0.9965675115744842,0.9999773922739997
1832,1832.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","a function signature should include the name of the function, parameters, and a body.",2.5,5.0,3.75,0.987667978,0.667473793,0.993345136,0.99996658,0.986917005701837,0.7081596107117768,0.9932925639344251,0.9999665774483354
1833,1833.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the name of the function and the arguments passed to that function,5.0,5.0,5.0,0.9813327190000001,0.466897368,0.994373286,0.9999793090000001,0.9801959540061473,0.5321244570252581,0.9943288361093067,0.9999793074202127
1834,1834.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",5.0,5.0,5.0,0.982620597,0.538539648,0.9768296329999999,0.999955444,0.9815622587800708,0.5950010377114111,0.9766465918359256,0.9999554405980858
1835,1835.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",function name and parameter are called function signature.,5.0,5.0,5.0,0.9518839720000001,0.553403556,0.995467758,0.999972619,0.9489538925592054,0.608046291305707,0.9954319542144342,0.9999726169094217
1836,1836.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",fuction name and parameters,5.0,5.0,5.0,0.926000893,0.468740761,0.989846193,0.999907577,0.921494634460582,0.5337423040382342,0.9897659799997887,0.9999075699433719
1837,1837.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The parameters needed, the return type, and name of the function.",5.0,5.0,5.0,0.991083264,0.7684904340000001,0.986352262,0.999935882,0.9905402693697576,0.7968164901198672,0.9862444476589279,0.9999358771044992
1838,1838.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","the signature of a function includes the name of the function, the number and types of parameters, and the return type",5.0,5.0,5.0,0.9941086170000001,0.753276885,0.9976477490000001,0.999973618,0.9937498546307091,0.7834643754018369,0.9976291666978191,0.9999736159856966
1839,1839.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",4.5,5.0,4.75,0.984018266,0.6782287359999999,0.989805357,0.9999724170000001,0.983045040399964,0.7175986464503723,0.9897248214037342,0.9999724148939987
1840,1840.0,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","function sig is, is what is the class recognizes as the main function, or rather its specification ",0.0,3.75,1.875,0.972185135,0.358551323,0.9865799340000001,0.999967284,0.9704913176282715,0.4370349534462535,0.9864739182211998,0.9999672815020867
1841,1841.0,11.5,What is a recursive function?,A function that calls itself.,A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.,5.0,5.0,5.0,0.9572870729999999,0.48497360899999997,0.99116681,0.999913658,0.9546860214489685,0.5479890027340051,0.9910970296042,0.999913651407665
1842,1842.0,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself to perform an opperation such as a factorial recursive function.,5.0,5.0,5.0,0.9722071290000001,0.739690065,0.997542101,0.99997055,0.9705146509775464,0.7715399533427088,0.9975226841002099,0.9999705477514506
1843,1843.0,11.5,What is a recursive function?,A function that calls itself.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
1844,1844.0,11.5,What is a recursive function?,A function that calls itself.,A base case that calls upon itself until the problem becomes smaller and terminates.,2.5,5.0,3.75,0.96292007,0.555515051,0.995625282,0.99996843,0.9606620461132587,0.6098994370422177,0.9955907226218418,0.9999684275895856
1845,1845.0,11.5,What is a recursive function?,A function that calls itself.,It's a function that calls itself. It runs multiple times until the base case is reached.,5.0,5.0,5.0,0.9736824040000001,0.6800600290000001,0.99662577,0.999900415,0.97207976450177,0.7192058739433346,0.9965991142725764,0.9999004073965431
1846,1846.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself untill it reaches a base case.,5.0,5.0,5.0,0.9798844459999999,0.718302012,0.997405586,0.999975342,0.9786594867989704,0.7527688081450097,0.9973850906596088,0.9999753401173267
1847,1847.0,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",5.0,5.0,5.0,0.965007961,0.48628562700000005,0.987602247,0.999932928,0.9628770815752605,0.5491404904538081,0.9875043072849741,0.999932922878957
1848,1848.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself until a base case is met,5.0,5.0,5.0,0.967243493,0.608454764,0.997121987,0.999912052,0.9652487488013943,0.656361779334315,0.9970992512854667,0.9999120452850446
1849,1849.0,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself. With each function call the problem is diminished.,5.0,5.0,5.0,0.983054102,0.856289625,0.998326939,0.9999566120000001,0.9820221625528036,0.8738731236760641,0.9983137221600161,0.9999566086872643
1850,1850.0,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself to perform a certain task,5.0,5.0,5.0,0.966407597,0.6662818189999999,0.99795552,0.9999564670000001,0.9643619499778229,0.7071134791622672,0.9979393690258213,0.9999564636761934
1851,1851.0,11.5,What is a recursive function?,A function that calls itself.,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,5.0,5.0,5.0,0.9716734890000001,0.664590597,0.994837587,0.999955904,0.9699485143717836,0.705629184461691,0.9947968049923196,0.9999559006332076
1852,1852.0,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself, in order to solve a problem.",5.0,5.0,5.0,0.974450409,0.7707303759999999,0.9948344459999999,0.9999454170000001,0.9728945380268221,0.7987823668883801,0.9947936391790614,0.9999454128325101
1853,1853.0,11.5,What is a recursive function?,A function that calls itself.,"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",5.0,5.0,5.0,0.964127362,0.571355999,0.9928926309999999,0.999927177,0.9619428575124127,0.6238021861600174,0.9928364842374015,0.99992717143986
1854,1854.0,11.5,What is a recursive function?,A function that calls itself.,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",5.0,5.0,5.0,0.962714374,0.582355201,0.994103073,0.999968553,0.960443824024849,0.6334555949018427,0.9940564884818289,0.9999685505989767
1855,1855.0,11.5,What is a recursive function?,A function that calls itself.,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",5.0,5.0,5.0,0.953222573,0.5403615829999999,0.991336612,0.999956088,0.9503740091670507,0.5966000521904649,0.9912681730052983,0.9999560846472563
1856,1856.0,11.5,What is a recursive function?,A function that calls itself.,"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",5.0,4.0,4.5,0.9613680840000001,0.549375236,0.987867432,0.999949263,0.9590155501867328,0.60451085123443,0.9877715871922794,0.9999492591261577
1857,1857.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself into a loop with a base case for a loop exit.,2.5,5.0,3.75,0.961186945,0.476220816,0.996049657,0.9999153159999999,0.9588233805243551,0.5403071464991994,0.996018450097614,0.9999153095342557
1858,1858.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself until the base cases are met.,5.0,5.0,5.0,0.9772407409999999,0.714205325,0.997426659,0.999924527,0.975854790420629,0.7491733660303616,0.9974063301320023,0.9999245212375286
1859,1859.0,11.5,What is a recursive function?,A function that calls itself.,A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.,5.0,5.0,5.0,0.955010235,0.527030766,0.993153983,0.9999760129999999,0.9522705328476799,0.5849003102125038,0.9930999008647902,0.9999760111685584
1860,1860.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls on itself and uses a base case to stop the recursion,5.0,5.0,5.0,0.9626706840000001,0.524891675,0.99547067,0.999923674,0.9603974734733429,0.5830229449491912,0.9954348892186392,0.999923668172401
1861,1861.0,11.5,What is a recursive function?,A function that calls itself.,"a function that calls itself, and which eaach calls get closer and close to the base case.",5.0,5.0,5.0,0.9642266629999999,0.583500326,0.992653825,0.9999569359999999,0.9620482055580779,0.6344606096006801,0.9925957917188052,0.999956932712002
1862,1862.0,11.5,What is a recursive function?,A function that calls itself.,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,5.0,5.0,5.0,0.972568691,0.632832706,0.9945147459999999,0.999928554,0.9708982307006795,0.6777569894968805,0.994471413614397,0.9999285485449959
1863,1863.0,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself in the definition code,5.0,5.0,5.0,0.965518236,0.614169836,0.997244942,0.999950633,0.963418430343167,0.661377591027287,0.9972231776048389,0.9999506292307591
1864,1864.0,11.5,What is a recursive function?,A function that calls itself.,A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,5.0,5.0,5.0,0.95376122,0.46813052899999996,0.993163255,0.999938619,0.9509454576796887,0.5332067361921903,0.9931092461116954,0.9999386143134731
1865,1865.0,11.5,What is a recursive function?,A function that calls itself.,"It invoke by itself again ana again, unless it reach bas case",4.0,5.0,4.5,0.9326604009999999,0.329373598,0.992379931,0.999832334,0.9285596806624594,0.4114272315786513,0.9923197340121798,0.9998323211984614
1866,1866.0,11.5,What is a recursive function?,A function that calls itself.,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",5.0,5.0,5.0,0.9569790359999999,0.41992878899999997,0.989166463,0.999928545,0.954359226190687,0.4909026582884306,0.989080880271702,0.9999285395443086
1867,1867.0,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",5.0,5.0,5.0,0.96481353,0.617760658,0.9917849009999999,0.999924962,0.9626708104816486,0.6645290626054196,0.9917200033967835,0.9999249562707416
1868,1868.0,11.5,What is a recursive function?,A function that calls itself.,"a recursive function is a function that during execution, calls itself over and over until a base case is reached",5.0,5.0,5.0,0.960233033,0.56058532,0.992491827,0.999950702,0.9578113789842224,0.614349339779526,0.9924325139677123,0.9999506982360274
1869,1869.0,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,5.0,5.0,5.0,0.9656210540000001,0.637978733,0.997201453,0.999952478,0.9635275095604883,0.6822733809612311,0.9971793450506267,0.9999524743716274
1870,1870.0,11.5,What is a recursive function?,A function that calls itself.,function that calls it self till the base case is met,5.0,5.0,5.0,0.956023037,0.474147141,0.99544168,0.9998940190000001,0.9533450105603509,0.5384871933450792,0.9954056702035637,0.9998940109081994
1871,1871.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration, performers  a series of checks and loops.",5.0,5.0,5.0,0.926366329,0.463516384,0.987406398,0.99993735,0.9218823240952861,0.5291571489876776,0.9873069111178988,0.9999373452165831
1872,1872.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,The alternative method is to use loops in the program instead of a function which calls itself.,5.0,2.5,3.75,0.908072889,0.29269194600000004,0.992256028,0.999919824,0.9024748845680307,0.3792337160780366,0.9921948522038014,0.999919817878448
1873,1873.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,5.0,5.0,5.0,0.908964992,0.36526987,0.992748335,0.999946821,0.9034213131798491,0.4429314612421976,0.9926910483284906,0.9999468169397076
1874,1874.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration, this would be more efficient and has repetition structure.",5.0,5.0,5.0,0.935077965,0.370986342,0.9865039259999999,0.9999179990000001,0.9311244649312066,0.44794850163996464,0.986397309773533,0.9999179927391066
1875,1875.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,One can use iteration or by using a simple while/for loop.,5.0,5.0,5.0,0.915698826,0.472859442,0.9936085490000001,0.9998857320000001,0.9105652115467815,0.5373570491052118,0.9935580578432927,0.9998857232754751
1876,1876.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5.0,5.0,5.0,0.875285447,0.599102855,0.9806875159999999,0.9997649040000001,0.8676908145479361,0.6481541111695378,0.980534951323207,0.9997648860500846
1877,1877.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",5.0,5.0,5.0,0.934436858,0.31058183300000003,0.988770657,0.999916838,0.9304443170020583,0.39493470889152127,0.9886819474851912,0.9999168316504625
1878,1878.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,you can also solve the problem iteratively,5.0,5.0,5.0,0.850156784,-0.025902404,0.990641788,0.9998987709999999,0.8410319134569831,0.09962056928919276,0.9905678600376965,0.9998987632710212
1879,1879.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iterative,5.0,5.0,5.0,0.65664357,0.18598026,0.9806875159999999,0.9997649040000001,0.6357344954519574,0.2855786015990666,0.980534951323207,0.9997648860500846
1880,1880.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Using iteration loops.,5.0,5.0,5.0,0.941339791,0.7094363570000001,0.998968485,0.999979022,0.9377676118420772,0.744987898995509,0.9989603362423062,0.9999790203982998
1881,1881.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,5.0,5.0,5.0,0.9092633720000001,0.422308058,0.9923856329999999,0.999945458,0.9037378633642946,0.49299081488049556,0.9923254810568144,0.9999454538356404
1882,1882.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",5.0,5.0,5.0,0.905659735,0.188651994,0.989770195,0.9999043409999999,0.899914778851175,0.2879234390110381,0.98968938163112,0.9999043336962987
1883,1883.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5.0,5.0,5.0,0.875285447,0.599102855,0.9806875159999999,0.9997649040000001,0.8676908145479361,0.6481541111695378,0.980534951323207,0.9997648860500846
1884,1884.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Any recursive function can be solved using an iterative method.,5.0,5.0,5.0,0.8751953840000001,0.280875742,0.995719518,0.999926943,0.8675952670606324,0.3688632685684089,0.9956857030669831,0.9999269374219938
1885,1885.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",5.0,3.0,4.0,0.9207821490000001,0.32468459,0.989241046,0.9999149620000001,0.9159580891969124,0.4073119411405187,0.9891560524621599,0.9999149555072273
1886,1886.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ",5.0,5.0,5.0,0.916544914,0.30620881899999997,0.9872057009999999,0.9998972359999999,0.9114628230236135,0.3910967494126677,0.9871046286526143,0.9998972281538218
1887,1887.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteratively,5.0,5.0,5.0,0.508486867,0.054302577000000005,0.9806875159999999,0.9997649040000001,0.47855562400787377,0.1700121726730865,0.980534951323207,0.9997648860500846
1888,1888.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,using an Iterative calls,5.0,5.0,5.0,0.84380275,0.15275462,0.994188478,0.999967704,0.8342909434366302,0.2564182421812889,0.994142568163875,0.9999677015341543
1889,1889.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Iteration.,5.0,5.0,5.0,0.9651250240000001,0.735193312,0.9930104670000001,0.999967044,0.9630012732578188,0.7675933947905493,0.9929552511177201,0.9999670414837624
1890,1890.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration is the alternative way to solve a problem,5.0,5.0,5.0,0.905412972,0.24978433600000002,0.991892274,0.9999100740000001,0.8996529889417832,0.34157601168595153,0.9918282246215402,0.9999100671340216
1891,1891.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,using an iterative solution instead,5.0,5.0,5.0,0.816342592,0.242988557,0.9955803440000001,0.9999163790000001,0.8051585683451284,0.33561172151234503,0.9955454296208256,0.9999163726154173
1892,1892.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Using an iterative solution.  For, while, or do while loop.",5.0,5.0,5.0,0.9339243770000001,0.543336332,0.992356754,0.999867279,0.9299006278973101,0.5992108295906196,0.9922963739186165,0.9998672688665622
1893,1893.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,the alternative way to solve a problem that could be solved using recursion is iteration.,5.0,5.0,5.0,0.9128589029999999,0.340862095,0.992087365,0.999931715,0.9075523482534609,0.42151006825809706,0.9920248568005703,0.9999317097863428
1894,1894.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ",5.0,5.0,5.0,0.9141560790000001,0.23443444100000002,0.9878783170000001,0.999916996,0.9089285172395132,0.32810423340793643,0.9877825581815549,0.9999169896625261
1895,1895.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,by iteration,5.0,5.0,5.0,0.883098185,0.586472809,0.9872516309999999,0.999957998,0.8759793179828992,0.6370693982543594,0.9871509214902278,0.9999579947930873
1896,1896.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"itteration, like a for loop, a while loop, or a do while loop",5.0,5.0,5.0,0.904628158,0.14176552,0.97898303,0.999797885,0.8988203828138409,0.24677369942220578,0.9788170002321454,0.999797869568231
1897,1897.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Iteration by using loops,5.0,5.0,5.0,0.873676419,0.38268768799999997,0.9938732220000001,0.99996198,0.8659838029849025,0.4582181444529179,0.9938248217059026,0.9999619770971188
1898,1898.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iterative functions,5.0,5.0,5.0,0.6492736339999999,0.134499371,0.997979979,0.999781355,0.6279157589409597,0.24039659076686834,0.9979640212469226,0.9997813383061419
1899,1899.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5.0,5.0,5.0,0.875285447,0.599102855,0.9806875159999999,0.9997649040000001,0.8676908145479361,0.6481541111695378,0.980534951323207,0.9997648860500846
1900,1900.0,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"the alt, way is to use a functions parameter in a call ""to"" function. ",2.5,2.5,2.5,0.918687105,0.192335993,0.9847320559999999,0.999850311,0.9137354651449602,0.2911566870368018,0.9846114423626422,0.999850299571031
1901,1901.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.,5.0,4.5,4.75,0.9825171229999999,0.570653141,0.9959953309999999,0.999980595,0.9814524836148943,0.6231853254494437,0.9959636949333163,0.9999805935184006
1902,1902.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,2.0,3.75,2.875,0.978763878,0.533765078,0.9956435779999999,0.999948095,0.9774706805549738,0.5908106541020859,0.9956091631565026,0.9999480910369792
1903,1903.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,5.0,5.0,5.0,0.986760318,0.71363169,0.996784215,0.999965917,0.9859540727290714,0.7486699174053052,0.9967588109556956,0.9999659143977143
1904,1904.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Static can be initialized and non-static cannot in C++.,1.0,4.0,2.5,0.945591152,0.31862631399999997,0.9919724609999999,0.999950555,0.9422778642339746,0.40199491773293056,0.9919090450824526,0.9999505512248036
1905,1905.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array declared static remains the same throughout the execution of the program.,0.5,4.0,2.25,0.9684426190000001,0.41578278,0.9968235120000001,0.999960593,0.966520896922828,0.48726392890385467,0.9967984183939648,0.9999605899912193
1906,1906.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,3.5,5.0,4.25,0.9783896209999999,0.6718770270000001,0.9963381290000001,0.99996042,0.9770736327555902,0.7120240926612766,0.9963092009674605,0.9999604169780104
1907,1907.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",3.5,3.75,3.625,0.979713202,0.533278406,0.9918671090000001,0.999964812,0.9784778147037054,0.5903835282306634,0.991802860823183,0.9999648093133461
1908,1908.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,a static array has a predetermined size and that size cannot be altered,2.0,3.75,2.875,0.971346974,0.310952097,0.996119291,0.999955205,0.9696021158749868,0.39525966971453214,0.9960886341919833,0.9999552015798377
1909,1909.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Arrays declared static can not be changed.  One not declared static can be altered.,0.5,3.75,2.125,0.9681943059999999,0.500835836,0.995757804,0.9999154690000001,0.9662574626244491,0.5619104272870424,0.9957242915185588,0.9999154625459376
1910,1910.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.",5.0,4.0,4.5,0.981262744,0.500262141,0.991786383,0.9999870809999999,0.9801217178001127,0.5614069260032091,0.9917214971042806,0.9999870800136158
1911,1911.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array that is declared static causes anything that is not initialized to be set to 0.,1.0,3.75,2.375,0.9667525290000001,0.487474859,0.99697411,0.999977764,0.9647278869984717,0.550184215497212,0.9969502060873877,0.9999777623022498
1912,1912.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array will have a null character at the end of the array.,2.5,2.5,2.5,0.972015917,0.374196529,0.996954153,0.9999157540000001,0.9703117949085465,0.4507659103254941,0.9969300914311662,0.9999157475676977
1913,1913.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static arrays cannot be changed while normal arrays can be changed,0.5,3.75,2.125,0.963167131,0.404577732,0.995363157,0.999894805,0.9609241521696945,0.4774298601854357,0.9953265268879111,0.9998947969682116
1914,1914.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,3.0,3.0,3.0,0.980740011,0.45475578299999997,0.994712356,0.9999696579999999,0.9795671523883367,0.521468440090701,0.9946705846930123,0.999969655683345
1915,1915.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"A static array has class scope, allowing it to remain where other arrays might be recycled.",5.0,3.25,4.125,0.977493644,0.478408039,0.9928609509999999,0.9999713709999999,0.976123094232201,0.5422267546333641,0.9928045539718758,0.9999713688141348
1916,1916.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.,5.0,4.5,4.75,0.9774442320000001,0.5677782889999999,0.993138593,0.999966611,0.9760706732330933,0.6206622222799362,0.9930843892869353,0.9999666084507023
1917,1917.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",2.0,3.75,2.875,0.98029542,0.611032307,0.994136556,0.9999737559999999,0.9790954875212114,0.6586239503653253,0.9940902359906861,0.9999737539962331
1918,1918.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",5.0,5.0,5.0,0.979686976,0.618184567,0.992529445,0.99997597,0.9784499916420482,0.6649011047632359,0.9924704291422243,0.9999759681652752
1919,1919.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,5.0,3.75,4.375,0.976377845,0.591628969,0.9957716040000001,0.999966777,0.9749393474018033,0.641594682908487,0.9957382005357386,0.9999667744633766
1920,1920.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",5.0,4.0,4.5,0.98081398,0.5558198089999999,0.992846511,0.999943822,0.9796456258134765,0.6101669067678707,0.9927899998988269,0.9999438177107295
1921,1921.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,0.5,4.0,2.25,0.980597258,0.648723662,0.994441305,0.999960692,0.9794157062844417,0.6917036279499573,0.994397392445506,0.9999606889987781
1922,1922.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,0.5,3.75,2.125,0.983359814,0.549164593,0.993825803,0.999973845,0.982346491227605,0.6043259811886208,0.9937770281054933,0.9999738430030284
1923,1923.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,the data of a static array cannot be changed,0.5,3.75,2.125,0.9728674890000001,0.270232439,0.993352111,0.999901699,0.9712152243397036,0.35952221326075157,0.9932995940354997,0.9999016914945783
1924,1924.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).",5.0,2.5,3.75,0.983436883,0.576100349,0.994147648,0.9999833570000001,0.9824282534307185,0.6279660472986961,0.9941014156152194,0.9999833557292833
1925,1925.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,4.0,4.5,4.25,0.9702027440000001,0.46834540399999997,0.994177463,0.999925902,0.9683882067069862,0.5333953204370654,0.994131466147626,0.9999258963425118
1926,1926.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static arrays can be called from anywhere,3.0,1.25,2.125,0.9654206040000001,0.426156938,0.99370843,0.999938453,0.9633148529331268,0.496368770102905,0.9936587278827803,0.9999384483007986
1927,1927.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,0.5,3.75,2.125,0.97962755,0.529058933,0.997012527,0.999912885,0.9783869468291893,0.5866803234396162,0.9969889265738366,0.9999128783486453
1928,1928.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",3.0,3.75,3.375,0.9711837170000001,0.43743088799999996,0.991151337,0.999949781,0.9694289171570365,0.5062633104054561,0.9910814343706622,0.9999497771657077
1929,1929.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",5.0,3.75,4.375,0.978431225,0.525187314,0.9857621129999999,0.999990962,0.9771177702777891,0.5832824114183972,0.9856496366024341,0.9999909613099359
1930,1930.0,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static has a predetermined size that cannot be passed while vis versa.,2.0,3.75,2.875,0.970452726,0.355402082,0.995463972,0.9999604529999999,0.96865341164099,0.4342710337910354,0.995428138305808,0.99996044998053
1931,1931.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,the type char[] has a  null ('\n' ) element at the very end.,5.0,5.0,5.0,0.980523646,0.646970093,0.992644777,0.999968495,0.979337611599217,0.6901646146366285,0.9925866722414544,0.9999684925945483
1932,1932.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,0.0,3.75,1.875,0.973100603,0.242328391,0.986384458,0.9999733740000001,0.9714625340779461,0.33503232927684873,0.9862768980007481,0.999973371967067
1933,1933.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,5.0,5.0,5.0,0.981436372,0.598984003,0.9870691290000001,0.999977259,0.9803059190717291,0.6480498011536127,0.9869669777617252,0.9999772572636924
1934,1934.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,String of characters are followed by a null statement.  type string is for example   string s;,5.0,5.0,5.0,0.961641669,0.44305706,0.990057222,0.9999583409999999,0.9593057954518696,0.5112010993439458,0.9899786760857616,0.9999583378192759
1935,1935.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,String contains a word where as char can contain phrases or a string of characters.,0.0,3.75,1.875,0.975691438,0.29754084399999997,0.989871589,0.9999738420000001,0.9742111408783947,0.38348933338022073,0.9897915766229987,0.9999738400027994
1936,1936.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,0.0,4.0,2.0,0.981659114,0.513960898,0.9877699879999999,0.99997625,0.9805422251954097,0.5734295891542214,0.9876733734045935,0.9999762481866538
1937,1937.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",5.0,2.5,3.75,0.980724156,0.48688119700000004,0.988952356,0.999979855,0.9795503318803456,0.5496631902500632,0.9888650818701582,0.9999798534619005
1938,1938.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,an array of characters stores a null character at the end,5.0,5.0,5.0,0.969914377,0.41521692299999996,0.9910642679999999,0.999979993,0.9680822792753956,0.4867673066115808,0.990993677543356,0.9999799914724371
1939,1939.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.",1.5,4.0,2.75,0.9642510409999999,0.352252424,0.981438197,0.9999727209999999,0.9620740680837043,0.4315067481573176,0.9812915625496937,0.9999727189172093
1940,1940.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",1.5,5.0,3.25,0.9672233459999999,0.364726514,0.990680675,0.999962993,0.9652273749272537,0.44245458686891825,0.9906070542370493,0.9999629901744628
1941,1941.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0.0,3.75,1.875,0.976913989,0.494553089,0.9856057029999999,0.9999709509999999,0.9755081404914518,0.5563963977408556,0.9854919909953989,0.9999709487820673
1942,1942.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0.0,3.75,1.875,0.975955844,0.42742794799999995,0.98620587,0.9999517509999999,0.974491648178041,0.49748426730396983,0.9860968991920455,0.9999517473161198
1943,1943.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,character arrays can call on individual letters were a string array can only call words.,0.0,3.75,1.875,0.960937142,0.24218796199999998,0.988008015,0.999971235,0.9585583654907568,0.3349090822870938,0.987913280769249,0.9999712328037512
1944,1944.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The character array has an end of line character at the end of it.,4.5,5.0,4.75,0.978134573,0.450639695,0.990019993,0.999920432,0.9768030533218399,0.517855970760533,0.9899411529842699,0.9999204259248696
1945,1945.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"Type char[] may contain a null value as the last element, whereas type string will not.",5.0,5.0,5.0,0.981012285,0.5142712,0.99771396,0.9999673990000001,0.9798560068186595,0.5737019245508626,0.9976959007511877,0.9999673965108672
1946,1946.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The variable of type string has a terminating character \0 at the end of it.,2.5,5.0,3.75,0.986607373,0.530790687,0.990330995,0.99998267,0.9857918139719162,0.5882001908993002,0.9902546118365119,0.9999826686768297
1947,1947.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,the one that is type string has an extra string member. The /0 at the end.,2.5,5.0,3.75,0.977055848,0.482348055,0.985320382,0.9999728090000001,0.9756586381542149,0.5456846950273428,0.9852044160178087,0.9999728069239285
1948,1948.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"a string has variable size and function calls available, while an character array usually has a static size.",2.5,4.0,3.25,0.966633856,0.273901165,0.9899131390000001,0.999931983,0.964601987273159,0.36274205699484807,0.9898334548595074,0.9999319778068049
1949,1949.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string char[] adds a null value to the end of the string.,5.0,5.0,5.0,0.985077918,0.748988152,0.996217347,0.9999634209999999,0.9841692210958821,0.7797003848292886,0.996187464814344,0.9999634182071412
1950,1950.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",5.0,5.0,5.0,0.9787878390000001,0.298516303,0.9901013390000001,0.99997254,0.9774961006869181,0.38434544134495235,0.9900231416010457,0.9999725379033898
1951,1951.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",0.0,4.0,2.0,0.9806813,0.440178752,0.988077845,0.999965722,0.9795048661162038,0.508674963028887,0.9879836624119781,0.9999657193828259
1952,1952.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",0.0,4.0,2.0,0.974724233,0.326367348,0.9892939409999999,0.999971127,0.9731850368461317,0.40878880744296286,0.9892093653218499,0.9999711247955053
1953,1953.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0.0,3.75,1.875,0.970768333,0.210027888,0.987929113,0.999974838,0.9689882378829038,0.30668391290759267,0.9878337554595739,0.9999748360788455
1954,1954.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",1.5,3.75,2.625,0.965315044,0.277836502,0.987528546,0.999969185,0.963202864738643,0.36619589088187265,0.987430024062136,0.9999691826472309
1955,1955.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",0.0,3.75,1.875,0.975455582,0.474671602,0.9863398859999999,0.999966942,0.9739609221629895,0.5389474845918576,0.9862319738910571,0.9999669394759746
1956,1956.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",5.0,5.0,5.0,0.971593857,0.258785248,0.988956115,0.999973995,0.969864033091913,0.34947562863863596,0.98886887056549,0.9999739930144812
1957,1957.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),5.0,5.0,5.0,0.985071182,0.652899265,0.9872656759999999,0.999946146,0.984162074899614,0.695368330398607,0.9871650774428575,0.9999461418881702
1958,1958.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string of characters will have a null character or value at the end of the string,5.0,5.0,5.0,0.9833859209999999,0.482698351,0.991373466,0.999979081,0.9823741880426236,0.545992131009392,0.9913053181443666,0.9999790794028046
1959,1959.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"when the characters are put in a char array, there is also a null terminating character added to the end, '\0'",5.0,5.0,5.0,0.979981303,0.517161787,0.992175942,0.999984339,0.978762242014517,0.5762388374846196,0.9921141335407683,0.9999843378042604
1960,1960.0,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"string of characters that is read into a variable of type string includes, ",0.0,3.0,1.5,0.96564126,0.289153576,0.989471291,0.99997196,0.9635489460274997,0.3761282788026949,0.9893881163506058,0.9999719578591061
1961,1961.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",3.0,4.5,3.75,0.9798162579999999,0.294099838,0.994045397,0.999982844,0.9785871464143032,0.38046934725749354,0.9939983568532159,0.9999828426901151
1962,1962.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.,5.0,5.0,5.0,0.9878939990000001,0.726695538,0.990032008,0.9999920440000001,0.9871567905038969,0.7601353550329691,0.9899532629003145,0.9999920433925483
1963,1963.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,4.0,4.5,4.25,0.9862865209999999,0.587076306,0.989129122,0.999979155,0.9854514233298499,0.6375990551526931,0.9890432442854333,0.9999791534084547
1964,1964.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide elements,recur then conquer, which works in merge sort and quicksort.",3.0,4.5,3.75,0.97628367,0.360284537,0.9949813609999999,0.99998907,0.9748394375096519,0.4385561022695094,0.9949417147775369,0.999989069165479
1965,1965.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",4.0,4.5,4.25,0.983910918,0.472901464,0.987889572,0.999985,0.9829311553232167,0.5373939295572798,0.9877939020937547,0.9999849988547286
1966,1966.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,2.0,5.0,3.5,0.977770865,0.43585094799999996,0.9855649009999999,0.999974852,0.9764171969156321,0.5048766819384491,0.9854508666679374,0.9999748500799145
1967,1967.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",4.0,4.5,4.25,0.986838639,0.539144874,0.9955551429999999,0.999986514,0.986037163174128,0.5955322120601666,0.9955200295380756,0.9999865129703248
1968,1968.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",dived and conquer is the breaking up of a large complex program into small easy to solve components.,4.0,4.5,4.25,0.9824404720000001,0.41373536,0.981280486,0.999973201,0.9813711648663592,0.48546701835287215,0.9811326056650244,0.9999731989538582
1969,1969.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,4.0,4.5,4.25,0.980425835,0.519658566,0.9907025159999999,0.9999416190000001,0.9792338442887711,0.578430126291299,0.9906290677764856,0.9999416145425274
1970,1970.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Break up very large data structures into smaller sub-units, that are easier to manipulate.",4.0,4.5,4.25,0.969247341,0.34529724700000003,0.993176136,0.9999838190000001,0.9673746233707379,0.4254025629216303,0.9931222288689628,0.9999838177645578
1971,1971.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,4.0,4.25,4.125,0.98491025,0.361831278,0.9859358159999999,0.9999808929999999,0.9839913427651439,0.4399135937575955,0.9858247118206351,0.9999808915411533
1972,1972.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",4.0,4.5,4.25,0.984958291,0.48580303799999996,0.993525537,0.99998582,0.9840423092756707,0.5487169480121555,0.9934743900654573,0.9999858189173368
1973,1973.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",4.5,4.5,4.5,0.9903852340000001,0.7369680409999999,0.99472144,0.9999830690000001,0.9897997320507401,0.7691509790992083,0.9946797404547559,0.9999830677072942
1974,1974.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The idea is to split the problem into half and solve for the smaller split-problems.,4.0,4.5,4.25,0.9863578679999999,0.635034561,0.985136213,0.999988669,0.9855271150853617,0.6796894393514455,0.9850187921203465,0.9999886681348621
1975,1975.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",5.0,5.0,5.0,0.991491497,0.701859474,0.9954965590000001,0.999996022,0.9909733621757324,0.7383380758003365,0.9954609827364483,0.9999960216962741
1976,1976.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",4.0,4.5,4.25,0.9850023990000001,0.5187765360000001,0.9929456409999999,0.999990934,0.9840891032817554,0.5776560159410616,0.9928899130055681,0.9999909333077982
1977,1977.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",4.0,4.5,4.25,0.9796401259999999,0.46890729700000006,0.994604295,0.999993515,0.978400288658801,0.533888463739477,0.9945616700331964,0.9999935145048612
1978,1978.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the taking of a larger problem and splitting it into simpler smaller problems.,4.0,4.5,4.25,0.9841154809999999,0.531077802,0.985975791,0.999964163,0.9831481754163218,0.5884521763115973,0.9858650026149657,0.999964160263794
1979,1979.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,4.0,4.5,4.25,0.983293593,0.57240063,0.989356938,0.99997111,0.9822762376256069,0.6247190026733772,0.9892728599852756,0.9999711077942074
1980,1980.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",5.0,5.0,5.0,0.980200648,0.45103585700000004,0.98744749,0.999993371,0.978994944274076,0.5182036608669589,0.987348327736301,0.9999933704938665
1981,1981.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",4.0,4.5,4.25,0.9762486220000001,0.325680733,0.995195195,0.999984691,0.9748022552224194,0.40818620234095015,0.9951572380224366,0.9999846898311361
1982,1982.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",4.0,4.5,4.25,0.9870138759999999,0.5387064220000001,0.992999923,0.9999932690000001,0.9862230714276023,0.5951474062924691,0.9929446238222747,0.9999932684860787
1983,1983.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,4.0,4.5,4.25,0.9868736859999999,0.567410111,0.9843677340000001,0.999994814,0.9860743444004643,0.62033909222707,0.9842442422932973,0.9999948136040416
1984,1984.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",5.0,5.0,5.0,0.986022532,0.631756067,0.995351487,0.999991812,0.9851713584238859,0.6768120812813216,0.9953147646972961,0.9999918113748346
1985,1985.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements",5.0,5.0,5.0,0.988044202,0.5116835829999999,0.9798292009999999,0.99997948,0.9873161402838897,0.5714309121112059,0.9796698558101171,0.9999794784332688
1986,1986.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","divide the array in half, sort each half, then sort them back in one array",3.0,3.0,3.0,0.971657276,0.163821548,0.983290453,0.999819175,0.9699313140629813,0.2661310903952185,0.9831584509935564,0.9998191611937529
1987,1987.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",You take a class and break down everything it is supposed to do into easily managed functions.,1.0,4.5,2.75,0.97153306,0.189205751,0.980624134,0.999977966,0.9697995337904728,0.2884094417832981,0.9804710686183603,0.9999779643176726
1988,1988.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",1.0,4.5,2.75,0.978722394,0.285445571,0.983391145,0.999971712,0.9774266703403096,0.37287396200028217,0.9832599384397784,0.9999717098401709
1989,1989.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",5.0,4.5,4.75,0.9904448990000001,0.751557171,0.984990154,0.999985198,0.9898630304177718,0.7819550748033899,0.984871579284096,0.9999851968698462
1990,1990.0,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the separating of large program into smaller classes then until target is reached.,1.5,5.0,3.25,0.9764435290000001,0.355157614,0.986771924,0.9999793459999999,0.9750090313025845,0.4340564773597328,0.9866674249029636,0.9999793444230377
1991,1991.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",5.0,5.0,5.0,0.981955648,0.36015141,0.993257305,0.999990467,0.9808568169656164,0.4384392638529067,0.9932040390874747,0.999990466272142
1992,1992.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,2.0,5.0,3.5,0.976785004,0.334278852,0.98869212,0.99998318,0.9753713008053444,0.4157323095147119,0.9886027900589415,0.999983178715769
1993,1993.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It divides the array into two halves, sorts each half, then merges the two halves together.",5.0,5.0,5.0,0.99412483,0.81755805,0.9988851540000001,0.99999678,0.9937670549395112,0.8398805008758226,0.998876346944436,0.9999967797541486
1994,1994.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",5.0,5.0,5.0,0.9808729890000001,0.51630491,0.994217425,0.999987373,0.9797082282326535,0.5754868025713169,0.9941717438392593,0.9999873720359106
1995,1995.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.",5.0,5.0,5.0,0.991234064,0.662057519,0.98998277,0.9999879429999999,0.9907002525047344,0.7034060379726161,0.989903635930177,0.9999879420794308
1996,1996.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,5.0,5.0,5.0,0.9768284559999999,0.39926242799999995,0.981669192,0.9999751309999999,0.9754173988635739,0.47276490339138283,0.9815243823629863,0.9999751291012163
1997,1997.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Continually split array in half, sort each side of the halves, then put them back together once organized.",5.0,5.0,5.0,0.987256527,0.566708505,0.992689025,0.99992175,0.9864804989321465,0.6197233303296417,0.9926312697916116,0.9999217440255008
1998,1998.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,5.0,5.0,5.0,0.9882173540000001,0.727509618,0.9915241440000001,0.999978068,0.9874998365689527,0.760849829318335,0.9914571864697733,0.9999780663254606
1999,1999.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",By divide and conquer.,1.5,5.0,3.25,0.9461539390000001,0.242088705,0.977775038,0.999969839,0.9428749227789628,0.3348219697500673,0.9775994653422174,0.9999698366971647
2000,2000.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",5.0,5.0,5.0,0.9794011709999999,0.600428462,0.9920040509999999,0.999973537,0.9781467822263183,0.6493175252246688,0.9919408846369966,0.9999735349795124
2001,2001.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",5.0,5.0,5.0,0.9831275340000001,0.48354435,0.993193889,0.999972836,0.982100066276727,0.5467346188864376,0.9931401221140349,0.9999728339259898
2002,2002.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",5.0,5.0,5.0,0.988673806,0.563921511,0.995956829,0.9999851590000001,0.9879840847249635,0.6172773354071904,0.995924888775385,0.9999851578668687
2003,2003.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",5.0,5.0,5.0,0.988851845,0.541423619,0.993571109,0.9999858209999999,0.9881729656093676,0.5975321441373656,0.9935203220749441,0.9999858199174131
2004,2004.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",5.0,5.0,5.0,0.9875747559999999,0.5850400929999999,0.995411087,0.9999888159999999,0.9868181068436883,0.6358119803835944,0.9953748355251159,0.9999888151460857
2005,2005.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",5.0,5.0,5.0,0.985887528,0.730707765,0.995979918,0.999992552,0.9850281332040292,0.7636566711426276,0.9959481601737662,0.9999925514313347
2006,2006.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,5.0,5.0,5.0,0.988605022,0.7255132790000001,0.9892115779999999,0.999982855,0.9879111120462085,0.7590977498170907,0.9891263516709821,0.9999828536909549
2007,2007.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",5.0,5.0,5.0,0.9885182379999999,0.689619303,0.9921676290000001,0.9999891320000001,0.987819043237284,0.727595535229408,0.992105754869767,0.9999891311702128
2008,2008.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",5.0,5.0,5.0,0.986958742,0.6693584920000001,0.992026161,0.999986264,0.9861645799808927,0.709813709782083,0.9919631693014782,0.9999862629512369
2009,2009.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,5.0,5.0,5.0,0.983702958,0.7653964759999999,0.992174601,0.999971306,0.9827105313659901,0.7941010893840645,0.9921127819471421,0.9999713038091721
2010,2010.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",5.0,5.0,5.0,0.9880846740000001,0.682796955,0.993607993,0.999979539,0.98735907687168,0.7216079268717314,0.9935574974510063,0.9999795374377735
2011,2011.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",5.0,5.0,5.0,0.9837981459999999,0.643267512,0.9967115190000001,0.999984455,0.9828115159459114,0.6869150581876501,0.9966855406721523,0.9999844538131172
2012,2012.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",5.0,5.0,5.0,0.991783023,0.730031133,0.997727977,0.99998783,0.9912826409781677,0.7630628275834495,0.9977100284826234,0.9999878290708032
2013,2013.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,5.0,5.0,5.0,0.981788397,0.41004201799999995,0.9913228279999999,0.9999855040000001,0.9806793810285608,0.48222557047789444,0.9912542801145152,0.99998550289321
2014,2014.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",5.0,5.0,5.0,0.987449169,0.6243653889999999,0.99429925,0.999985617,0.9866848720825989,0.6703256802121154,0.994254215240037,0.9999856159018375
2015,2015.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",5.0,5.0,5.0,0.978525221,0.665235877,0.994668929,0.99998282,0.977217490269535,0.7061955120546314,0.9946268146285874,0.9999828186882825
2016,2016.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",5.0,5.0,5.0,0.9879128340000001,0.6914900540000001,0.989025734,0.9999780490000001,0.987176772482327,0.729237392889371,0.9889390395413623,0.99997804732401
2017,2017.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,5.0,5.0,5.0,0.985447645,0.637632132,0.988304449,0.9999886440000001,0.9845614630358395,0.6819691878821945,0.9882120565372682,0.9999886431329533
2018,2018.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",5.0,5.0,5.0,0.990967155,0.8182148340000001,0.9961060629999999,0.9999918740000001,0.9904170897820983,0.8404569249115927,0.9960753016934866,0.9999918733795684
2019,2019.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).",5.0,5.0,5.0,0.991101563,0.718994618,0.994354637,0.999993363,0.9905596827078671,0.7533766712258987,0.994310039786018,0.9999933624932557
2020,2020.0,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,2.5,5.0,3.75,0.9850102070000001,0.606254399,0.9888495559999999,0.999984465,0.9840973867586644,0.6544306371727103,0.9887614697711669,0.9999844638138807
2021,2021.0,12.1,What is a pointer?,The address of a location in memory.,A variable in memory that hold the address of another memory location to which it points too,5.0,5.0,5.0,0.9734103679999999,0.614706874,0.995269284,0.999937727,0.9717911625647238,0.6618489204313558,0.9952319123103955,0.9999377222453677
2022,2022.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that contains the memory address of a given value.,4.5,5.0,4.75,0.971921563,0.535072029,0.9956790870000001,0.9999620690000001,0.9702116951159894,0.5919576947881772,0.9956449526703458,0.999962066103914
2023,2023.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that stores the address of another variable.,5.0,5.0,5.0,0.968343139,0.378329694,0.996048487,0.99993296,0.966415358976757,0.45439336722122226,0.9960172708548533,0.9999329548814003
2024,2024.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that holds a memory address or location of another variable.,5.0,5.0,5.0,0.9744856359999999,0.564825714,0.996007862,0.9999598890000001,0.97293191021446,0.6180709058084418,0.9959763249256556,0.999959885937468
2025,2025.0,12.1,What is a pointer?,The address of a location in memory.,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,5.0,5.0,5.0,0.9632914659999999,0.594998837,0.9923402709999999,0.999954947,0.9610560586888413,0.6445522350299953,0.9922797607062849,0.9999549435601393
2026,2026.0,12.1,What is a pointer?,The address of a location in memory.,a pointer points to a location in memory of a certain data type,4.5,5.0,4.75,0.972260535,0.38943702,0.9969339429999999,0.9999219570000001,0.9705713091957597,0.46414167058965783,0.9969097217762964,0.9999219510413057
2027,2027.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that points to the address location of another variable.  Represented by (*).,5.0,5.0,5.0,0.9711717959999999,0.513545513,0.9947538109999999,0.999951512,0.9694162702143836,0.5730650280533139,0.9947123671790404,0.9999515082978719
2028,2028.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that holds the address of a given variable (and of a given data type),5.0,5.0,5.0,0.964209616,0.232388392,0.9938908009999999,0.999952165,0.9620301204619113,0.3263085261100067,0.99384253957641,0.9999521613477295
2029,2029.0,12.1,What is a pointer?,The address of a location in memory.,pointer is a programming data type whose value points to another value stored in computer memory by its address.,5.0,5.0,5.0,0.961729288,0.440094739,0.992395122,0.999937407,0.9593987501090548,0.5086012293317855,0.9923350450179752,0.9999374022209352
2030,2030.0,12.1,What is a pointer?,The address of a location in memory.,A data type that points to a specific memory address.,5.0,5.0,5.0,0.964690328,0.594746649,0.993872112,0.999943039,0.9625401059578063,0.6443309031693945,0.9938237029371294,0.9999430346509465
2031,2031.0,12.1,What is a pointer?,The address of a location in memory.,Its like a variable except it only holds the address in memory of the variable not the physical information.,5.0,5.0,5.0,0.975078166,0.452846766,0.9932017240000001,0.999959534,0.9735605229927613,0.5197929984181058,0.9931480190089336,0.9999595309103632
2032,2032.0,12.1,What is a pointer?,The address of a location in memory.,a pointer is a reference to a memory location.,5.0,5.0,5.0,0.9743355509999999,0.58454454,0.995064134,0.999905225,0.9727726856202095,0.6353770601355404,0.9950251416673211,0.9999052177637934
2033,2033.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is an alias to an object in memory.,3.5,4.25,3.875,0.971039295,0.428053707,0.9968055370000001,0.9999241040000001,0.9692757004175165,0.4980334623638366,0.9967803013951383,0.9999240982052321
2034,2034.0,12.1,What is a pointer?,The address of a location in memory.,"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",5.0,5.0,5.0,0.9678558709999999,0.382244706,0.993141321,0.9999404709999999,0.9658984182458956,0.45782936294756227,0.9930871388375778,0.9999404664548758
2035,2035.0,12.1,What is a pointer?,The address of a location in memory.,its a data type with a memory address and a value,1.5,5.0,3.25,0.969300032,0.47897070700000005,0.994786675,0.999926505,0.967430523048225,0.5427205781116443,0.9947454907979242,0.9999264993885518
2036,2036.0,12.1,What is a pointer?,The address of a location in memory.,a form of storing data that keeps the location in memory of an data type or object.,5.0,5.0,5.0,0.980713308,0.539451957,0.994362503,0.999952317,0.9795388232792299,0.5958017223134255,0.9943179679258102,0.999952313359335
2037,2037.0,12.1,What is a pointer?,The address of a location in memory.,it contains a object's memory address,5.0,5.0,5.0,0.9530184270000001,0.486920178,0.995863585,0.9999077959999999,0.9501574314676278,0.5496974017797873,0.995830908166841,0.9999077889600928
2038,2038.0,12.1,What is a pointer?,The address of a location in memory.,variable that contains the memory address of a data object.,5.0,5.0,5.0,0.9730941059999999,0.598378718,0.994644228,0.999969984,0.9714556414358508,0.6475185750237266,0.9946019184957354,0.9999699817082356
2039,2039.0,12.1,What is a pointer?,The address of a location in memory.,A pointer is an element that references a memory location.,5.0,5.0,5.0,0.96693635,0.541126669,0.996485356,0.9999383740000001,0.9649229019842445,0.5972715270738835,0.9964575910306722,0.9999383692947671
2040,2040.0,12.1,What is a pointer?,The address of a location in memory.,"an object that points to a specific place in memory, where a variable or value is stored.",5.0,5.0,5.0,0.9705876109999999,0.388406277,0.9909248279999999,0.99994078,0.9687965106142082,0.46323704282786426,0.9908531359958527,0.9999407754784685
2041,2041.0,12.1,What is a pointer?,The address of a location in memory.,a variable that stores the address of a memory location,5.0,5.0,5.0,0.974579275,0.670466483,0.9954856529999999,0.9999434640000001,0.9730312514662911,0.7107861339638794,0.9954499905812769,0.9999434596833959
2042,2042.0,12.1,What is a pointer?,The address of a location in memory.,"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",5.0,5.0,5.0,0.973942339,0.540381074,0.990037808,0.9999464659999999,0.9723555285348615,0.5966171583941501,0.9899591087191292,0.9999464619126027
2043,2043.0,12.1,What is a pointer?,The address of a location in memory.,Pointer is a variable which have a memory address of a variable.,5.0,5.0,5.0,0.9711034890000001,0.490108252,0.995666185,0.99993385,0.9693438035830784,0.5524954030730799,0.9956319487471826,0.999933844949353
2044,2044.0,12.1,What is a pointer?,The address of a location in memory.,a pointer points to a location in memory where data is stored,5.0,5.0,5.0,0.959275842,0.417487085,0.996913061,0.999933781,0.9567958987657106,0.48875970585074013,0.996888674812764,0.9999337759440848
2045,2045.0,12.1,What is a pointer?,The address of a location in memory.,a variable that holds the address of another variable and can access the contents of the variable.,5.0,5.0,5.0,0.972620666,0.324599266,0.9923640429999999,0.999951701,0.9709533707765443,0.40723705684914124,0.9923037205002266,0.9999516973123025
2046,2046.0,12.1,What is a pointer?,The address of a location in memory.,a pointer is a memory address that points to a data member,5.0,5.0,5.0,0.9564966559999999,0.437395126,0.9955208790000001,0.999912545,0.9538474711200629,0.5062319240191142,0.9954854948594781,0.9999125383226859
2047,2047.0,12.1,What is a pointer?,The address of a location in memory.,A data type that stores the memory address of another variable.,5.0,5.0,5.0,0.9739271999999999,0.623821795,0.989749015,0.9999372329999999,0.9723394676284924,0.6698485969590209,0.9896680343134485,0.9999372282076499
2048,2048.0,12.1,What is a pointer?,The address of a location in memory.,its like a variable but only holds an address in meomrry not the physical address.,1.0,5.0,3.0,0.971476853,0.479783148,0.991081683,0.999937105,0.9697399040022259,0.5434336139347538,0.9910112301182971,0.9999371001978771
2049,2049.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs",5.0,3.75,4.375,0.9687945840000001,0.257201344,0.98583899,0.9999523990000001,0.9668942952258923,0.3480855211817666,0.985727120915023,0.9999523953655959
2050,2050.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
2051,2051.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1,1.5,3.0,2.25,0.892390311,0.05932701,0.97432043,0.9999408190000001,0.8858372984078295,0.17442184761540644,0.9741175666450205,0.9999408144814462
2052,2052.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Using some sort of counting principle of the number of operations performed in an algorithm.,5.0,3.75,4.375,0.9660260079999999,0.360333622,0.9942794709999999,0.9999595029999999,0.9639571236880835,0.43859918153726835,0.9942342799899792,0.9999594999079963
2053,2053.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,5.0,5.0,5.0,0.978817046,0.49230834799999995,0.9949750340000001,0.999979292,0.9775270862799104,0.5544263091478346,0.9949353377955302,0.9999792904189148
2054,2054.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,measuring the relationship of running an algorithm with different input sizes.,5.0,3.75,4.375,0.9767843490000001,0.513540924,0.9972594570000001,0.999985696,0.9753706059183858,0.5730610005345251,0.9972378072703726,0.9999856949078693
2055,2055.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.",5.0,4.25,4.625,0.9717166420000001,0.40965730000000006,0.9886634329999999,0.9999811690000001,0.9699942952220733,0.48188792415552156,0.988573876437504,0.9999811675622264
2056,2056.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
2057,2057.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,1.5,3.75,2.625,0.977404892,0.478689104,0.9958570390000001,0.999977795,0.9760289375797113,0.5424734302856543,0.9958243104547787,0.9999777933046167
2058,2058.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",5.0,5.0,5.0,0.9755107759999999,0.447312087,0.99098873,0.999975932,0.9740194772634663,0.5149355079709081,0.9909175428085935,0.999975930162374
2059,2059.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,keep a value of how many operations it takes and add to this value each time a function is called.,3.0,3.75,3.375,0.9608917240000001,0.16916106600000003,0.9947858820000001,0.999952754,0.9585101817107544,0.27081729851634706,0.9947446915333863,0.9999527503927005
2060,2060.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,BIG-OH,1.5,3.0,2.25,0.331240028,0.039980397,0.967930292,0.999539975,0.2905151401355297,0.15744236464392264,0.9676769478607448,0.999539939876434
2061,2061.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Running the program with various input data and measuring the running time with system time.,5.0,5.0,5.0,0.97729224,0.5486868020000001,0.996912221,0.999968967,0.9759094255099408,0.6039066496938302,0.9968878281769357,0.9999689646305862
2062,2062.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",5.0,3.0,4.0,0.9802608490000001,0.509171546,0.988203747,0.999985406,0.9790588112814285,0.5692262321775536,0.9881105590120481,0.9999854048857274
2063,2063.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,5.0,3.5,4.25,0.965491355,0.223327115,0.992815654,0.99989527,0.9633899123945509,0.31835593003950086,0.9927588991348332,0.9998952620037149
2064,2064.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the number of times a specific segments get called per unit work.,3.0,3.0,3.0,0.956789315,0.171491817,0.9941319479999999,0.99994967,0.954157951917803,0.272862873466095,0.9940855915884278,0.9999496661572328
2065,2065.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"For every call into memory, add/ multiply it into an equation of type O(n)",1.5,3.0,2.25,0.949628472,0.006916229,0.988909193,0.99996866,0.9465610413593366,0.12842372052661485,0.9888215778912792,0.9999686576071464
2066,2066.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",3.0,4.25,3.625,0.973668337,0.35032179999999996,0.9940549340000001,0.999975281,0.9720648408760424,0.4298123431815041,0.9940079691935669,0.9999752791126691
2067,2067.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Big O(h) notation,1.5,3.0,2.25,0.876905143,0.031166867999999997,0.9891846120000001,0.999887832,0.8694091437507836,0.14970720368452478,0.9890991726450932,0.999887823435813
2068,2068.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the experimental approach measures actual running time in t.  t= seconds.,5.0,5.0,5.0,0.962165952,0.462120473,0.9938349879999999,0.9999639929999999,0.9598620052526325,0.527932032888327,0.9937862856651162,0.9999639902508141
2069,2069.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,running an algorithm on a specific set of data,5.0,3.0,4.0,0.957146108,0.312813133,0.991122005,0.999941645,0.9545364722273373,0.39689300104086395,0.9910518706538566,0.9999416405445126
2070,2070.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",2.5,3.75,3.125,0.970476329,0.492144167,0.988917708,0.9999794240000001,0.968678451972123,0.5542822163035863,0.988830160158039,0.9999794224289932
2071,2071.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)",2.5,4.5,3.5,0.939758182,0.173351318,0.985508528,0.9999718879999999,0.9360896889897727,0.2744948576053838,0.9853940483327581,0.9999718858536087
2072,2072.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,to measure the actual time of the program to run. and calculate the running time using the input and operations done,5.0,5.0,5.0,0.9821400640000001,0.566298664,0.992792054,0.9999412809999999,0.9810524631845814,0.6193636348997223,0.9927351126996561,0.9999412765167205
2073,2073.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,adding up the number of operations performed based on the worst case possible.,2.0,3.0,2.5,0.95538497,0.179998055,0.995127324,0.99996527,0.952668087755409,0.28032834162180725,0.9950888308554072,0.9999652673483149
2074,2074.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the experimental approach would be to run through the algorithm and see how long it takes,5.0,5.0,5.0,0.97082752,0.300202906,0.993497746,0.9999737040000001,0.9690510291415901,0.38582568219735136,0.9934463795222369,0.9999737019922631
2075,2075.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",5.0,5.0,5.0,0.972051621,0.43115568200000004,0.9916689320000001,0.99997458,0.9703496731436341,0.5007558991898831,0.9916031182653836,0.9999745780591468
2076,2076.0,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,running the input with various inputs measuring the running time with  system time,5.0,3.75,4.375,0.964651465,0.408278674,0.996896138,0.9999567359999999,0.9624988763518738,0.4806779781721576,0.9968716181245224,0.9999567326967317
2077,2077.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.",5.0,5.0,5.0,0.98965615,0.462587178,0.9913563209999999,0.999892435,0.9890262496635951,0.5283416347964339,0.9912880377023704,0.9998924267872586
2078,2078.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",5.0,5.0,5.0,0.9879384040000001,0.51639539,0.9960528590000001,0.999923094,0.9872038995961292,0.575566212006925,0.9960216773927598,0.9999230881281171
2079,2079.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Compare the largest element to the front element and swap data according to value if needed.,4.0,3.75,3.875,0.972710967,0.193455562,0.991436997,0.9998623179999999,0.9710491707571249,0.29213927260725286,0.9913693510262831,0.9998623074877826
2080,2080.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",1.0,3.0,2.0,0.985036612,0.38898795799999997,0.9940667740000001,0.9998457620000001,0.9841253997207271,0.46374755299490666,0.9940199027271471,0.9998457502237085
2081,2081.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",5.0,4.5,4.75,0.984655857,0.38470456,0.9848913140000001,0.999809203,0.9837214582183527,0.4599882446652736,0.9847719584682956,0.9998091884323764
2082,2082.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,5.0,5.0,5.0,0.981983244,0.481981516,0.993270622,0.9998474479999999,0.9808860934549588,0.5453630034367329,0.9932174612890533,0.9998474363524368
2083,2083.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.,5.0,5.0,5.0,0.987837374,0.508160353,0.995095437,0.99993497,0.9870967172610714,0.5683387624005759,0.9950566919546239,0.9999349650348667
2084,2084.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",5.0,5.0,5.0,0.9872483609999999,0.383355469,0.9923101959999999,0.9998173890000001,0.9864718356544262,0.4588042199648528,0.9922494481199312,0.9998173750573893
2085,2085.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,0.0,3.75,1.875,0.9872965220000001,0.385705054,0.993628099,0.999874168,0.9865229294724873,0.4608663245046787,0.9935777622842973,0.999874158392547
2086,2086.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",1.0,4.0,2.5,0.9805216790000001,0.292965233,0.995339335,0.999816005,0.9793355248165478,0.3794735653975442,0.9953025166989794,0.9998159909517189
2087,2087.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0.0,3.75,1.875,0.986172915,0.365031958,0.9855401640000001,0.9998858070000001,0.9853308991651804,0.4427226586599207,0.9854259342506929,0.9998857982812014
2088,2088.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort finds the lowest element in the data set and places it behind the pivot point.,5.0,3.75,4.375,0.9798824190000001,0.46443492200000003,0.9939258190000001,0.9998329579999999,0.9786573363625342,0.5299633004483836,0.9938778342114535,0.9998329452461047
2089,2089.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",5.0,3.75,4.375,0.986558259,0.43554318,0.9952353759999999,0.999867774,0.9857397091198523,0.504606570497487,0.995197736444125,0.999867763904356
2090,2090.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.",5.0,5.0,5.0,0.9831740859999999,0.403867662,0.997121613,0.9998260609999999,0.9821494531129298,0.47680666988987536,0.9970988743309431,0.9998260477195088
2091,2091.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,5.0,3.75,4.375,0.98692131,0.442596734,0.991882303,0.9998312290000001,0.986124868517309,0.5107970959414726,0.9918181748526779,0.9998312161140932
2092,2092.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",1.0,5.0,3.0,0.97890079,0.309540838,0.989849696,0.9998336090000001,0.9776159299646285,0.3940210835000431,0.9897695106727727,0.9998335962958096
2093,2093.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,5.0,3.75,4.375,0.97673583,0.369041413,0.99475678,0.999854435,0.9753191322995132,0.44624154193408505,0.9947153596335337,0.9998544238859044
2094,2094.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.",1.0,3.75,2.375,0.9858927129999999,0.44717139,0.99296893,0.9998935640000001,0.985033633950414,0.5148120257719496,0.9929133859839087,0.9998935558734595
2095,2095.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",5.0,3.75,4.375,0.9825167659999999,0.406485617,0.993281735,0.9998301709999999,0.9814521048749794,0.47910430836243956,0.9932286620794822,0.9998301580333132
2096,2096.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",1.0,3.75,2.375,0.982995451,0.33777073,0.9929983259999999,0.9999110859999999,0.9819599399344381,0.4187969432591042,0.992943014206301,0.9999110792112891
2097,2097.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,5.0,3.75,4.375,0.9770926240000001,0.32981768300000003,0.9938852840000001,0.999878809,0.9756976536699438,0.4118169811278562,0.9938369789932376,0.9998787997468941
2098,2098.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",5.0,5.0,5.0,0.9938238859999999,0.5952021479999999,0.9960469259999999,0.999888087,0.9934477846174128,0.6447306701732637,0.996015697523272,0.9998880784552826
2099,2099.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","select an element compare it with 2nd element if it is greater, swap it ",1.0,4.5,2.75,0.9702565670000001,0.321863949,0.9923154759999999,0.9998301940000001,0.9684453073188819,0.4048364160536123,0.992254769830852,0.9998301810350694
2100,2100.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",5.0,4.25,4.625,0.988844693,0.562314689,0.99688414,0.9998500490000001,0.9881653780803135,0.615867114052827,0.9968595253427744,0.9998500375510271
2101,2101.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,5.0,4.25,4.625,0.9884023670000001,0.432307184,0.994231291,0.9999027509999999,0.9876961161429014,0.5017665106390617,0.9941857193778255,0.9999027435748999
2102,2102.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",1.0,5.0,3.0,0.983043015,0.450192601,0.9938752809999999,0.99990782,0.9820104003975152,0.5174635803736652,0.9938268969715817,0.9999078129619254
2103,2103.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",5.0,3.0,4.0,0.98601222,0.452399701,0.9872410209999999,0.999936132,0.9851604184630909,0.51940063348298,0.987140227673396,0.999936127123587
2104,2104.0,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.,5.0,3.0,4.0,0.9811998609999999,0.393725365,0.991273926,0.999831177,0.9800550054693649,0.46790532063544865,0.9912049917987091,0.9998311641101228
2105,2105.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",A link list can grow to a infinite size as a array has a fixes size.,5.0,5.0,5.0,0.9794468279999999,0.358591855,0.992965942,0.999952353,0.9781952195604937,0.4370705262053613,0.9929103743793194,0.9999523493620835
2106,2106.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The advantage of linked lists is that they are not limited in size like arrays.,5.0,5.0,5.0,0.9762742520000001,0.411153734,0.992927025,0.9999786690000001,0.9748294459899887,0.4832012638920919,0.9928711499429727,0.9999786673713479
2107,2107.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link lists dont have a fixed size,5.0,5.0,5.0,0.96109426,0.32918039,0.991676511,0.9999515659999999,0.9587250513674233,0.41125766329577124,0.9916107571379347,0.9999515623019949
2108,2108.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked Lists can be of variable size, where arrays have fixed size.",5.0,5.0,5.0,0.987470567,0.542604387,0.994076838,0.999983666,0.9867075731377861,0.5985684407826374,0.9940300462306905,0.9999836647528758
2109,2109.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",5.0,5.0,5.0,0.978307843,0.397097081,0.993161265,0.99997121,0.9769868747926451,0.47086449464728625,0.993107240391102,0.9999712078018425
2110,2110.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",5.0,5.0,5.0,0.9813900590000001,0.431477934,0.99060567,0.99997906,0.9802567857896989,0.5010387224595957,0.9905314567128777,0.9999790584012013
2111,2111.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,5.0,5.0,5.0,0.97501421,0.318367362,0.9902693220000001,0.999958473,0.9734926723204762,0.4017676494728774,0.9901924516324158,0.9999584698293543
2112,2112.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The main advantage to a linked list is that it can have it's size adjusted during runtime.,5.0,5.0,5.0,0.9755083920000001,0.35471952,0.99237117,0.9999605420000001,0.974016948087115,0.4336719857894042,0.9923109038020702,0.9999605389873255
2113,2113.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists are able to grow in size. So elements can be added to the list.,5.0,5.0,5.0,0.9839364890000001,0.542497397,0.99491495,0.999970777,0.9829582834979149,0.598474541406911,0.9948747791442091,0.9999707747687824
2114,2114.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",4.5,5.0,4.75,0.984704018,0.43762871600000003,0.9948620020000001,0.99999063,0.9837725520364136,0.5064369334141596,0.99482141286583,0.9999906292845872
2115,2115.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",There is no predetermined length,5.0,5.0,5.0,0.8809850220000001,0.05775360400000001,0.9854691329999999,0.999939503,0.8737374715541394,0.17304095368920702,0.985354342120309,0.9999394983809676
2116,2116.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",4.0,5.0,4.5,0.9836791159999999,0.43026301299999997,0.992278532,0.999973275,0.982685237480684,0.49997245156084985,0.9922175339808023,0.9999732729595082
2117,2117.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists may be dynamically grown.,5.0,5.0,5.0,0.969013453,0.454434186,0.991847171,0.999971555,0.9671264924988978,0.5211861916793031,0.9917827653170576,0.9999715528281837
2118,2118.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.",5.0,5.0,5.0,0.9816173909999999,0.531769753,0.990447207,0.9999758790000001,0.9804979614265723,0.5890594645341716,0.990371741887562,0.9999758771583273
2119,2119.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists have an indefinite size, whereas arrays are a specific size.",5.0,5.0,5.0,0.9844603540000001,0.384715408,0.9953712929999999,0.9999766409999999,0.9835140498440995,0.45999776537214226,0.9953347271606482,0.9999766392165069
2120,2120.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",5.0,5.0,5.0,0.9721864459999999,0.418308258,0.996728637,0.9999770920000001,0.9704927084630852,0.48948040528118525,0.996702793900854,0.9999770902509416
2121,2121.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","They grow dynamically, unlike the fixed size array",5.0,5.0,5.0,0.96558857,0.22167420399999999,0.993555023,0.999979284,0.9634930474109087,0.31690525884563975,0.9935041089988313,0.9999792824183039
2122,2122.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",5.0,5.0,5.0,0.9799888729999999,0.22724741699999998,0.990902921,0.999964994,0.9787702729981496,0.3217965685146734,0.9908310559350298,0.999964991327242
2123,2123.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linkded list does not have a fixed size. Arrays have a fixed size.,5.0,5.0,5.0,0.97821033,0.35872975,0.99179813,0.999935593,0.9768834236292434,0.4371915492394372,0.9917333369031799,0.9999355880824335
2124,2124.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have a dynamic size, where as arrays have a static size.",5.0,5.0,5.0,0.984774888,0.5057398679999999,0.996321056,0.999967533,0.9838477377444761,0.5662144327393461,0.9962919930942494,0.9999675305210983
2125,2125.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked lists do not have a memory constraint other than total memory,5.0,5.0,5.0,0.955299199,0.25116199300000003,0.994450145,0.9999078020000001,0.9525770936342546,0.342785107230068,0.9944063022796993,0.9999077949605512
2126,2126.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",5.0,5.0,5.0,0.979629874,0.36160805799999995,0.990829972,0.999986953,0.9783894123517733,0.4397176855544958,0.9907575306528381,0.999986952003843
2127,2127.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Array have fixed size, in Link List are flexible for adding or deleting an element. ",5.0,5.0,5.0,0.9831029179999999,0.45575845200000004,0.995849627,0.9999662009999999,0.9820739512578236,0.5223484288107698,0.9958168399014934,0.999966198419398
2128,2128.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",they are resizeable,5.0,5.0,5.0,0.9069697259999999,0.11686714699999999,0.9799806040000001,0.99995663,0.9013045432210118,0.2249217349273791,0.9798224548628757,0.9999566266886387
2129,2129.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists can be dynamically allocated and their size can change as needed.,5.0,5.0,5.0,0.979146838,0.47741732,0.9930860579999999,0.999977717,0.9778769613332943,0.541357253786367,0.9930314392711718,0.9999777152986612
2130,2130.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists do not have to have a specified size, they are easier to add to and remove from",5.0,5.0,5.0,0.980798721,0.314067453,0.9962423490000001,0.999916613,0.9796294375995733,0.3979938503254799,0.9962126643250345,0.9999166066332835
2131,2131.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",5.0,5.0,5.0,0.962263584,0.214475766,0.9958444679999999,0.999980669,0.9599655826626727,0.31058757649771246,0.9958116401464475,0.9999806675240507
2132,2132.0,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked list many be dynamically grown. It has not limit,5.0,5.0,5.0,0.968517363,0.456088573,0.993353044,0.999954862,0.9666001925424612,0.5226381582790767,0.993300534406009,0.9999548585536494
2133,2133.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A data structure in C++ where the the first element in the queue is the first element taken out of the queue.,5.0,5.0,5.0,0.98570329,0.6718076470000001,0.9972560420000001,0.999973685,0.9848326758245738,0.7119632015622217,0.9972343652925705,0.9999736829908122
2134,2134.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,5.0,5.0,5.0,0.966257215,0.533996522,0.995393592,0.999986795,0.9642024102974243,0.5910137800682099,0.9953572023181912,0.9999867939917794
2135,2135.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,First in first out.,4.0,5.0,4.5,0.93899709,0.36058405,0.9837051370000001,0.9998495890000001,0.9352822494396018,0.4388189687404125,0.9835764109124093,0.9998495775159054
2136,2136.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",5.0,5.0,5.0,0.9877522590000001,0.606734574,0.994718311,0.999977528,0.9870064190877721,0.6548520609762377,0.9946765867362953,0.9999775262842306
2137,2137.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",5.0,5.0,5.0,0.9818747040000001,0.539561153,0.9960439240000001,0.999959343,0.980770943790036,0.5958975577768502,0.9960126718080858,0.9999593398957801
2138,2138.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a data structure that inserts elements at the end of it and removes elements from the front.,5.0,5.0,5.0,0.981271505,0.47095257,0.9963552729999999,0.999991,0.9801310123110247,0.5356834899838917,0.9963264804015567,0.9999909993128372
2139,2139.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.,5.0,5.0,5.0,0.985149741,0.557423651,0.992298337,0.9999769409999999,0.9842454178379472,0.6115745127363134,0.9922374954362548,0.9999769392394123
2140,2140.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",5.0,5.0,5.0,0.981270194,0.428922743,0.99169454,0.999983018,0.9801296214762107,0.49879616857828385,0.9916289285633502,0.9999830167034002
2141,2141.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,1.5,5.0,3.25,0.98086822,0.43754366,0.993914718,0.999987161,0.9797031688190545,0.5063622843319858,0.9938666455158222,0.999987160019724
2142,2142.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.,5.0,2.5,3.75,0.988796175,0.651957691,0.989777094,0.9999806040000001,0.9881139055223374,0.6945419614781457,0.9896963351318101,0.9999806025190879
2143,2143.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list except it is first in last out,0.0,5.0,2.5,0.9728429909999999,0.132536024,0.992856313,0.9998206759999999,0.9711892345065425,0.2386734665717643,0.9927998793326237,0.9998206623083563
2144,2144.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is like a stack except it follows FIFO (First in first out) .,5.0,5.0,5.0,0.977568507,0.458154351,0.993945865,0.999945832,0.9762025160984726,0.5244511806605067,0.9938980385707569,0.9999458278641958
2145,2145.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data structure where the first node in is the first node out.,5.0,5.0,5.0,0.986606896,0.537308633,0.9963464959999999,0.999949007,0.9857913079244667,0.5939206419734004,0.9963176340650503,0.9999490031066117
2146,2146.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.,5.0,5.0,5.0,0.985558748,0.488921881,0.9967616220000001,0.999966908,0.9846793317775193,0.5514541889756892,0.996736039475613,0.9999669054733785
2147,2147.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",5.0,5.0,5.0,0.979313016,0.251458168,0.9911667820000001,0.9999157940000001,0.9780532589288127,0.3430450441176813,0.9910970013830058,0.9999157875707517
2148,2148.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",5.0,5.0,5.0,0.977316737,0.217713073,0.983191147,0.9998768029999999,0.9759354142822054,0.31342878695041365,0.9830583604964511,0.999876793593733
2149,2149.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",5.0,5.0,5.0,0.977910042,0.301325828,0.989248164,0.999947989,0.9765648492549999,0.3868112105157865,0.9891632266929052,0.999947985028886
2150,2150.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",5.0,5.0,5.0,0.986373067,0.28666499300000003,0.991921125,0.999926427,0.985543239645498,0.37394418318494393,0.991857303538544,0.9999264213825964
2151,2151.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,5.0,5.0,5.0,0.985907793,0.550864995,0.996485985,0.999980903,0.9850496322639117,0.6058183326820671,0.9964582249996435,0.9999809015419169
2152,2152.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",5.0,5.0,5.0,0.981210589,0.423767149,0.996764732,0.999937277,0.9800663867629462,0.4942713806719519,0.9967391740439774,0.9999372722110095
2153,2153.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,5.0,5.0,5.0,0.985584736,0.501307786,0.993026223,0.999927659,0.9847069023458996,0.5623246324498992,0.9929711315869,0.9999276534766613
2154,2154.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",5.0,5.0,5.0,0.985648871,0.663379669,0.987005813,0.999985199,0.9847749429185904,0.7045664180045498,0.9869031615782646,0.9999851978699227
2155,2155.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .",5.0,5.0,5.0,0.989261389,0.495456368,0.986371474,0.999967699,0.9886074492501564,0.5571891571969423,0.9862638114298017,0.9999676965337726
2156,2156.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a queue is a set of elements where the first element inserted is the first element to be removed,5.0,5.0,5.0,0.971326351,0.399875999,0.993756272,0.9999717859999999,0.969580237014293,0.4733034016983628,0.9937069478248032,0.9999717838458207
2157,2157.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,Is a list of items where the the user only has access to the first element and each new element is added at the end.,5.0,5.0,5.0,0.978751302,0.34671494399999997,0.994112943,0.99989558,0.977457338725362,0.4266467994228837,0.9940664364528117,0.9998955720273839
2158,2158.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first",5.0,5.0,5.0,0.9825881120000001,0.394625843,0.991215601,0.999956961,0.9815277955695951,0.468695621804299,0.9911462060431288,0.999956957713911
2159,2159.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",5.0,5.0,5.0,0.9872584940000001,0.54645133,0.994715916,0.999954421,0.9864825857148156,0.6019446960041983,0.9946741728162848,0.9999544175199783
2160,2160.0,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list expect first in last out,0.0,2.5,1.25,0.974138022,0.16130957,0.992078363,0.9999013529999999,0.9725631278704163,0.26392646224269684,0.9920157836866099,0.9999013454681607
2161,2161.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2162,2162.0,12.7,What are the main operations associated with a stack?,push and pop,"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",5.0,5.0,5.0,0.933123171,0.14250016199999999,0.962937769,0.9998865920000001,0.9290506315601599,0.2474184552422109,0.9626449849493447,0.9998865833411373
2163,2163.0,12.7,What are the main operations associated with a stack?,push and pop,Push and pop,5.0,5.0,5.0,1.0,0.854469299,0.991316008,0.999932941,1.0,0.8722755213298782,0.9912474062379091,0.9999329358799497
2164,2164.0,12.7,What are the main operations associated with a stack?,push and pop,The Push function and the Pop function.,5.0,5.0,5.0,0.942355871,0.298810124,0.976899544,0.9998338240000001,0.9388455671722313,0.38460331225321753,0.9767170551185382,0.9998338113122252
2165,2165.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2166,2166.0,12.7,What are the main operations associated with a stack?,push and pop,push - puts an element on the stack pop- takes an element off the stack,5.0,5.0,5.0,0.904474795,0.338428468,0.9791794079999999,0.999841908,0.8986576806021073,0.4193742045694275,0.9790149295782125,0.9998418959294499
2167,2167.0,12.7,What are the main operations associated with a stack?,push and pop,Push  and pop.,5.0,5.0,5.0,0.9702087640000001,0.704518795,0.99207813,0.999929796,0.9683945933016318,0.7406720189890077,0.9920155488459576,0.9999297906398245
2168,2168.0,12.7,What are the main operations associated with a stack?,push and pop,Push and Pop,5.0,5.0,5.0,1.0,0.67974478,0.986679455,0.999918139,1.0,0.7189291968305357,0.986574225416761,0.9999181327497958
2169,2169.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop.,5.0,5.0,5.0,0.9702087640000001,0.806218505,0.99785766,0.999981123,0.9683945933016318,0.8299283913653943,0.9978407359518205,0.9999811215587141
2170,2170.0,12.7,What are the main operations associated with a stack?,push and pop,"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",5.0,5.0,5.0,0.944309115,0.393014818,0.972558963,0.9999233909999999,0.9409177561542914,0.46728171170261174,0.9723421844157036,0.9999233851507934
2171,2171.0,12.7,What are the main operations associated with a stack?,push and pop,pop and push,5.0,5.0,5.0,1.0,1.0,0.993155412,0.999963857,1.0,1.0,0.9931013411535982,0.9999638542404304
2172,2172.0,12.7,What are the main operations associated with a stack?,push and pop,"push,pop,search,isEmpty",4.0,5.0,4.5,0.943726301,0.6280725,0.984989462,0.999872159,0.9402994510426972,0.673579212398752,0.9848708818174374,0.9998721492391571
2173,2173.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2174,2174.0,12.7,What are the main operations associated with a stack?,push and pop,"Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.",4.5,5.0,4.75,0.937497079,0.177201912,0.963804935,0.9999079670000001,0.9336908935889406,0.2778743171135208,0.9635190013835258,0.9999079599731491
2175,2175.0,12.7,What are the main operations associated with a stack?,push and pop,"pop, push",5.0,5.0,5.0,0.9723076820000001,0.93170315,0.989143945,0.999896067,0.9706213272651547,0.9400595235155124,0.989058184384104,0.999896059064567
2176,2176.0,12.7,What are the main operations associated with a stack?,push and pop,"isempty, push and pop, along with usually, ",5.0,5.0,5.0,0.9417586920000001,0.5487887260000001,0.976965379,0.999923742,0.9382120222878659,0.6039961029134912,0.9767834102015839,0.9999237361775929
2177,2177.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2178,2178.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,5.0,5.0,5.0,0.9569706920000001,0.590939045,0.9786313240000001,0.9999265390000001,0.9543503740734574,0.6409891736749268,0.9784625158266221,0.9999265333911479
2179,2179.0,12.7,What are the main operations associated with a stack?,push and pop,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",5.0,5.0,5.0,0.939249635,0.42818585,0.974531763,0.9999044859999999,0.9355501734503625,0.4981494371764976,0.9743305691325312,0.9999044787073696
2180,2180.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2181,2181.0,12.7,What are the main operations associated with a stack?,push and pop,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",5.0,5.0,5.0,0.926107228,0.32531786,0.976230802,0.999910083,0.9216074448495591,0.4078677282016106,0.9760430301934061,0.9999100761347086
2182,2182.0,12.7,What are the main operations associated with a stack?,push and pop,"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",5.0,5.0,5.0,0.92658937,0.29636335399999997,0.970159442,0.999912963,0.9221189474269066,0.3824559136594617,0.9699237076901832,0.9999129563546008
2183,2183.0,12.7,What are the main operations associated with a stack?,push and pop,Push() Pop() Full() IsEmpty(),4.5,5.0,4.75,0.805035889,0.180955008,0.957207068,0.999780876,0.7931633309963773,0.2811682078644416,0.9568690125826028,0.9997808592695695
2184,2184.0,12.7,What are the main operations associated with a stack?,push and pop,pop and push to remove an element and to insert an element,5.0,5.0,5.0,0.9347584840000001,0.5089532139999999,0.988977682,0.9999186390000001,0.9307855287777218,0.569034613909481,0.9888906079403824,0.9999186327879716
2185,2185.0,12.7,What are the main operations associated with a stack?,push and pop,"Push, Pop",5.0,5.0,5.0,0.972307622,0.6164931060000001,0.975892214,0.999809067,0.9706212636113873,0.6634166003051983,0.9757017674174019,0.9998090524219928
2186,2186.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2187,2187.0,12.7,What are the main operations associated with a stack?,push and pop,push - Add an element to the top of the stack pop - remove the top element from the stack,5.0,5.0,5.0,0.912033677,0.363372892,0.977321778,0.999800059,0.9066768691914957,0.4412665855531931,0.9771426246808481,0.999800043734219
2188,2188.0,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5.0,5.0,5.0,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2189,2189.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.,5.0,3.0,4.0,0.98093158,0.442615181,0.990710245,0.999895841,0.9797703871972516,0.5108132858824392,0.9906368578340062,0.9998958330473116
2190,2190.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",5.0,5.0,5.0,0.988048017,0.525112271,0.990020315,0.9999123959999999,0.9873201876025894,0.5832165502084464,0.9899414775280041,0.9999123893113094
2191,2191.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Where you visit the in order according to its data value.,2.5,3.0,2.75,0.9704428909999999,0.186159849,0.9839662140000001,0.9998730290000001,0.9686429777276444,0.28573621721723014,0.9838395503673542,0.9998730193055829
2192,2192.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0.0,3.75,1.875,0.9775423409999999,0.249133259,0.9921790009999999,0.999834908,0.9761747566905827,0.34100459637751357,0.992117216706243,0.9998348953949899
2193,2193.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",5.0,4.25,4.625,0.981972873,0.503286362,0.991459801,0.999918458,0.9808750909012929,0.5640611223202339,0.9913923351732227,0.9999184517741518
2194,2194.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it is where you visit the parent then you vistit the children,0.0,3.0,1.5,0.9550598859999999,0.089776218,0.9793364790000001,0.999870123,0.9523232074009607,0.20114548181076503,0.9791732414070127,0.9998701130837055
2195,2195.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.",4.0,4.25,4.125,0.985333085,0.516715646,0.991496722,0.99991629,0.9844399267762709,0.5758472834946585,0.9914295478415774,0.9999162836086221
2196,2196.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",4.0,4.25,4.125,0.9695293309999999,0.194403827,0.990618573,0.999879295,0.9676737854677677,0.2929715138589879,0.9905444616439408,0.9998792857840008
2197,2197.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,1.5,3.75,2.625,0.9754685759999999,0.253573626,0.987558945,0.9998776909999999,0.9739747074471796,0.34490166796640814,0.9874606632080234,0.9998776816615331
2198,2198.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You travel the outside edge of the tree, clockwise, while naming each node.",4.5,3.0,3.75,0.9806324240000001,0.41254493600000003,0.991888944,0.9999039409999999,0.9794530137574167,0.48442224715509996,0.9918248683152207,0.9999039336657581
2199,2199.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",children to root,0.0,3.75,1.875,0.87161684,0.11716374,0.9667847490000001,0.999847556,0.8637988036138653,0.22518203867113834,0.9665223553051544,0.9998475443606828
2200,2200.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",go to the bottom of the left sub tree and visit the parent and then its children,2.0,3.75,2.875,0.975818098,0.204775944,0.98017634,0.999915392,0.9743455139810215,0.3020745637819764,0.9800197371372739,0.9999153855400584
2201,2201.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traverses through the tree in a rubber-band style shape.,3.5,3.0,3.25,0.964755714,0.16694276,0.9854732890000001,0.9998474690000001,0.9626094737115438,0.2688704105027945,0.9853585309518599,0.9998474573540403
2202,2202.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.",5.0,3.75,4.375,0.9876918790000001,0.450401634,0.990205639,0.99991468,0.9869423621800142,0.5176470374089601,0.9901282655497303,0.9999146734856961
2203,2203.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it runs through the parents and the children in order,2.5,3.0,2.75,0.951990247,0.06647706,0.985120007,0.999894988,0.9490666392944151,0.18069706241503353,0.9850024580962585,0.9998949799821838
2204,2204.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",2.5,3.75,3.125,0.98950398,0.481893122,0.991935068,0.999907808,0.9888648131009332,0.5452854247712693,0.9918713566853945,0.9999078009610092
2205,2205.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",3.5,5.0,4.25,0.975380778,0.32243228,0.992771567,0.999906909,0.9738815628895889,0.4053352096427882,0.9927144638565429,0.9999069018923692
2206,2206.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).",2.5,3.75,3.125,0.9803287390000001,0.36393556,0.987091532,0.999927004,0.9791308355190518,0.4417604090314731,0.9869895577408466,0.9999269984266511
2207,2207.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",2.5,5.0,3.75,0.9856983420000001,0.491443664,0.992886033,0.99989603,0.9848274265105694,0.5536674224500072,0.99282983411455,0.9998960220617421
2208,2208.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",5.0,5.0,5.0,0.992943943,0.7021927240000001,0.9936102640000001,0.9998955909999999,0.9925142565024201,0.7386305514238602,0.9935597863914422,0.9998955830282237
2209,2209.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,4.0,3.75,3.875,0.977036417,0.282130241,0.986704551,0.999856945,0.9756380238816968,0.36996427495170936,0.9865995196700322,0.9998569340775464
2210,2210.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",4.0,4.5,4.25,0.97477603,0.35614919700000003,0.992080196,0.999869805,0.9732399880824871,0.4349267364931177,0.9920176311669353,0.9998697950594257
2211,2211.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
2212,2212.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,5.0,4.5,4.75,0.974901557,0.344005853,0.987277455,0.999887405,0.9733731591898096,0.42426917577875023,0.9871769494945503,0.9998873964032109
2213,2213.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",5.0,5.0,5.0,0.9864150290000001,0.553832173,0.991166177,0.9999257770000001,0.9855877569685079,0.6084224654222197,0.9910963916036294,0.999925771332968
2214,2214.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",5.0,5.0,5.0,0.992846012,0.659195304,0.9934807179999999,0.9999324470000001,0.99241036188444,0.700894025619176,0.9934292170045168,0.9999324418422321
2215,2215.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traversing a tree level by level,0.0,3.0,1.5,0.912176013,0.167124882,0.978209422,0.999854648,0.9068278729017082,0.26903024919899066,0.9780372808870443,0.9998546369021672
2216,2216.0,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler traversal through the tree in a rubber band style shape.,3.5,3.0,3.25,0.972084165,0.113725625,0.986505889,0.99986313,0.9703841989469808,0.22216458982381282,0.9863992882808319,0.99986311954978
2217,2217.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",4.5,4.0,4.25,0.9788709879999999,0.39585799,0.98240157,0.9999693759999999,0.9775843131384443,0.46977701103790104,0.9822625459995135,0.9999693736618139
2218,2218.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.",3.0,3.75,3.375,0.977898061,0.480583608,0.993707123,0.999952582,0.9765521386585798,0.5441361346777568,0.9936574105577475,0.9999525783795681
2219,2219.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;,3.0,3.75,3.375,0.9612864259999999,0.580449164,0.9862887220000001,0.99995983,0.958928919531322,0.6317827686151681,0.9861804057059134,0.9999598269329631
2220,2220.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If you delete a node from a tree, you have to link that nodes parents to the children of that node.",2.5,3.75,3.125,0.9697323440000001,0.500967741,0.9879632159999999,0.9999373640000001,0.9678891611718861,0.5620261932198882,0.9878681278663043,0.999937359217652
2221,2221.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0.5,3.0,1.75,0.965657949,0.457694799,0.994434058,0.9999578090000001,0.9635666513228553,0.524047856556256,0.994390088195687,0.999957805778657
2222,2222.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,5.0,5.0,5.0,0.9857313040000001,0.643773615,0.986156745,0.999971996,0.9848623957684945,0.6873592376039808,0.9860473861145849,0.9999719938618546
2223,2223.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",3.5,4.25,3.875,0.969819248,0.491141349,0.9891231690000001,0.9999567779999999,0.9679813572883451,0.5534020968142216,0.98903724425795,0.9999567746999386
2224,2224.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,3.5,5.0,4.25,0.929501534,0.185579628,0.98106182,0.999950179,0.9252084509168708,0.28522698841375965,0.9809122122483123,0.9999501751960956
2225,2225.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,0.0,3.75,1.875,0.9815709,0.399991959,0.983279114,0.999957977,0.9804486393050327,0.47340517356124,0.9831470224177736,0.999957973791484
2226,2226.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",You remove the element from the tree and move the next highest element from the left into its place.,5.0,3.75,4.375,0.980819166,0.28874045600000003,0.9873308940000001,0.999856711,0.9796511276207576,0.37576570557061656,0.9872308106517294,0.9998567000596802
2227,2227.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node;,0.0,3.0,1.5,0.8282215,0.486063361,0.9819431359999999,0.999711507,0.8177608557585309,0.5489454195252615,0.9818004904646015,0.9997114849731473
2228,2228.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it",5.0,5.0,5.0,0.9793087840000001,0.494619429,0.987458589,0.999954553,0.9780487692164306,0.5564546207952129,0.9873595144161328,0.9999545495300567
2229,2229.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).",5.0,5.0,5.0,0.9800882940000001,0.44304955,0.9878647220000001,0.999873765,0.9788757483513495,0.5111945082203668,0.9877688557838332,0.9998737553617775
2230,2230.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ",4.0,3.75,3.875,0.977770329,0.5162547829999999,0.988337611,0.9999650409999999,0.9764166282753115,0.5754428087961319,0.9882454805102909,0.9999650383308304
2231,2231.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,3.0,3.75,3.375,0.977343738,0.537622213,0.986289929,0.99993269,0.9759640595383559,0.5941958542945545,0.9861816222409667,0.9999326848607853
2232,2232.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.",5.0,5.0,5.0,0.98298353,0.566489458,0.99377191,0.99997369,0.9819472929917852,0.6195310845444773,0.9937227093618072,0.9999736879911941
2233,2233.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp,0.0,3.75,1.875,0.977402628,0.341088891,0.985420388,0.999896111,0.9760265357108944,0.4217091149243017,0.985305212044771,0.9998961030679264
2234,2234.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",5.0,4.25,4.625,0.9858053920000001,0.6975473759999999,0.98852382,0.999964782,0.9849409954402728,0.7345535790224058,0.9884331605233363,0.9999647793110554
2235,2235.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0.0,3.0,1.5,0.971194089,0.316525221,0.995231575,0.9999732370000001,0.9694399207715987,0.4001509012730467,0.9951939054170019,0.999973234956607
2236,2236.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",1.5,3.75,2.625,0.9767566320000001,0.515598357,0.983608239,0.999953485,0.9753412010606126,0.5748666989577308,0.9834787474380119,0.9999534814485135
2237,2237.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",5.0,5.0,5.0,0.9804095629999999,0.545179784,0.9834372840000001,0.99990704,0.9792165813870977,0.6008287283847262,0.9833064419284493,0.9999070329023713
2238,2238.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",4.0,4.5,4.25,0.97986275,0.6132048370000001,0.9882175459999999,0.999972216,0.9786364695967393,0.6605306632426666,0.988124467021328,0.9999722138786519
2239,2239.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",not answered,0.0,0.0,0.0,0.886611939,0.024732584,0.974181154,0.9995603540000001,0.8797070459700166,0.14406017825368111,0.9739771903930837,0.9995603204323998
2240,2240.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you cannot delete a node because that can cause a node to have more than 2 children,0.0,2.5,1.25,0.9622688290000001,0.326445788,0.979993333,0.99990962,0.9599711470628249,0.4088576500173341,0.9798352844193743,0.999909613099358
2241,2241.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",3.5,3.75,3.625,0.9800614120000001,0.603982508,0.990742621,0.999948104,0.9788472293418373,0.6524367204831292,0.9906694895977897,0.9999481000376663
2242,2242.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",3.0,5.0,4.0,0.9789496059999999,0.5165065529999999,0.990613505,0.999966517,0.9776677186696485,0.5756637738005866,0.9905393536077766,0.9999665144435254
2243,2243.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",3.5,3.75,3.625,0.9692502620000001,0.374991119,0.985062973,0.999888378,0.967377722248306,0.4514632792848211,0.9849449735393143,0.9998883694775008
2244,2244.0,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,2.0,3.75,2.875,0.973126113,0.433225125,0.984099669,0.9998756609999999,0.9714895975379809,0.5025721381449371,0.9839740596345805,0.9998756515065397
2245,2245.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,Log(n) where n is the number of nodes.,4.5,5.0,4.75,0.947335303,0.266800225,0.9799232809999999,0.9999069490000001,0.9441282272635034,0.35650994340413694,0.9797646790228904,0.9999069418954234
2246,2246.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n) steps,4.5,5.0,4.75,0.835347891,0.114863806,0.9796036920000001,0.9998236909999999,0.8253212163238524,0.2231635101468671,0.9794425653351035,0.9998236775385559
2247,2247.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,The number of levels and the height of the tree,5.0,5.0,5.0,0.979561925,0.660471916,0.995118377,0.999923406,0.9783173255212789,0.7020144393947134,0.9950798131759356,0.9999234001519387
2248,2248.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,It is the same as the height of the tree.,5.0,5.0,5.0,0.984511554,0.778602481,0.9948787,0.9999629729999999,0.983568367725471,0.8056912905742589,0.9948382427766175,0.9999629701729357
2249,2249.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"Given n elements, it would take n/2 steps to find the search criteria.",0.0,3.0,1.5,0.936146796,0.14142222699999998,0.985961775,0.9999197009999999,0.932258383592615,0.2464724095970705,0.9858508758914301,0.9999196948690566
2250,2250.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log n,4.5,5.0,4.75,0.7654427290000001,0.08872189400000001,0.951713334,0.9997739640000001,0.7511591011526217,0.20022015827199227,0.951331879206733,0.9997739467418285
2251,2251.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.,0.0,3.75,1.875,0.958936989,0.319079846,0.983504743,0.9997964779999999,0.9564364109325787,0.40239295840656286,0.9833744338407628,0.9997964624608044
2252,2252.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,2^n where n is the # of levels the binary tree has,0.0,3.75,1.875,0.949441135,0.33068987699999997,0.992535208,0.9999340290000001,0.9463622962628038,0.41258245894926243,0.9924762376687465,0.99993402396302
2253,2253.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,The number of steps to search a node is the function n-1.,2.5,4.0,3.25,0.9536960720000001,0.282745481,0.9935113170000001,0.999935624,0.9508763424192284,0.3705042380503342,0.9934600577303635,0.9999356190848004
2254,2254.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"It would take n/2 elements, given n.",0.0,3.0,1.5,0.916542888,0.20067079399999999,0.989676508,0.999901452,0.9114606736480731,0.2984716941468425,0.9895949545229664,0.9999014444757195
2255,2255.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n),4.5,5.0,4.75,0.8182926770000001,0.097049795,0.974396625,0.9998137990000001,0.8072274059563437,0.2075291096226862,0.9741943635699488,0.9998137847832878
2256,2256.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,O(log n),4.5,5.0,4.75,0.846743763,0.101559386,0.983574952,0.999868965,0.8374110527187757,0.21148693539781577,0.9834451974775146,0.9998689549952906
2257,2257.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,O( Log (n) ),4.5,5.0,4.75,0.8288198109999999,0.092861734,0.983998343,0.999856911,0.8183956015773046,0.20385347345665367,0.983871933179888,0.9998569000749504
2258,2258.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.",5.0,5.0,5.0,0.9691763520000001,0.539504886,0.9637536529999999,0.999942193,0.9672993114160371,0.595848175253493,0.963467314266206,0.999942188586353
2259,2259.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"N, n being the number of nodes.",2.5,5.0,3.75,0.952394188,0.31611982,0.982686987,0.9999259140000001,0.9494951787342405,0.39979510259262013,0.982550217735484,0.9999259083434283
2260,2260.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.",5.0,5.0,5.0,0.956364572,0.331134677,0.987119541,0.9999364890000001,0.9537073437168782,0.41297283601555906,0.9870177880062225,0.9999364841508446
2261,2261.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n),4.5,5.0,4.75,0.8182926770000001,0.097049795,0.974396625,0.9998137990000001,0.8072274059563437,0.2075291096226862,0.9741943635699488,0.9998137847832878
2262,2262.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.",5.0,5.0,5.0,0.9670422670000001,0.44582799100000003,0.982797076,0.999930023,0.9650352689186434,0.5136329966341668,0.9826611764160856,0.9999300176571561
2263,2263.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,3 steps at most.  There are 3 cases.,0.0,3.0,1.5,0.927428722,0.406695634,0.9929833090000001,0.999932321,0.9230094127074706,0.47928862900167607,0.9929278785750703,0.9999323158326118
2264,2264.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n)    where n equals the total number of nodes in the tree.,4.5,5.0,4.75,0.9542611240000001,0.37837675200000004,0.986657508,0.9999440959999999,0.9514758038939293,0.4544346674999673,0.9865521050399462,0.9999440917316497
2265,2265.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,the same number of steps as the number of levels or generations in the tree,5.0,5.0,5.0,0.9713215829999999,0.311775029,0.992528686,0.999932732,0.9695751786615903,0.3959819129247875,0.9924696641462795,0.9999327268639923
2266,2266.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,5.0,5.0,5.0,0.969864488,0.43254837399999996,0.991999581,0.999933583,0.9680293522288381,0.5019781901458514,0.9919363793249102,0.9999335779289672
2267,2267.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",0.0,4.5,2.25,0.928836167,0.10451789199999999,0.985557105,0.999919707,0.9245025656478383,0.21408345718940958,0.9854430090811307,0.9999197008695148
2268,2268.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log n,4.5,5.0,4.75,0.7654427290000001,0.08872189400000001,0.951713334,0.9997739640000001,0.7511591011526217,0.20022015827199227,0.951331879206733,0.9997739467418285
2269,2269.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,( n(n-1) ) / 2,0.0,3.0,1.5,0.787222385,0.012450383,0.985930263,0.9998853209999999,0.7742650537096272,0.13328075020951435,0.98581911495307,0.9998853122440945
2270,2270.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,2n-1,0.0,4.75,2.375,0.33877328,-0.111379147,0.970397652,0.9995075840000001,0.2985071379573486,0.02460222358566326,0.9701637995005014,0.9995075464033348
2271,2271.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"it takes at most h steps, where h is the height of the tree.",5.0,5.0,5.0,0.971234977,0.585694134,0.98714154,0.9999356970000001,0.9694832986921753,0.6363859970356128,0.9870399607938267,0.9999356920903743
2272,2272.0,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0.0,3.0,1.5,0.9545506840000001,0.210919365,0.989932543,0.9999315520000001,0.9517829969745917,0.30746631438225747,0.9898530121471417,0.9999315467738975
2273,,,,,,,,,,,,,,,,
2274,,,,,,,,,1.0,1.0,1.0,1.0,1.0,1.0,0.9999999999999999,1.0000000000000002
2275,,,,,,,,,0.21631451,-0.139411196,0.9125379840000001,0.9991519040000001,0.16859110393875548,0.0,0.9118470519478267,0.9991518392466586
2276,,,,,,,,,0.953914127,0.44893312700000004,0.9893280520000001,0.999927655,0.9511076761227917,0.5163582077001111,0.989243745791779,0.9999276494763559
2277,,,,,,,,,0.057400644,0.213560682,0.007837878000000001,7.63456e-05,0.0,0.3097844564272651,0.0,0.0
2278,,,,,,,,,0.972208917,0.44363749,0.990917005,0.9999524009999999,0.9705165478598099,0.5117105115754892,0.9908452511957515,0.9999523973657484
